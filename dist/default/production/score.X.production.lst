

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Sat Jul 27 12:23:43 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F870
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2
    27                           	psect	text17,local,class=CODE,merge=1,delta=2
    28                           	psect	text18,local,class=CODE,merge=1,delta=2
    29                           	psect	text19,local,class=CODE,merge=1,delta=2
    30                           	psect	text20,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	functab,global,class=ENTRY,delta=2
    33                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    34                           	dabs	1,0x7E,2
    35     0000                     
    36                           ; Generated 12/10/2023 GMT
    37                           ; 
    38                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution. Publication is not required when
    52                           ;        this file is used in an embedded application.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC16F870 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70     0000                     	;# 
    71     0001                     	;# 
    72     0002                     	;# 
    73     0003                     	;# 
    74     0004                     	;# 
    75     0005                     	;# 
    76     0006                     	;# 
    77     0007                     	;# 
    78     000A                     	;# 
    79     000B                     	;# 
    80     000C                     	;# 
    81     000D                     	;# 
    82     000E                     	;# 
    83     000E                     	;# 
    84     000F                     	;# 
    85     0010                     	;# 
    86     0011                     	;# 
    87     0012                     	;# 
    88     0015                     	;# 
    89     0015                     	;# 
    90     0016                     	;# 
    91     0017                     	;# 
    92     0018                     	;# 
    93     0019                     	;# 
    94     001A                     	;# 
    95     001E                     	;# 
    96     001F                     	;# 
    97     0081                     	;# 
    98     0085                     	;# 
    99     0086                     	;# 
   100     0087                     	;# 
   101     008C                     	;# 
   102     008D                     	;# 
   103     008E                     	;# 
   104     0092                     	;# 
   105     0098                     	;# 
   106     0099                     	;# 
   107     009E                     	;# 
   108     009F                     	;# 
   109     010C                     	;# 
   110     010D                     	;# 
   111     010E                     	;# 
   112     010F                     	;# 
   113     018C                     	;# 
   114     018D                     	;# 
   115     0000                     	;# 
   116     0001                     	;# 
   117     0002                     	;# 
   118     0003                     	;# 
   119     0004                     	;# 
   120     0005                     	;# 
   121     0006                     	;# 
   122     0007                     	;# 
   123     000A                     	;# 
   124     000B                     	;# 
   125     000C                     	;# 
   126     000D                     	;# 
   127     000E                     	;# 
   128     000E                     	;# 
   129     000F                     	;# 
   130     0010                     	;# 
   131     0011                     	;# 
   132     0012                     	;# 
   133     0015                     	;# 
   134     0015                     	;# 
   135     0016                     	;# 
   136     0017                     	;# 
   137     0018                     	;# 
   138     0019                     	;# 
   139     001A                     	;# 
   140     001E                     	;# 
   141     001F                     	;# 
   142     0081                     	;# 
   143     0085                     	;# 
   144     0086                     	;# 
   145     0087                     	;# 
   146     008C                     	;# 
   147     008D                     	;# 
   148     008E                     	;# 
   149     0092                     	;# 
   150     0098                     	;# 
   151     0099                     	;# 
   152     009E                     	;# 
   153     009F                     	;# 
   154     010C                     	;# 
   155     010D                     	;# 
   156     010E                     	;# 
   157     010F                     	;# 
   158     018C                     	;# 
   159     018D                     	;# 
   160     0000                     	;# 
   161     0001                     	;# 
   162     0002                     	;# 
   163     0003                     	;# 
   164     0004                     	;# 
   165     0005                     	;# 
   166     0006                     	;# 
   167     0007                     	;# 
   168     000A                     	;# 
   169     000B                     	;# 
   170     000C                     	;# 
   171     000D                     	;# 
   172     000E                     	;# 
   173     000E                     	;# 
   174     000F                     	;# 
   175     0010                     	;# 
   176     0011                     	;# 
   177     0012                     	;# 
   178     0015                     	;# 
   179     0015                     	;# 
   180     0016                     	;# 
   181     0017                     	;# 
   182     0018                     	;# 
   183     0019                     	;# 
   184     001A                     	;# 
   185     001E                     	;# 
   186     001F                     	;# 
   187     0081                     	;# 
   188     0085                     	;# 
   189     0086                     	;# 
   190     0087                     	;# 
   191     008C                     	;# 
   192     008D                     	;# 
   193     008E                     	;# 
   194     0092                     	;# 
   195     0098                     	;# 
   196     0099                     	;# 
   197     009E                     	;# 
   198     009F                     	;# 
   199     010C                     	;# 
   200     010D                     	;# 
   201     010E                     	;# 
   202     010F                     	;# 
   203     018C                     	;# 
   204     018D                     	;# 
   205     0000                     	;# 
   206     0001                     	;# 
   207     0002                     	;# 
   208     0003                     	;# 
   209     0004                     	;# 
   210     0005                     	;# 
   211     0006                     	;# 
   212     0007                     	;# 
   213     000A                     	;# 
   214     000B                     	;# 
   215     000C                     	;# 
   216     000D                     	;# 
   217     000E                     	;# 
   218     000E                     	;# 
   219     000F                     	;# 
   220     0010                     	;# 
   221     0011                     	;# 
   222     0012                     	;# 
   223     0015                     	;# 
   224     0015                     	;# 
   225     0016                     	;# 
   226     0017                     	;# 
   227     0018                     	;# 
   228     0019                     	;# 
   229     001A                     	;# 
   230     001E                     	;# 
   231     001F                     	;# 
   232     0081                     	;# 
   233     0085                     	;# 
   234     0086                     	;# 
   235     0087                     	;# 
   236     008C                     	;# 
   237     008D                     	;# 
   238     008E                     	;# 
   239     0092                     	;# 
   240     0098                     	;# 
   241     0099                     	;# 
   242     009E                     	;# 
   243     009F                     	;# 
   244     010C                     	;# 
   245     010D                     	;# 
   246     010E                     	;# 
   247     010F                     	;# 
   248     018C                     	;# 
   249     018D                     	;# 
   250     0000                     	;# 
   251     0001                     	;# 
   252     0002                     	;# 
   253     0003                     	;# 
   254     0004                     	;# 
   255     0005                     	;# 
   256     0006                     	;# 
   257     0007                     	;# 
   258     000A                     	;# 
   259     000B                     	;# 
   260     000C                     	;# 
   261     000D                     	;# 
   262     000E                     	;# 
   263     000E                     	;# 
   264     000F                     	;# 
   265     0010                     	;# 
   266     0011                     	;# 
   267     0012                     	;# 
   268     0015                     	;# 
   269     0015                     	;# 
   270     0016                     	;# 
   271     0017                     	;# 
   272     0018                     	;# 
   273     0019                     	;# 
   274     001A                     	;# 
   275     001E                     	;# 
   276     001F                     	;# 
   277     0081                     	;# 
   278     0085                     	;# 
   279     0086                     	;# 
   280     0087                     	;# 
   281     008C                     	;# 
   282     008D                     	;# 
   283     008E                     	;# 
   284     0092                     	;# 
   285     0098                     	;# 
   286     0099                     	;# 
   287     009E                     	;# 
   288     009F                     	;# 
   289     010C                     	;# 
   290     010D                     	;# 
   291     010E                     	;# 
   292     010F                     	;# 
   293     018C                     	;# 
   294     018D                     	;# 
   295     0000                     	;# 
   296     0001                     	;# 
   297     0002                     	;# 
   298     0003                     	;# 
   299     0004                     	;# 
   300     0005                     	;# 
   301     0006                     	;# 
   302     0007                     	;# 
   303     000A                     	;# 
   304     000B                     	;# 
   305     000C                     	;# 
   306     000D                     	;# 
   307     000E                     	;# 
   308     000E                     	;# 
   309     000F                     	;# 
   310     0010                     	;# 
   311     0011                     	;# 
   312     0012                     	;# 
   313     0015                     	;# 
   314     0015                     	;# 
   315     0016                     	;# 
   316     0017                     	;# 
   317     0018                     	;# 
   318     0019                     	;# 
   319     001A                     	;# 
   320     001E                     	;# 
   321     001F                     	;# 
   322     0081                     	;# 
   323     0085                     	;# 
   324     0086                     	;# 
   325     0087                     	;# 
   326     008C                     	;# 
   327     008D                     	;# 
   328     008E                     	;# 
   329     0092                     	;# 
   330     0098                     	;# 
   331     0099                     	;# 
   332     009E                     	;# 
   333     009F                     	;# 
   334     010C                     	;# 
   335     010D                     	;# 
   336     010E                     	;# 
   337     010F                     	;# 
   338     018C                     	;# 
   339     018D                     	;# 
   340                           
   341                           	psect	strings
   342     03B4                     __pstrings:
   343     03B4                     stringtab:
   344     03B4                     __stringtab:
   345     03B4                     stringcode:	
   346                           ;	String table - string pointers are 1 byte each
   347                           
   348     03B4                     stringdir:
   349     03B4  3003               	movlw	high stringdir
   350     03B5  008A               	movwf	10
   351     03B6  0804               	movf	4,w
   352     03B7  0A84               	incf	4,f
   353     03B8  0782               	addwf	2,f
   354     03B9                     __stringbase:
   355     03B9  3400               	retlw	0
   356     03BA                     __end_of__stringtab:
   357     03BA                     _NUMBERS:
   358     03BA  347E               	retlw	126
   359     03BB  340C               	retlw	12
   360     03BC  34B6               	retlw	182
   361     03BD  349E               	retlw	158
   362     03BE  34CC               	retlw	204
   363     03BF  34DA               	retlw	218
   364     03C0  34FA               	retlw	250
   365     03C1  340E               	retlw	14
   366     03C2  34FE               	retlw	254
   367     03C3  34CE               	retlw	206
   368     03C4                     __end_of_NUMBERS:
   369     03C4                     _DIGITS:
   370     03C4  343E               	retlw	62
   371     03C5  343D               	retlw	61
   372     03C6  343B               	retlw	59
   373     03C7  3437               	retlw	55
   374     03C8  342F               	retlw	47
   375     03C9  341F               	retlw	31
   376     03CA                     __end_of_DIGITS:
   377     000E                     _TMR1	set	14
   378     0003                     _STATUSbits	set	3
   379     000C                     _PIR1bits	set	12
   380     0005                     _PORTAbits	set	5
   381     0007                     _PORTCbits	set	7
   382     000B                     _INTCONbits	set	11
   383     001F                     _ADCON0	set	31
   384     0010                     _T1CONbits	set	16
   385     0010                     _T1CON	set	16
   386     0007                     _PORTC	set	7
   387     0006                     _PORTB	set	6
   388     005F                     _GIE	set	95
   389     005E                     _PEIE	set	94
   390     008C                     _PIE1bits	set	140
   391     0081                     _OPTION_REGbits	set	129
   392     009F                     _ADCON1bits	set	159
   393     0087                     _TRISC	set	135
   394     0086                     _TRISB	set	134
   395     0085                     _TRISA	set	133
   396     010C                     _EEDATA	set	268
   397     010D                     _EEADR	set	269
   398     018D                     _EECON2	set	397
   399     018C                     _EECON1bits	set	396
   400     018C                     _EECON1	set	396
   401                           
   402                           	psect	cinit
   403     000B                     start_initialization:	
   404                           ; #config settings
   405                           
   406     000B                     __initialization:
   407                           
   408                           ; Clear objects allocated to BANK0
   409     000B  1383               	bcf	3,7	;select IRP bank0
   410     000C  3020               	movlw	low __pbssBANK0
   411     000D  0084               	movwf	4
   412     000E  3036               	movlw	low (__pbssBANK0+22)
   413     000F  242F               	fcall	clear_ram0
   414     0010                     end_of_initialization:	
   415                           ;End of C runtime variable initialization code
   416                           
   417     0010                     __end_of__initialization:
   418     0010  0183               	clrf	3
   419     0011  29B8               	ljmp	_main	;jump to C main() function
   420                           
   421                           	psect	bssBANK0
   422     0020                     __pbssBANK0:
   423     0020                     _timers:
   424     0020                     	ds	10
   425     002A                     _score:
   426     002A                     	ds	5
   427     002F                     _button:
   428     002F                     	ds	4
   429     0033                     _rxClocks:
   430     0033                     	ds	2
   431     0035                     _isSaveMemory:
   432     0035                     	ds	1
   433                           
   434                           	psect	clrtext
   435     042F                     clear_ram0:	
   436                           ;	Called with FSR containing the base address, and
   437                           ;	W with the last address+1
   438                           
   439     042F  0064               	clrwdt	;clear the watchdog before getting into this loop
   440     0430                     clrloop0:
   441     0430  0180               	clrf	0	;clear RAM location pointed to by FSR
   442     0431  0A84               	incf	4,f	;increment pointer
   443     0432  0604               	xorwf	4,w	;XOR with final address
   444     0433  1903               	btfsc	3,2	;have we reached the end yet?
   445     0434  3400               	retlw	0	;all done for this memory range, return
   446     0435  0604               	xorwf	4,w	;XOR again to restore value
   447     0436  2C30               	goto	clrloop0	;do the next byte
   448                           
   449                           	psect	cstackCOMMON
   450     0070                     __pcstackCOMMON:
   451     0070                     ?_loadMemory:
   452     0070                     ?_checkButtons:	
   453                           ; 1 bytes @ 0x0
   454                           
   455     0070                     ?_updateDisplay:	
   456                           ; 1 bytes @ 0x0
   457                           
   458     0070                     ?_up2:	
   459                           ; 1 bytes @ 0x0
   460                           
   461     0070                     ?_up1:	
   462                           ; 1 bytes @ 0x0
   463                           
   464     0070                     ?_saveMemory:	
   465                           ; 1 bytes @ 0x0
   466                           
   467     0070                     ?_setup:	
   468                           ; 1 bytes @ 0x0
   469                           
   470     0070                     ?_main:	
   471                           ; 1 bytes @ 0x0
   472                           
   473     0070                     ?_down1:	
   474                           ; 1 bytes @ 0x0
   475                           
   476     0070                     ?_down2:	
   477                           ; 1 bytes @ 0x0
   478                           
   479     0070                     ?_change:	
   480                           ; 1 bytes @ 0x0
   481                           
   482     0070                     ?_clear:	
   483                           ; 1 bytes @ 0x0
   484                           
   485     0070                     ?_win:	
   486                           ; 1 bytes @ 0x0
   487                           
   488     0070                     ?_getNumber:	
   489                           ; 1 bytes @ 0x0
   490                           
   491     0070                     ?_isr:	
   492                           ; 1 bytes @ 0x0
   493                           
   494     0070                     ??_isr:	
   495                           ; 1 bytes @ 0x0
   496                           
   497                           
   498                           ; 1 bytes @ 0x0
   499     0070                     	ds	2
   500     0072                     ??_loadMemory:
   501     0072                     ??_up2:	
   502                           ; 1 bytes @ 0x2
   503                           
   504     0072                     ??_up1:	
   505                           ; 1 bytes @ 0x2
   506                           
   507     0072                     ??_setup:	
   508                           ; 1 bytes @ 0x2
   509                           
   510     0072                     ??_down1:	
   511                           ; 1 bytes @ 0x2
   512                           
   513     0072                     ??_down2:	
   514                           ; 1 bytes @ 0x2
   515                           
   516     0072                     ??_change:	
   517                           ; 1 bytes @ 0x2
   518                           
   519     0072                     ?_updateMemory:	
   520                           ; 1 bytes @ 0x2
   521                           
   522     0072                     ?___bmul:	
   523                           ; 1 bytes @ 0x2
   524                           
   525     0072                     ?___awdiv:	
   526                           ; 1 bytes @ 0x2
   527                           
   528     0072                     change@aux:	
   529                           ; 2 bytes @ 0x2
   530                           
   531     0072                     updateMemory@value:	
   532                           ; 1 bytes @ 0x2
   533                           
   534     0072                     ___bmul@multiplicand:	
   535                           ; 1 bytes @ 0x2
   536                           
   537     0072                     ___awdiv@divisor:	
   538                           ; 1 bytes @ 0x2
   539                           
   540                           
   541                           ; 2 bytes @ 0x2
   542     0072                     	ds	1
   543     0073                     ??_updateMemory:
   544     0073                     ??___bmul:	
   545                           ; 1 bytes @ 0x3
   546                           
   547     0073                     updateMemory@mem:	
   548                           ; 1 bytes @ 0x3
   549                           
   550     0073                     ___bmul@product:	
   551                           ; 1 bytes @ 0x3
   552                           
   553                           
   554                           ; 1 bytes @ 0x3
   555     0073                     	ds	1
   556     0074                     updateMemory@addr:
   557     0074                     ___bmul@multiplier:	
   558                           ; 1 bytes @ 0x4
   559                           
   560     0074                     ___awdiv@dividend:	
   561                           ; 1 bytes @ 0x4
   562                           
   563                           
   564                           ; 2 bytes @ 0x4
   565     0074                     	ds	1
   566     0075                     ??_saveMemory:
   567     0075                     ?_onPressed:	
   568                           ; 1 bytes @ 0x5
   569                           
   570     0075                     ??_clear:	
   571                           ; 1 bytes @ 0x5
   572                           
   573     0075                     ??_win:	
   574                           ; 1 bytes @ 0x5
   575                           
   576     0075                     onPressed@action:	
   577                           ; 1 bytes @ 0x5
   578                           
   579                           
   580                           ; 1 bytes @ 0x5
   581     0075                     	ds	1
   582     0076                     ?_onClick:
   583     0076                     ??___awdiv:	
   584                           ; 1 bytes @ 0x6
   585                           
   586     0076                     onClick@action:	
   587                           ; 1 bytes @ 0x6
   588                           
   589     0076                     ___awdiv@counter:	
   590                           ; 1 bytes @ 0x6
   591                           
   592     0076                     onPressed@pressTime:	
   593                           ; 1 bytes @ 0x6
   594                           
   595                           
   596                           ; 2 bytes @ 0x6
   597     0076                     	ds	1
   598     0077                     ??_onClick:
   599     0077                     onClick@btn:	
   600                           ; 1 bytes @ 0x7
   601                           
   602     0077                     ___awdiv@sign:	
   603                           ; 1 bytes @ 0x7
   604                           
   605                           
   606                           ; 1 bytes @ 0x7
   607     0077                     	ds	1
   608     0078                     onPressed@pressAction:
   609     0078                     ___awdiv@quotient:	
   610                           ; 1 bytes @ 0x8
   611                           
   612                           
   613                           ; 2 bytes @ 0x8
   614     0078                     	ds	1
   615     0079                     ??_onPressed:
   616     0079                     onPressed@btn:	
   617                           ; 1 bytes @ 0x9
   618                           
   619                           
   620                           ; 1 bytes @ 0x9
   621     0079                     	ds	1
   622     007A                     ??_checkButtons:
   623     007A                     ?_calcDigit:	
   624                           ; 1 bytes @ 0xA
   625                           
   626     007A                     calcDigit@dozen:	
   627                           ; 1 bytes @ 0xA
   628                           
   629                           
   630                           ; 1 bytes @ 0xA
   631     007A                     	ds	1
   632     007B                     ??_updateDisplay:
   633     007B                     ??_getNumber:	
   634                           ; 1 bytes @ 0xB
   635                           
   636     007B                     _checkButtons$357:	
   637                           ; 1 bytes @ 0xB
   638                           
   639                           
   640                           ; 1 bytes @ 0xB
   641     007B                     	ds	1
   642                           
   643                           	psect	cstackBANK0
   644     0036                     __pcstackBANK0:
   645     0036                     ??_calcDigit:
   646                           
   647                           ; 1 bytes @ 0x0
   648     0036                     	ds	2
   649     0038                     _calcDigit$382:
   650                           
   651                           ; 2 bytes @ 0x2
   652     0038                     	ds	2
   653     003A                     calcDigit@u:
   654                           
   655                           ; 1 bytes @ 0x4
   656     003A                     	ds	1
   657     003B                     calcDigit@value:
   658                           
   659                           ; 1 bytes @ 0x5
   660     003B                     	ds	1
   661     003C                     calcDigit@d:
   662                           
   663                           ; 1 bytes @ 0x6
   664     003C                     	ds	1
   665     003D                     updateDisplay@number:
   666                           
   667                           ; 1 bytes @ 0x7
   668     003D                     	ds	1
   669     003E                     updateDisplay@digit:
   670                           
   671                           ; 1 bytes @ 0x8
   672     003E                     	ds	1
   673     003F                     ??_main:
   674                           
   675                           ; 1 bytes @ 0x9
   676     003F                     	ds	3
   677                           
   678                           	psect	maintext
   679     01B8                     __pmaintext:	
   680 ;;
   681 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   682 ;;
   683 ;; *************** function _main *****************
   684 ;; Defined at:
   685 ;;		line 28 in file "main.c"
   686 ;; Parameters:    Size  Location     Type
   687 ;;		None
   688 ;; Auto vars:     Size  Location     Type
   689 ;;		None
   690 ;; Return value:  Size  Location     Type
   691 ;;                  1    wreg      void 
   692 ;; Registers used:
   693 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   694 ;; Tracked objects:
   695 ;;		On entry : B00/0
   696 ;;		On exit  : 0/0
   697 ;;		Unchanged: 0/0
   698 ;; Data sizes:     COMMON   BANK0   BANK1
   699 ;;      Params:         0       0       0
   700 ;;      Locals:         0       0       0
   701 ;;      Temps:          0       3       0
   702 ;;      Totals:         0       3       0
   703 ;;Total ram usage:        3 bytes
   704 ;; Hardware stack levels required when called: 6
   705 ;; This function calls:
   706 ;;		_checkButtons
   707 ;;		_loadMemory
   708 ;;		_saveMemory
   709 ;;		_setup
   710 ;;		_up1
   711 ;;		_up2
   712 ;;		_updateDisplay
   713 ;; This function is called by:
   714 ;;		Startup code after reset
   715 ;; This function uses a non-reentrant model
   716 ;;
   717                           
   718     01B8                     _main:	
   719                           ;psect for function _main
   720                           
   721     01B8                     l1662:	
   722                           ;incstack = 0
   723                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   724                           
   725                           
   726                           ;main.c: 30:     setup();
   727     01B8  235D               	fcall	_setup
   728     01B9                     l1664:
   729                           
   730                           ;main.c: 32:     _delay((unsigned long)((500)*(12800000L/4000.0)));
   731     01B9  3009               	movlw	9
   732     01BA  1283               	bcf	3,5	;RP0=0, select bank0
   733     01BB  1303               	bcf	3,6	;RP1=0, select bank0
   734     01BC  00C1               	movwf	??_main+2
   735     01BD  301E               	movlw	30
   736     01BE  00C0               	movwf	??_main+1
   737     01BF  30E4               	movlw	228
   738     01C0  00BF               	movwf	??_main
   739     01C1                     u1357:
   740     01C1  0BBF               	decfsz	??_main,f
   741     01C2  29C1               	goto	u1357
   742     01C3  0BC0               	decfsz	??_main+1,f
   743     01C4  29C1               	goto	u1357
   744     01C5  0BC1               	decfsz	??_main+2,f
   745     01C6  29C1               	goto	u1357
   746     01C7                     l1666:
   747                           
   748                           ;main.c: 34:     score.team1 = 0;
   749     01C7  1283               	bcf	3,5	;RP0=0, select bank0
   750     01C8  1303               	bcf	3,6	;RP1=0, select bank0
   751     01C9  01AA               	clrf	_score
   752     01CA                     l1668:
   753                           
   754                           ;main.c: 35:     score.team2 = 0;
   755     01CA  01AB               	clrf	_score+1
   756     01CB                     l1670:
   757                           
   758                           ;main.c: 37:     loadMemory();
   759     01CB  215C               	fcall	_loadMemory
   760     01CC                     l1672:
   761                           
   762                           ;main.c: 38:     isSaveMemory = 0;
   763     01CC  1283               	bcf	3,5	;RP0=0, select bank0
   764     01CD  1303               	bcf	3,6	;RP1=0, select bank0
   765     01CE  01B5               	clrf	_isSaveMemory
   766     01CF                     l1674:
   767                           
   768                           ;main.c: 41:         checkButtons();
   769     01CF  20F8               	fcall	_checkButtons
   770     01D0                     l1676:
   771                           
   772                           ;main.c: 42:         updateDisplay();
   773     01D0  22B7               	fcall	_updateDisplay
   774     01D1                     l1678:
   775                           
   776                           ;main.c: 43:         if (timers[2] == 0 && rxClocks > 0) {
   777     01D1  1283               	bcf	3,5	;RP0=0, select bank0
   778     01D2  1303               	bcf	3,6	;RP1=0, select bank0
   779     01D3  0824               	movf	_timers+4,w	;volatile
   780     01D4  0425               	iorwf	_timers+5,w	;volatile
   781     01D5  1D03               	btfss	3,2
   782     01D6  29D8               	goto	u1211
   783     01D7  29D9               	goto	u1210
   784     01D8                     u1211:
   785     01D8  29F4               	goto	l1694
   786     01D9                     u1210:
   787     01D9                     l1680:
   788     01D9  0833               	movf	_rxClocks,w	;volatile
   789     01DA  0434               	iorwf	_rxClocks+1,w	;volatile
   790     01DB  1903               	btfsc	3,2
   791     01DC  29DE               	goto	u1221
   792     01DD  29DF               	goto	u1220
   793     01DE                     u1221:
   794     01DE  29F4               	goto	l1694
   795     01DF                     u1220:
   796     01DF                     l1682:
   797                           
   798                           ;main.c: 44:             PORTCbits.RC7 = 0;
   799     01DF  1387               	bcf	7,7	;volatile
   800     01E0                     l1684:
   801                           
   802                           ;main.c: 45:             if (rxClocks > 200) up2();
   803     01E0  3000               	movlw	0
   804     01E1  0234               	subwf	_rxClocks+1,w	;volatile
   805     01E2  30C9               	movlw	201
   806     01E3  1903               	skipnz
   807     01E4  0233               	subwf	_rxClocks,w	;volatile
   808     01E5  1C03               	skipc
   809     01E6  29E8               	goto	u1231
   810     01E7  29E9               	goto	u1230
   811     01E8                     u1231:
   812     01E8  29EB               	goto	l1688
   813     01E9                     u1230:
   814     01E9                     l1686:
   815     01E9  23E0               	fcall	_up2
   816     01EA  29EC               	goto	l1690
   817     01EB                     l1688:
   818     01EB  23CA               	fcall	_up1
   819     01EC                     l1690:
   820                           
   821                           ;main.c: 47:             rxClocks = 0;
   822     01EC  1283               	bcf	3,5	;RP0=0, select bank0
   823     01ED  1303               	bcf	3,6	;RP1=0, select bank0
   824     01EE  01B3               	clrf	_rxClocks	;volatile
   825     01EF  01B4               	clrf	_rxClocks+1	;volatile
   826     01F0                     l1692:
   827                           
   828                           ;main.c: 48:             timers[3] = 3000;
   829     01F0  300B               	movlw	11
   830     01F1  00A7               	movwf	_timers+7	;volatile
   831     01F2  30B8               	movlw	184
   832     01F3  00A6               	movwf	_timers+6	;volatile
   833     01F4                     l1694:
   834                           
   835                           ;main.c: 51:         if(isSaveMemory && timers[4] == 0){
   836     01F4  0835               	movf	_isSaveMemory,w
   837     01F5  1903               	btfsc	3,2
   838     01F6  29F8               	goto	u1241
   839     01F7  29F9               	goto	u1240
   840     01F8                     u1241:
   841     01F8  29CF               	goto	l1674
   842     01F9                     u1240:
   843     01F9                     l1696:
   844     01F9  0828               	movf	_timers+8,w	;volatile
   845     01FA  0429               	iorwf	_timers+9,w	;volatile
   846     01FB  1D03               	btfss	3,2
   847     01FC  29FE               	goto	u1251
   848     01FD  29FF               	goto	u1250
   849     01FE                     u1251:
   850     01FE  29CF               	goto	l1674
   851     01FF                     u1250:
   852     01FF                     l1698:
   853                           
   854                           ;main.c: 52:             isSaveMemory = 0;
   855     01FF  01B5               	clrf	_isSaveMemory
   856     0200                     l1700:
   857                           
   858                           ;main.c: 53:             saveMemory();
   859     0200  239B               	fcall	_saveMemory
   860     0201  29CF               	goto	l1674
   861     0202  280A               	ljmp	start
   862     0203                     __end_of_main:
   863                           
   864                           	psect	text1
   865     02B7                     __ptext1:	
   866 ;; *************** function _updateDisplay *****************
   867 ;; Defined at:
   868 ;;		line 17 in file "display.c"
   869 ;; Parameters:    Size  Location     Type
   870 ;;		None
   871 ;; Auto vars:     Size  Location     Type
   872 ;;  digit           1    8[BANK0 ] unsigned char 
   873 ;;  number          1    7[BANK0 ] unsigned char 
   874 ;; Return value:  Size  Location     Type
   875 ;;                  1    wreg      void 
   876 ;; Registers used:
   877 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   878 ;; Tracked objects:
   879 ;;		On entry : 0/0
   880 ;;		On exit  : 0/0
   881 ;;		Unchanged: 0/0
   882 ;; Data sizes:     COMMON   BANK0   BANK1
   883 ;;      Params:         0       0       0
   884 ;;      Locals:         0       2       0
   885 ;;      Temps:          0       0       0
   886 ;;      Totals:         0       2       0
   887 ;;Total ram usage:        2 bytes
   888 ;; Hardware stack levels used: 1
   889 ;; Hardware stack levels required when called: 4
   890 ;; This function calls:
   891 ;;		_getNumber
   892 ;; This function is called by:
   893 ;;		_main
   894 ;; This function uses a non-reentrant model
   895 ;;
   896                           
   897     02B7                     _updateDisplay:	
   898                           ;psect for function _updateDisplay
   899                           
   900     02B7                     l1644:	
   901                           ;incstack = 0
   902                           ; Regs used in _updateDisplay: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   903                           
   904                           
   905                           ;display.c: 18:     if (timers[0]) return;
   906     02B7  1283               	bcf	3,5	;RP0=0, select bank0
   907     02B8  1303               	bcf	3,6	;RP1=0, select bank0
   908     02B9  0820               	movf	_timers,w	;volatile
   909     02BA  0421               	iorwf	_timers+1,w	;volatile
   910     02BB  1903               	btfsc	3,2
   911     02BC  2ABE               	goto	u1191
   912     02BD  2ABF               	goto	u1190
   913     02BE                     u1191:
   914     02BE  2AC0               	goto	l1648
   915     02BF                     u1190:
   916     02BF  2AE1               	goto	l181
   917     02C0                     l1648:
   918                           
   919                           ;display.c: 19:     timers[0] = 2;
   920     02C0  3002               	movlw	2
   921     02C1  00A0               	movwf	_timers	;volatile
   922     02C2  3000               	movlw	0
   923     02C3  00A1               	movwf	_timers+1	;volatile
   924     02C4                     l1650:
   925                           
   926                           ;display.c: 21:     if (++score.digit > 5) score.digit = 0;
   927     02C4  3001               	movlw	1
   928     02C5  00FF               	movwf	btemp+1
   929     02C6  087F               	movf	btemp+1,w
   930     02C7  07AE               	addwf	_score+4,f
   931     02C8  3006               	movlw	6
   932     02C9  022E               	subwf	_score+4,w
   933     02CA  1C03               	skipc
   934     02CB  2ACD               	goto	u1201
   935     02CC  2ACE               	goto	u1200
   936     02CD                     u1201:
   937     02CD  2ACF               	goto	l1654
   938     02CE                     u1200:
   939     02CE                     l1652:
   940     02CE  01AE               	clrf	_score+4
   941     02CF                     l1654:
   942                           
   943                           ;display.c: 22:     char number = NUMBERS[getNumber()];
   944     02CF  22E2               	fcall	_getNumber
   945     02D0  3E01               	addlw	low ((_NUMBERS-__stringbase)| (0+32768))
   946     02D1  0084               	movwf	4
   947     02D2  23B4               	fcall	stringdir
   948     02D3  1283               	bcf	3,5	;RP0=0, select bank0
   949     02D4  1303               	bcf	3,6	;RP1=0, select bank0
   950     02D5  00BD               	movwf	updateDisplay@number
   951     02D6                     l1656:
   952                           
   953                           ;display.c: 23:     char digit = DIGITS[score.digit];
   954     02D6  082E               	movf	_score+4,w
   955     02D7  3E0B               	addlw	low ((_DIGITS-__stringbase)| (0+32768))
   956     02D8  0084               	movwf	4
   957     02D9  23B4               	fcall	stringdir
   958     02DA  00BE               	movwf	updateDisplay@digit
   959     02DB                     l1658:
   960                           
   961                           ;display.c: 25:     PORTC = (PORTC & 0b10000000) | digit;
   962     02DB  0807               	movf	7,w	;volatile
   963     02DC  3980               	andlw	128
   964     02DD  043E               	iorwf	updateDisplay@digit,w
   965     02DE  0087               	movwf	7	;volatile
   966     02DF                     l1660:
   967                           
   968                           ;display.c: 26:     PORTB = number;
   969     02DF  083D               	movf	updateDisplay@number,w
   970     02E0  0086               	movwf	6	;volatile
   971     02E1                     l181:
   972     02E1  0008               	return
   973     02E2                     __end_of_updateDisplay:
   974                           
   975                           	psect	text2
   976     02E2                     __ptext2:	
   977 ;; *************** function _getNumber *****************
   978 ;; Defined at:
   979 ;;		line 9 in file "display.c"
   980 ;; Parameters:    Size  Location     Type
   981 ;;		None
   982 ;; Auto vars:     Size  Location     Type
   983 ;;		None
   984 ;; Return value:  Size  Location     Type
   985 ;;                  1    wreg      unsigned char 
   986 ;; Registers used:
   987 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   988 ;; Tracked objects:
   989 ;;		On entry : 0/0
   990 ;;		On exit  : 0/0
   991 ;;		Unchanged: 0/0
   992 ;; Data sizes:     COMMON   BANK0   BANK1
   993 ;;      Params:         0       0       0
   994 ;;      Locals:         0       0       0
   995 ;;      Temps:          0       0       0
   996 ;;      Totals:         0       0       0
   997 ;;Total ram usage:        0 bytes
   998 ;; Hardware stack levels used: 1
   999 ;; Hardware stack levels required when called: 3
  1000 ;; This function calls:
  1001 ;;		_calcDigit
  1002 ;; This function is called by:
  1003 ;;		_updateDisplay
  1004 ;; This function uses a non-reentrant model
  1005 ;;
  1006                           
  1007     02E2                     _getNumber:	
  1008                           ;psect for function _getNumber
  1009                           
  1010     02E2                     l1514:	
  1011                           ;incstack = 0
  1012                           ; Regs used in _getNumber: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1013                           
  1014                           
  1015                           ;display.c: 10:     if (score.digit < 2) return calcDigit(score.team1, 0);
  1016     02E2  3002               	movlw	2
  1017     02E3  1283               	bcf	3,5	;RP0=0, select bank0
  1018     02E4  1303               	bcf	3,6	;RP1=0, select bank0
  1019     02E5  022E               	subwf	_score+4,w
  1020     02E6  1803               	skipnc
  1021     02E7  2AE9               	goto	u1041
  1022     02E8  2AEA               	goto	u1040
  1023     02E9                     u1041:
  1024     02E9  2AEE               	goto	l1520
  1025     02EA                     u1040:
  1026     02EA                     l1516:
  1027     02EA  01FA               	clrf	calcDigit@dozen
  1028     02EB  082A               	movf	_score,w
  1029     02EC  2285               	fcall	_calcDigit
  1030     02ED  2B0A               	goto	l174
  1031     02EE                     l1520:
  1032                           
  1033                           ;display.c: 11:     if (score.digit < 4) return calcDigit(score.team2, 2);
  1034     02EE  3004               	movlw	4
  1035     02EF  022E               	subwf	_score+4,w
  1036     02F0  1803               	skipnc
  1037     02F1  2AF3               	goto	u1051
  1038     02F2  2AF4               	goto	u1050
  1039     02F3                     u1051:
  1040     02F3  2AF9               	goto	l1526
  1041     02F4                     u1050:
  1042     02F4                     l1522:
  1043     02F4  3002               	movlw	2
  1044     02F5  00FA               	movwf	calcDigit@dozen
  1045     02F6  082B               	movf	_score+1,w
  1046     02F7  2285               	fcall	_calcDigit
  1047     02F8  2B0A               	goto	l174
  1048     02F9                     l1526:
  1049                           
  1050                           ;display.c: 12:     if (score.digit == 4) return score.win1;
  1051     02F9  3004               	movlw	4
  1052     02FA  062E               	xorwf	_score+4,w
  1053     02FB  1D03               	btfss	3,2
  1054     02FC  2AFE               	goto	u1061
  1055     02FD  2AFF               	goto	u1060
  1056     02FE                     u1061:
  1057     02FE  2B01               	goto	l1532
  1058     02FF                     u1060:
  1059     02FF                     l1528:
  1060     02FF  082C               	movf	_score+2,w
  1061     0300  2B0A               	goto	l174
  1062     0301                     l1532:
  1063                           
  1064                           ;display.c: 13:     if (score.digit == 5) return score.win2;
  1065     0301  3005               	movlw	5
  1066     0302  062E               	xorwf	_score+4,w
  1067     0303  1D03               	btfss	3,2
  1068     0304  2B06               	goto	u1071
  1069     0305  2B07               	goto	u1070
  1070     0306                     u1071:
  1071     0306  2B09               	goto	l1538
  1072     0307                     u1070:
  1073     0307                     l1534:
  1074     0307  082D               	movf	_score+3,w
  1075     0308  2B0A               	goto	l174
  1076     0309                     l1538:
  1077                           
  1078                           ;display.c: 14:     return 0;
  1079     0309  3000               	movlw	0
  1080     030A                     l174:
  1081     030A  0008               	return
  1082     030B                     __end_of_getNumber:
  1083                           
  1084                           	psect	text3
  1085     0285                     __ptext3:	
  1086 ;; *************** function _calcDigit *****************
  1087 ;; Defined at:
  1088 ;;		line 3 in file "display.c"
  1089 ;; Parameters:    Size  Location     Type
  1090 ;;  value           1    wreg     char 
  1091 ;;  dozen           1   10[COMMON] unsigned char 
  1092 ;; Auto vars:     Size  Location     Type
  1093 ;;  value           1    5[BANK0 ] char 
  1094 ;;  d               1    6[BANK0 ] unsigned char 
  1095 ;;  u               1    4[BANK0 ] unsigned char 
  1096 ;; Return value:  Size  Location     Type
  1097 ;;                  1    wreg      unsigned char 
  1098 ;; Registers used:
  1099 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1100 ;; Tracked objects:
  1101 ;;		On entry : 0/0
  1102 ;;		On exit  : 0/0
  1103 ;;		Unchanged: 0/0
  1104 ;; Data sizes:     COMMON   BANK0   BANK1
  1105 ;;      Params:         1       0       0
  1106 ;;      Locals:         0       5       0
  1107 ;;      Temps:          0       2       0
  1108 ;;      Totals:         1       7       0
  1109 ;;Total ram usage:        8 bytes
  1110 ;; Hardware stack levels used: 1
  1111 ;; Hardware stack levels required when called: 2
  1112 ;; This function calls:
  1113 ;;		___awdiv
  1114 ;;		___bmul
  1115 ;; This function is called by:
  1116 ;;		_getNumber
  1117 ;; This function uses a non-reentrant model
  1118 ;;
  1119                           
  1120     0285                     _calcDigit:	
  1121                           ;psect for function _calcDigit
  1122                           
  1123                           
  1124                           ;incstack = 0
  1125                           ; Regs used in _calcDigit: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1126                           ;calcDigit@value stored from wreg
  1127     0285  1283               	bcf	3,5	;RP0=0, select bank0
  1128     0286  1303               	bcf	3,6	;RP1=0, select bank0
  1129     0287  00BB               	movwf	calcDigit@value
  1130     0288                     l1432:
  1131                           
  1132                           ;display.c: 4:     char d = (char) value / 10;
  1133     0288  300A               	movlw	10
  1134     0289  00F2               	movwf	___awdiv@divisor
  1135     028A  3000               	movlw	0
  1136     028B  00F3               	movwf	___awdiv@divisor+1
  1137     028C  083B               	movf	calcDigit@value,w
  1138     028D  00B6               	movwf	??_calcDigit
  1139     028E  01B7               	clrf	??_calcDigit+1
  1140     028F  0836               	movf	??_calcDigit,w
  1141     0290  00F4               	movwf	___awdiv@dividend
  1142     0291  0837               	movf	??_calcDigit+1,w
  1143     0292  00F5               	movwf	___awdiv@dividend+1
  1144     0293  2091               	fcall	___awdiv
  1145     0294  0872               	movf	?___awdiv,w
  1146     0295  1283               	bcf	3,5	;RP0=0, select bank0
  1147     0296  1303               	bcf	3,6	;RP1=0, select bank0
  1148     0297  00BC               	movwf	calcDigit@d
  1149                           
  1150                           ;display.c: 5:     char u = (char) value - d * 10;
  1151     0298  30F6               	movlw	246
  1152     0299  00F2               	movwf	___bmul@multiplicand
  1153     029A  083C               	movf	calcDigit@d,w
  1154     029B  23F6               	fcall	___bmul
  1155     029C  1283               	bcf	3,5	;RP0=0, select bank0
  1156     029D  1303               	bcf	3,6	;RP1=0, select bank0
  1157     029E  073B               	addwf	calcDigit@value,w
  1158     029F  00BA               	movwf	calcDigit@u
  1159     02A0                     l1434:
  1160                           
  1161                           ;display.c: 6:     return score.digit == dozen ? d : u;
  1162     02A0  082E               	movf	_score+4,w
  1163     02A1  067A               	xorwf	calcDigit@dozen,w
  1164     02A2  1903               	skipnz
  1165     02A3  2AA5               	goto	u931
  1166     02A4  2AA6               	goto	u930
  1167     02A5                     u931:
  1168     02A5  2AAE               	goto	l1438
  1169     02A6                     u930:
  1170     02A6                     l1436:
  1171     02A6  083A               	movf	calcDigit@u,w
  1172     02A7  00B6               	movwf	??_calcDigit
  1173     02A8  01B7               	clrf	??_calcDigit+1
  1174     02A9  0836               	movf	??_calcDigit,w
  1175     02AA  00B8               	movwf	_calcDigit$382
  1176     02AB  0837               	movf	??_calcDigit+1,w
  1177     02AC  00B9               	movwf	_calcDigit$382+1
  1178     02AD  2AB5               	goto	l169
  1179     02AE                     l1438:
  1180     02AE  083C               	movf	calcDigit@d,w
  1181     02AF  00B6               	movwf	??_calcDigit
  1182     02B0  01B7               	clrf	??_calcDigit+1
  1183     02B1  0836               	movf	??_calcDigit,w
  1184     02B2  00B8               	movwf	_calcDigit$382
  1185     02B3  0837               	movf	??_calcDigit+1,w
  1186     02B4  00B9               	movwf	_calcDigit$382+1
  1187     02B5                     l169:
  1188     02B5  0838               	movf	_calcDigit$382,w
  1189     02B6                     l170:
  1190     02B6  0008               	return
  1191     02B7                     __end_of_calcDigit:
  1192                           
  1193                           	psect	text4
  1194     03F6                     __ptext4:	
  1195 ;; *************** function ___bmul *****************
  1196 ;; Defined at:
  1197 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul8.c"
  1198 ;; Parameters:    Size  Location     Type
  1199 ;;  multiplier      1    wreg     unsigned char 
  1200 ;;  multiplicand    1    2[COMMON] unsigned char 
  1201 ;; Auto vars:     Size  Location     Type
  1202 ;;  multiplier      1    4[COMMON] unsigned char 
  1203 ;;  product         1    3[COMMON] unsigned char 
  1204 ;; Return value:  Size  Location     Type
  1205 ;;                  1    wreg      unsigned char 
  1206 ;; Registers used:
  1207 ;;		wreg, status,2, status,0, btemp+1
  1208 ;; Tracked objects:
  1209 ;;		On entry : 0/0
  1210 ;;		On exit  : 0/0
  1211 ;;		Unchanged: 0/0
  1212 ;; Data sizes:     COMMON   BANK0   BANK1
  1213 ;;      Params:         1       0       0
  1214 ;;      Locals:         2       0       0
  1215 ;;      Temps:          0       0       0
  1216 ;;      Totals:         3       0       0
  1217 ;;Total ram usage:        3 bytes
  1218 ;; Hardware stack levels used: 1
  1219 ;; Hardware stack levels required when called: 1
  1220 ;; This function calls:
  1221 ;;		Nothing
  1222 ;; This function is called by:
  1223 ;;		_calcDigit
  1224 ;; This function uses a non-reentrant model
  1225 ;;
  1226                           
  1227     03F6                     ___bmul:	
  1228                           ;psect for function ___bmul
  1229                           
  1230                           
  1231                           ;incstack = 0
  1232                           ; Regs used in ___bmul: [wreg+status,2+status,0+btemp+1]
  1233                           ;___bmul@multiplier stored from wreg
  1234     03F6  00F4               	movwf	___bmul@multiplier
  1235     03F7                     l1310:
  1236     03F7  01F3               	clrf	___bmul@product
  1237     03F8                     l1312:
  1238     03F8  1C74               	btfss	___bmul@multiplier,0
  1239     03F9  2BFB               	goto	u721
  1240     03FA  2BFC               	goto	u720
  1241     03FB                     u721:
  1242     03FB  2C00               	goto	l1316
  1243     03FC                     u720:
  1244     03FC                     l1314:
  1245     03FC  0872               	movf	___bmul@multiplicand,w
  1246     03FD  00FF               	movwf	btemp+1
  1247     03FE  087F               	movf	btemp+1,w
  1248     03FF  07F3               	addwf	___bmul@product,f
  1249     0400                     l1316:
  1250     0400  1003               	clrc
  1251     0401  0DF2               	rlf	___bmul@multiplicand,f
  1252     0402                     l1318:
  1253     0402  1003               	clrc
  1254     0403  0CF4               	rrf	___bmul@multiplier,f
  1255     0404                     l1320:
  1256     0404  0874               	movf	___bmul@multiplier,w
  1257     0405  1D03               	btfss	3,2
  1258     0406  2C08               	goto	u731
  1259     0407  2C09               	goto	u730
  1260     0408                     u731:
  1261     0408  2BF8               	goto	l1312
  1262     0409                     u730:
  1263     0409                     l1322:
  1264     0409  0873               	movf	___bmul@product,w
  1265     040A                     l380:
  1266     040A  0008               	return
  1267     040B                     __end_of___bmul:
  1268                           
  1269                           	psect	text5
  1270     0091                     __ptext5:	
  1271 ;; *************** function ___awdiv *****************
  1272 ;; Defined at:
  1273 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awdiv.c"
  1274 ;; Parameters:    Size  Location     Type
  1275 ;;  divisor         2    2[COMMON] int 
  1276 ;;  dividend        2    4[COMMON] int 
  1277 ;; Auto vars:     Size  Location     Type
  1278 ;;  quotient        2    8[COMMON] int 
  1279 ;;  sign            1    7[COMMON] unsigned char 
  1280 ;;  counter         1    6[COMMON] unsigned char 
  1281 ;; Return value:  Size  Location     Type
  1282 ;;                  2    2[COMMON] int 
  1283 ;; Registers used:
  1284 ;;		wreg, status,2, status,0, btemp+1
  1285 ;; Tracked objects:
  1286 ;;		On entry : 0/0
  1287 ;;		On exit  : 0/0
  1288 ;;		Unchanged: 0/0
  1289 ;; Data sizes:     COMMON   BANK0   BANK1
  1290 ;;      Params:         4       0       0
  1291 ;;      Locals:         4       0       0
  1292 ;;      Temps:          0       0       0
  1293 ;;      Totals:         8       0       0
  1294 ;;Total ram usage:        8 bytes
  1295 ;; Hardware stack levels used: 1
  1296 ;; Hardware stack levels required when called: 1
  1297 ;; This function calls:
  1298 ;;		Nothing
  1299 ;; This function is called by:
  1300 ;;		_calcDigit
  1301 ;; This function uses a non-reentrant model
  1302 ;;
  1303                           
  1304     0091                     ___awdiv:	
  1305                           ;psect for function ___awdiv
  1306                           
  1307     0091                     l1326:	
  1308                           ;incstack = 0
  1309                           ; Regs used in ___awdiv: [wreg+status,2+status,0+btemp+1]
  1310                           
  1311     0091  01F7               	clrf	___awdiv@sign
  1312     0092                     l1328:
  1313     0092  1FF3               	btfss	___awdiv@divisor+1,7
  1314     0093  2895               	goto	u741
  1315     0094  2896               	goto	u740
  1316     0095                     u741:
  1317     0095  289D               	goto	l1334
  1318     0096                     u740:
  1319     0096                     l1330:
  1320     0096  09F2               	comf	___awdiv@divisor,f
  1321     0097  09F3               	comf	___awdiv@divisor+1,f
  1322     0098  0AF2               	incf	___awdiv@divisor,f
  1323     0099  1903               	skipnz
  1324     009A  0AF3               	incf	___awdiv@divisor+1,f
  1325     009B                     l1332:
  1326     009B  01F7               	clrf	___awdiv@sign
  1327     009C  0AF7               	incf	___awdiv@sign,f
  1328     009D                     l1334:
  1329     009D  1FF5               	btfss	___awdiv@dividend+1,7
  1330     009E  28A0               	goto	u751
  1331     009F  28A1               	goto	u750
  1332     00A0                     u751:
  1333     00A0  28AA               	goto	l1340
  1334     00A1                     u750:
  1335     00A1                     l1336:
  1336     00A1  09F4               	comf	___awdiv@dividend,f
  1337     00A2  09F5               	comf	___awdiv@dividend+1,f
  1338     00A3  0AF4               	incf	___awdiv@dividend,f
  1339     00A4  1903               	skipnz
  1340     00A5  0AF5               	incf	___awdiv@dividend+1,f
  1341     00A6                     l1338:
  1342     00A6  3001               	movlw	1
  1343     00A7  00FF               	movwf	btemp+1
  1344     00A8  087F               	movf	btemp+1,w
  1345     00A9  06F7               	xorwf	___awdiv@sign,f
  1346     00AA                     l1340:
  1347     00AA  01F8               	clrf	___awdiv@quotient
  1348     00AB  01F9               	clrf	___awdiv@quotient+1
  1349     00AC                     l1342:
  1350     00AC  0872               	movf	___awdiv@divisor,w
  1351     00AD  0473               	iorwf	___awdiv@divisor+1,w
  1352     00AE  1903               	btfsc	3,2
  1353     00AF  28B1               	goto	u761
  1354     00B0  28B2               	goto	u760
  1355     00B1                     u761:
  1356     00B1  28E9               	goto	l1362
  1357     00B2                     u760:
  1358     00B2                     l1344:
  1359     00B2  01F6               	clrf	___awdiv@counter
  1360     00B3  0AF6               	incf	___awdiv@counter,f
  1361     00B4  28C0               	goto	l1350
  1362     00B5                     l1346:
  1363     00B5  3001               	movlw	1
  1364     00B6                     u775:
  1365     00B6  1003               	clrc
  1366     00B7  0DF2               	rlf	___awdiv@divisor,f
  1367     00B8  0DF3               	rlf	___awdiv@divisor+1,f
  1368     00B9  3EFF               	addlw	-1
  1369     00BA  1D03               	skipz
  1370     00BB  28B6               	goto	u775
  1371     00BC                     l1348:
  1372     00BC  3001               	movlw	1
  1373     00BD  00FF               	movwf	btemp+1
  1374     00BE  087F               	movf	btemp+1,w
  1375     00BF  07F6               	addwf	___awdiv@counter,f
  1376     00C0                     l1350:
  1377     00C0  1FF3               	btfss	___awdiv@divisor+1,7
  1378     00C1  28C3               	goto	u781
  1379     00C2  28C4               	goto	u780
  1380     00C3                     u781:
  1381     00C3  28B5               	goto	l1346
  1382     00C4                     u780:
  1383     00C4                     l1352:
  1384     00C4  3001               	movlw	1
  1385     00C5                     u795:
  1386     00C5  1003               	clrc
  1387     00C6  0DF8               	rlf	___awdiv@quotient,f
  1388     00C7  0DF9               	rlf	___awdiv@quotient+1,f
  1389     00C8  3EFF               	addlw	-1
  1390     00C9  1D03               	skipz
  1391     00CA  28C5               	goto	u795
  1392     00CB  0873               	movf	___awdiv@divisor+1,w
  1393     00CC  0275               	subwf	___awdiv@dividend+1,w
  1394     00CD  1D03               	skipz
  1395     00CE  28D1               	goto	u805
  1396     00CF  0872               	movf	___awdiv@divisor,w
  1397     00D0  0274               	subwf	___awdiv@dividend,w
  1398     00D1                     u805:
  1399     00D1  1C03               	skipc
  1400     00D2  28D4               	goto	u801
  1401     00D3  28D5               	goto	u800
  1402     00D4                     u801:
  1403     00D4  28DC               	goto	l1358
  1404     00D5                     u800:
  1405     00D5                     l1354:
  1406     00D5  0872               	movf	___awdiv@divisor,w
  1407     00D6  02F4               	subwf	___awdiv@dividend,f
  1408     00D7  0873               	movf	___awdiv@divisor+1,w
  1409     00D8  1C03               	skipc
  1410     00D9  03F5               	decf	___awdiv@dividend+1,f
  1411     00DA  02F5               	subwf	___awdiv@dividend+1,f
  1412     00DB                     l1356:
  1413     00DB  1478               	bsf	___awdiv@quotient,0
  1414     00DC                     l1358:
  1415     00DC  3001               	movlw	1
  1416     00DD                     u815:
  1417     00DD  1003               	clrc
  1418     00DE  0CF3               	rrf	___awdiv@divisor+1,f
  1419     00DF  0CF2               	rrf	___awdiv@divisor,f
  1420     00E0  3EFF               	addlw	-1
  1421     00E1  1D03               	skipz
  1422     00E2  28DD               	goto	u815
  1423     00E3                     l1360:
  1424     00E3  3001               	movlw	1
  1425     00E4  02F6               	subwf	___awdiv@counter,f
  1426     00E5  1D03               	btfss	3,2
  1427     00E6  28E8               	goto	u821
  1428     00E7  28E9               	goto	u820
  1429     00E8                     u821:
  1430     00E8  28C4               	goto	l1352
  1431     00E9                     u820:
  1432     00E9                     l1362:
  1433     00E9  0877               	movf	___awdiv@sign,w
  1434     00EA  1903               	btfsc	3,2
  1435     00EB  28ED               	goto	u831
  1436     00EC  28EE               	goto	u830
  1437     00ED                     u831:
  1438     00ED  28F3               	goto	l1366
  1439     00EE                     u830:
  1440     00EE                     l1364:
  1441     00EE  09F8               	comf	___awdiv@quotient,f
  1442     00EF  09F9               	comf	___awdiv@quotient+1,f
  1443     00F0  0AF8               	incf	___awdiv@quotient,f
  1444     00F1  1903               	skipnz
  1445     00F2  0AF9               	incf	___awdiv@quotient+1,f
  1446     00F3                     l1366:
  1447     00F3  0879               	movf	___awdiv@quotient+1,w
  1448     00F4  00F3               	movwf	?___awdiv+1
  1449     00F5  0878               	movf	___awdiv@quotient,w
  1450     00F6  00F2               	movwf	?___awdiv
  1451     00F7                     l507:
  1452     00F7  0008               	return
  1453     00F8                     __end_of___awdiv:
  1454                           
  1455                           	psect	text6
  1456     035D                     __ptext6:	
  1457 ;; *************** function _setup *****************
  1458 ;; Defined at:
  1459 ;;		line 3 in file "main.c"
  1460 ;; Parameters:    Size  Location     Type
  1461 ;;		None
  1462 ;; Auto vars:     Size  Location     Type
  1463 ;;		None
  1464 ;; Return value:  Size  Location     Type
  1465 ;;                  1    wreg      void 
  1466 ;; Registers used:
  1467 ;;		wreg, status,2, status,0
  1468 ;; Tracked objects:
  1469 ;;		On entry : 0/0
  1470 ;;		On exit  : 0/0
  1471 ;;		Unchanged: 0/0
  1472 ;; Data sizes:     COMMON   BANK0   BANK1
  1473 ;;      Params:         0       0       0
  1474 ;;      Locals:         0       0       0
  1475 ;;      Temps:          0       0       0
  1476 ;;      Totals:         0       0       0
  1477 ;;Total ram usage:        0 bytes
  1478 ;; Hardware stack levels used: 1
  1479 ;; Hardware stack levels required when called: 1
  1480 ;; This function calls:
  1481 ;;		Nothing
  1482 ;; This function is called by:
  1483 ;;		_main
  1484 ;; This function uses a non-reentrant model
  1485 ;;
  1486                           
  1487     035D                     _setup:	
  1488                           ;psect for function _setup
  1489                           
  1490     035D                     l1542:	
  1491                           ;incstack = 0
  1492                           ; Regs used in _setup: [wreg+status,2+status,0]
  1493                           
  1494                           
  1495                           ;main.c: 4:     TRISA = 0b11111111;
  1496     035D  30FF               	movlw	255
  1497     035E  1683               	bsf	3,5	;RP0=1, select bank1
  1498     035F  1303               	bcf	3,6	;RP1=0, select bank1
  1499     0360  0085               	movwf	5	;volatile
  1500                           
  1501                           ;main.c: 5:     TRISB = 0b00000001;
  1502     0361  3001               	movlw	1
  1503     0362  0086               	movwf	6	;volatile
  1504     0363                     l1544:
  1505                           
  1506                           ;main.c: 6:     TRISC = 0b00000000;
  1507     0363  0187               	clrf	7	;volatile
  1508     0364                     l1546:
  1509                           
  1510                           ;main.c: 7:     PORTB = 0;
  1511     0364  1283               	bcf	3,5	;RP0=0, select bank0
  1512     0365  1303               	bcf	3,6	;RP1=0, select bank0
  1513     0366  0186               	clrf	6	;volatile
  1514     0367                     l1548:
  1515                           
  1516                           ;main.c: 8:     PORTC = 0;
  1517     0367  0187               	clrf	7	;volatile
  1518     0368                     l1550:
  1519                           
  1520                           ;main.c: 10:     T1CON = 0;
  1521     0368  0190               	clrf	16	;volatile
  1522     0369                     l1552:
  1523                           
  1524                           ;main.c: 11:     T1CONbits.TMR1CS = 0;
  1525     0369  1090               	bcf	16,1	;volatile
  1526     036A                     l1554:
  1527                           
  1528                           ;main.c: 12:     T1CONbits.TMR1ON = 1;
  1529     036A  1410               	bsf	16,0	;volatile
  1530     036B                     l1556:
  1531                           
  1532                           ;main.c: 14:     ADCON0 = 0;
  1533     036B  019F               	clrf	31	;volatile
  1534     036C                     l1558:
  1535                           
  1536                           ;main.c: 15:     ADCON1bits.PCFG = 0b0110;
  1537     036C  1683               	bsf	3,5	;RP0=1, select bank1
  1538     036D  1303               	bcf	3,6	;RP1=0, select bank1
  1539     036E  081F               	movf	31,w	;volatile
  1540     036F  39F0               	andlw	-16
  1541     0370  3806               	iorlw	6
  1542     0371  009F               	movwf	31	;volatile
  1543     0372                     l1560:
  1544                           
  1545                           ;main.c: 17:     OPTION_REGbits.nRBPU = 0;
  1546     0372  1381               	bcf	1,7	;volatile
  1547     0373                     l1562:
  1548                           
  1549                           ;main.c: 18:     OPTION_REGbits.INTEDG = 0;
  1550     0373  1301               	bcf	1,6	;volatile
  1551     0374                     l1564:
  1552                           
  1553                           ;main.c: 20:     INTCONbits.INTE = 1;
  1554     0374  160B               	bsf	11,4	;volatile
  1555     0375                     l1566:
  1556                           
  1557                           ;main.c: 21:     PIE1bits.TMR1IE = 1;
  1558     0375  140C               	bsf	12,0	;volatile
  1559     0376                     l1568:
  1560                           
  1561                           ;main.c: 22:     PEIE = 1;
  1562     0376  170B               	bsf	11,6	;volatile
  1563     0377                     l1570:
  1564                           
  1565                           ;main.c: 23:     GIE = 1;
  1566     0377  178B               	bsf	11,7	;volatile
  1567     0378                     l1572:
  1568                           
  1569                           ;main.c: 25:     rxClocks = 0;
  1570     0378  1283               	bcf	3,5	;RP0=0, select bank0
  1571     0379  1303               	bcf	3,6	;RP1=0, select bank0
  1572     037A  01B3               	clrf	_rxClocks	;volatile
  1573     037B  01B4               	clrf	_rxClocks+1	;volatile
  1574     037C                     l61:
  1575     037C  0008               	return
  1576     037D                     __end_of_setup:
  1577                           
  1578                           	psect	text7
  1579     015C                     __ptext7:	
  1580 ;; *************** function _loadMemory *****************
  1581 ;; Defined at:
  1582 ;;		line 16 in file "memory.c"
  1583 ;; Parameters:    Size  Location     Type
  1584 ;;		None
  1585 ;; Auto vars:     Size  Location     Type
  1586 ;;		None
  1587 ;; Return value:  Size  Location     Type
  1588 ;;                  1    wreg      void 
  1589 ;; Registers used:
  1590 ;;		wreg, status,2, status,0, btemp+1
  1591 ;; Tracked objects:
  1592 ;;		On entry : 0/0
  1593 ;;		On exit  : 0/0
  1594 ;;		Unchanged: 0/0
  1595 ;; Data sizes:     COMMON   BANK0   BANK1
  1596 ;;      Params:         0       0       0
  1597 ;;      Locals:         0       0       0
  1598 ;;      Temps:          0       0       0
  1599 ;;      Totals:         0       0       0
  1600 ;;Total ram usage:        0 bytes
  1601 ;; Hardware stack levels used: 1
  1602 ;; Hardware stack levels required when called: 1
  1603 ;; This function calls:
  1604 ;;		Nothing
  1605 ;; This function is called by:
  1606 ;;		_main
  1607 ;; This function uses a non-reentrant model
  1608 ;;
  1609                           
  1610     015C                     _loadMemory:	
  1611                           ;psect for function _loadMemory
  1612                           
  1613     015C                     l1574:	
  1614                           ;incstack = 0
  1615                           ; Regs used in _loadMemory: [wreg+status,2+status,0+btemp+1]
  1616                           
  1617                           
  1618                           ;memory.c: 17:     score.team1 = (signed char) ( EEADR = 0x00, EECON1 &= 0x3F, EECON1bit
      +                          s.RD = 1, EEDATA);
  1619     015C  1283               	bcf	3,5	;RP0=0, select bank2
  1620     015D  1703               	bsf	3,6	;RP1=1, select bank2
  1621     015E  018D               	clrf	13	;volatile
  1622     015F                     l1576:
  1623     015F  303F               	movlw	63
  1624     0160  00FF               	movwf	btemp+1
  1625     0161  087F               	movf	btemp+1,w
  1626     0162  1683               	bsf	3,5	;RP0=1, select bank3
  1627     0163  1703               	bsf	3,6	;RP1=1, select bank3
  1628     0164  058C               	andwf	12,f	;volsfr
  1629     0165                     l1578:
  1630     0165  140C               	bsf	12,0	;volsfr
  1631     0166                     l1580:
  1632     0166  1283               	bcf	3,5	;RP0=0, select bank2
  1633     0167  1703               	bsf	3,6	;RP1=1, select bank2
  1634     0168  080C               	movf	12,w	;volatile
  1635     0169  1283               	bcf	3,5	;RP0=0, select bank0
  1636     016A  1303               	bcf	3,6	;RP1=0, select bank0
  1637     016B  00AA               	movwf	_score
  1638     016C                     l1582:
  1639                           
  1640                           ;memory.c: 18:     score.team2 = (signed char) ( EEADR = 0x01, EECON1 &= 0x3F, EECON1bit
      +                          s.RD = 1, EEDATA);
  1641     016C  3001               	movlw	1
  1642     016D  1283               	bcf	3,5	;RP0=0, select bank2
  1643     016E  1703               	bsf	3,6	;RP1=1, select bank2
  1644     016F  008D               	movwf	13	;volatile
  1645     0170                     l1584:
  1646     0170  303F               	movlw	63
  1647     0171  00FF               	movwf	btemp+1
  1648     0172  087F               	movf	btemp+1,w
  1649     0173  1683               	bsf	3,5	;RP0=1, select bank3
  1650     0174  1703               	bsf	3,6	;RP1=1, select bank3
  1651     0175  058C               	andwf	12,f	;volsfr
  1652     0176                     l1586:
  1653     0176  140C               	bsf	12,0	;volsfr
  1654     0177                     l1588:
  1655     0177  1283               	bcf	3,5	;RP0=0, select bank2
  1656     0178  1703               	bsf	3,6	;RP1=1, select bank2
  1657     0179  080C               	movf	12,w	;volatile
  1658     017A  1283               	bcf	3,5	;RP0=0, select bank0
  1659     017B  1303               	bcf	3,6	;RP1=0, select bank0
  1660     017C  00AB               	movwf	_score+1
  1661     017D                     l1590:
  1662                           
  1663                           ;memory.c: 19:     score.win1 = ( EEADR = 0x02, EECON1 &= 0x3F, EECON1bits.RD = 1, EEDAT
      +                          A);
  1664     017D  3002               	movlw	2
  1665     017E  1283               	bcf	3,5	;RP0=0, select bank2
  1666     017F  1703               	bsf	3,6	;RP1=1, select bank2
  1667     0180  008D               	movwf	13	;volatile
  1668     0181                     l1592:
  1669     0181  303F               	movlw	63
  1670     0182  00FF               	movwf	btemp+1
  1671     0183  087F               	movf	btemp+1,w
  1672     0184  1683               	bsf	3,5	;RP0=1, select bank3
  1673     0185  1703               	bsf	3,6	;RP1=1, select bank3
  1674     0186  058C               	andwf	12,f	;volsfr
  1675     0187                     l1594:
  1676     0187  140C               	bsf	12,0	;volsfr
  1677     0188                     l1596:
  1678     0188  1283               	bcf	3,5	;RP0=0, select bank2
  1679     0189  1703               	bsf	3,6	;RP1=1, select bank2
  1680     018A  080C               	movf	12,w	;volatile
  1681     018B  1283               	bcf	3,5	;RP0=0, select bank0
  1682     018C  1303               	bcf	3,6	;RP1=0, select bank0
  1683     018D  00AC               	movwf	_score+2
  1684     018E                     l1598:
  1685                           
  1686                           ;memory.c: 20:     score.win2 = ( EEADR = 0x03, EECON1 &= 0x3F, EECON1bits.RD = 1, EEDAT
      +                          A);
  1687     018E  3003               	movlw	3
  1688     018F  1283               	bcf	3,5	;RP0=0, select bank2
  1689     0190  1703               	bsf	3,6	;RP1=1, select bank2
  1690     0191  008D               	movwf	13	;volatile
  1691     0192                     l1600:
  1692     0192  303F               	movlw	63
  1693     0193  00FF               	movwf	btemp+1
  1694     0194  087F               	movf	btemp+1,w
  1695     0195  1683               	bsf	3,5	;RP0=1, select bank3
  1696     0196  1703               	bsf	3,6	;RP1=1, select bank3
  1697     0197  058C               	andwf	12,f	;volsfr
  1698     0198                     l1602:
  1699     0198  140C               	bsf	12,0	;volsfr
  1700     0199                     l1604:
  1701     0199  1283               	bcf	3,5	;RP0=0, select bank2
  1702     019A  1703               	bsf	3,6	;RP1=1, select bank2
  1703     019B  080C               	movf	12,w	;volatile
  1704     019C  1283               	bcf	3,5	;RP0=0, select bank0
  1705     019D  1303               	bcf	3,6	;RP1=0, select bank0
  1706     019E  00AD               	movwf	_score+3
  1707     019F                     l1606:
  1708                           
  1709                           ;memory.c: 22:     if (score.team1 == -1)score.team1 = 0;
  1710     019F  0A2A               	incf	_score,w
  1711     01A0  1D03               	btfss	3,2
  1712     01A1  29A3               	goto	u1081
  1713     01A2  29A4               	goto	u1080
  1714     01A3                     u1081:
  1715     01A3  29A5               	goto	l1610
  1716     01A4                     u1080:
  1717     01A4                     l1608:
  1718     01A4  01AA               	clrf	_score
  1719     01A5                     l1610:
  1720                           
  1721                           ;memory.c: 23:     if (score.team2 == -1)score.team1 = 0;
  1722     01A5  0A2B               	incf	_score+1,w
  1723     01A6  1D03               	btfss	3,2
  1724     01A7  29A9               	goto	u1091
  1725     01A8  29AA               	goto	u1090
  1726     01A9                     u1091:
  1727     01A9  29AB               	goto	l1614
  1728     01AA                     u1090:
  1729     01AA                     l1612:
  1730     01AA  01AA               	clrf	_score
  1731     01AB                     l1614:
  1732                           
  1733                           ;memory.c: 24:     if (score.win1 == 0xff)score.win1 = 0;
  1734     01AB  0A2C               	incf	_score+2,w
  1735     01AC  1D03               	btfss	3,2
  1736     01AD  29AF               	goto	u1101
  1737     01AE  29B0               	goto	u1100
  1738     01AF                     u1101:
  1739     01AF  29B1               	goto	l1618
  1740     01B0                     u1100:
  1741     01B0                     l1616:
  1742     01B0  01AC               	clrf	_score+2
  1743     01B1                     l1618:
  1744                           
  1745                           ;memory.c: 25:     if (score.win2 == 0xff)score.win2 = 0;
  1746     01B1  0A2D               	incf	_score+3,w
  1747     01B2  1D03               	btfss	3,2
  1748     01B3  29B5               	goto	u1111
  1749     01B4  29B6               	goto	u1110
  1750     01B5                     u1111:
  1751     01B5  29B7               	goto	l268
  1752     01B6                     u1110:
  1753     01B6                     l1620:
  1754     01B6  01AD               	clrf	_score+3
  1755     01B7                     l268:
  1756     01B7  0008               	return
  1757     01B8                     __end_of_loadMemory:
  1758                           
  1759                           	psect	text8
  1760     00F8                     __ptext8:	
  1761 ;; *************** function _checkButtons *****************
  1762 ;; Defined at:
  1763 ;;		line 80 in file "buttons.c"
  1764 ;; Parameters:    Size  Location     Type
  1765 ;;		None
  1766 ;; Auto vars:     Size  Location     Type
  1767 ;;		None
  1768 ;; Return value:  Size  Location     Type
  1769 ;;                  1    wreg      void 
  1770 ;; Registers used:
  1771 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1772 ;; Tracked objects:
  1773 ;;		On entry : 0/0
  1774 ;;		On exit  : 0/0
  1775 ;;		Unchanged: 0/0
  1776 ;; Data sizes:     COMMON   BANK0   BANK1
  1777 ;;      Params:         0       0       0
  1778 ;;      Locals:         1       0       0
  1779 ;;      Temps:          1       0       0
  1780 ;;      Totals:         2       0       0
  1781 ;;Total ram usage:        2 bytes
  1782 ;; Hardware stack levels used: 1
  1783 ;; Hardware stack levels required when called: 5
  1784 ;; This function calls:
  1785 ;;		_onClick
  1786 ;;		_onPressed
  1787 ;; This function is called by:
  1788 ;;		_main
  1789 ;; This function uses a non-reentrant model
  1790 ;;
  1791                           
  1792     00F8                     _checkButtons:	
  1793                           ;psect for function _checkButtons
  1794                           
  1795     00F8                     l1622:	
  1796                           ;incstack = 0
  1797                           ; Regs used in _checkButtons: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1798                           
  1799                           
  1800                           ;buttons.c: 81:     button.status = onClick(PORTAbits.RA0, up1)
  1801     00F8  01FB               	clrf	_checkButtons$357
  1802     00F9  0AFB               	incf	_checkButtons$357,f
  1803     00FA                     l1624:
  1804     00FA  3003               	movlw	(low (fp__up1-fpbase))& (0+255)
  1805     00FB  00F6               	movwf	onClick@action
  1806     00FC  1283               	bcf	3,5	;RP0=0, select bank0
  1807     00FD  1303               	bcf	3,6	;RP1=0, select bank0
  1808     00FE  0805               	movf	5,w	;volatile
  1809     00FF  3901               	andlw	1
  1810     0100  230B               	fcall	_onClick
  1811     0101  3A00               	xorlw	0
  1812     0102  1D03               	skipz
  1813     0103  2905               	goto	u1121
  1814     0104  2906               	goto	u1120
  1815     0105                     u1121:
  1816     0105  2950               	goto	l1638
  1817     0106                     u1120:
  1818     0106                     l1626:
  1819     0106  3002               	movlw	(low (fp__up2-fpbase))& (0+255)
  1820     0107  00F6               	movwf	onClick@action
  1821     0108  1283               	bcf	3,5	;RP0=0, select bank0
  1822     0109  1303               	bcf	3,6	;RP1=0, select bank0
  1823     010A  0C05               	rrf	5,w	;volatile
  1824     010B  00FA               	movwf	??_checkButtons
  1825     010C  0C7A               	rrf	??_checkButtons,w
  1826     010D  3901               	andlw	1
  1827     010E  230B               	fcall	_onClick
  1828     010F  3A00               	xorlw	0
  1829     0110  1D03               	skipz
  1830     0111  2913               	goto	u1131
  1831     0112  2914               	goto	u1130
  1832     0113                     u1131:
  1833     0113  2950               	goto	l1638
  1834     0114                     u1130:
  1835     0114                     l1628:
  1836     0114  3004               	movlw	(low (fp__down1-fpbase))& (0+255)
  1837     0115  00F6               	movwf	onClick@action
  1838     0116  1283               	bcf	3,5	;RP0=0, select bank0
  1839     0117  1303               	bcf	3,6	;RP1=0, select bank0
  1840     0118  0C05               	rrf	5,w	;volatile
  1841     0119  3901               	andlw	1
  1842     011A  230B               	fcall	_onClick
  1843     011B  3A00               	xorlw	0
  1844     011C  1D03               	skipz
  1845     011D  291F               	goto	u1141
  1846     011E  2920               	goto	u1140
  1847     011F                     u1141:
  1848     011F  2950               	goto	l1638
  1849     0120                     u1140:
  1850     0120                     l1630:
  1851     0120  3005               	movlw	(low (fp__down2-fpbase))& (0+255)
  1852     0121  00F6               	movwf	onClick@action
  1853     0122  1283               	bcf	3,5	;RP0=0, select bank0
  1854     0123  1303               	bcf	3,6	;RP1=0, select bank0
  1855     0124  0C05               	rrf	5,w	;volatile
  1856     0125  00FA               	movwf	??_checkButtons
  1857     0126  0CFA               	rrf	??_checkButtons,f
  1858     0127  0C7A               	rrf	??_checkButtons,w
  1859     0128  3901               	andlw	1
  1860     0129  230B               	fcall	_onClick
  1861     012A  3A00               	xorlw	0
  1862     012B  1D03               	skipz
  1863     012C  292E               	goto	u1151
  1864     012D  292F               	goto	u1150
  1865     012E                     u1151:
  1866     012E  2950               	goto	l1638
  1867     012F                     u1150:
  1868     012F                     l1632:
  1869     012F  3006               	movlw	(low (fp__change-fpbase))& (0+255)
  1870     0130  00F5               	movwf	onPressed@action
  1871     0131  30B8               	movlw	184
  1872     0132  00F6               	movwf	onPressed@pressTime
  1873     0133  300B               	movlw	11
  1874     0134  00F7               	movwf	onPressed@pressTime+1
  1875     0135  3007               	movlw	(low (fp__clear-fpbase))& (0+255)
  1876     0136  00F8               	movwf	onPressed@pressAction
  1877     0137  1283               	bcf	3,5	;RP0=0, select bank0
  1878     0138  1303               	bcf	3,6	;RP1=0, select bank0
  1879     0139  0E05               	swapf	5,w	;volatile
  1880     013A  3901               	andlw	1
  1881     013B  2246               	fcall	_onPressed
  1882     013C  3A00               	xorlw	0
  1883     013D  1D03               	skipz
  1884     013E  2940               	goto	u1161
  1885     013F  2941               	goto	u1160
  1886     0140                     u1161:
  1887     0140  2950               	goto	l1638
  1888     0141                     u1160:
  1889     0141                     l1634:
  1890     0141  3001               	movlw	(low (fp__win-fpbase))& (0+255)
  1891     0142  00F6               	movwf	onClick@action
  1892     0143  1283               	bcf	3,5	;RP0=0, select bank0
  1893     0144  1303               	bcf	3,6	;RP1=0, select bank0
  1894     0145  0E05               	swapf	5,w	;volatile
  1895     0146  00FA               	movwf	??_checkButtons
  1896     0147  0C7A               	rrf	??_checkButtons,w
  1897     0148  3901               	andlw	1
  1898     0149  230B               	fcall	_onClick
  1899     014A  3A00               	xorlw	0
  1900     014B  1D03               	skipz
  1901     014C  294E               	goto	u1171
  1902     014D  294F               	goto	u1170
  1903     014E                     u1171:
  1904     014E  2950               	goto	l1638
  1905     014F                     u1170:
  1906     014F                     l1636:
  1907     014F  01FB               	clrf	_checkButtons$357
  1908     0150                     l1638:
  1909     0150  087B               	movf	_checkButtons$357,w
  1910     0151  1283               	bcf	3,5	;RP0=0, select bank0
  1911     0152  1303               	bcf	3,6	;RP1=0, select bank0
  1912     0153  00AF               	movwf	_button	;volatile
  1913     0154                     l1640:
  1914                           
  1915                           ;buttons.c: 88:     if (button.status == 0)
  1916     0154  082F               	movf	_button,w	;volatile
  1917     0155  1D03               	btfss	3,2
  1918     0156  2958               	goto	u1181
  1919     0157  2959               	goto	u1180
  1920     0158                     u1181:
  1921     0158  295B               	goto	l145
  1922     0159                     u1180:
  1923     0159                     l1642:
  1924                           
  1925                           ;buttons.c: 89:         button.pressTime = 0;
  1926     0159  01B1               	clrf	_button+2	;volatile
  1927     015A  01B2               	clrf	_button+3	;volatile
  1928     015B                     l145:
  1929     015B  0008               	return
  1930     015C                     __end_of_checkButtons:
  1931                           
  1932                           	psect	text9
  1933     0246                     __ptext9:	
  1934 ;; *************** function _onPressed *****************
  1935 ;; Defined at:
  1936 ;;		line 16 in file "buttons.c"
  1937 ;; Parameters:    Size  Location     Type
  1938 ;;  btn             1    wreg     unsigned char 
  1939 ;;  action          1    5[COMMON] PTR FTN()void 
  1940 ;;		 -> change(1), 
  1941 ;;  pressTime       2    6[COMMON] unsigned int 
  1942 ;;  pressAction     1    8[COMMON] PTR FTN()void 
  1943 ;;		 -> clear(1), 
  1944 ;; Auto vars:     Size  Location     Type
  1945 ;;  btn             1    9[COMMON] unsigned char 
  1946 ;; Return value:  Size  Location     Type
  1947 ;;                  1    wreg      unsigned char 
  1948 ;; Registers used:
  1949 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1950 ;; Tracked objects:
  1951 ;;		On entry : 0/0
  1952 ;;		On exit  : 0/0
  1953 ;;		Unchanged: 0/0
  1954 ;; Data sizes:     COMMON   BANK0   BANK1
  1955 ;;      Params:         4       0       0
  1956 ;;      Locals:         1       0       0
  1957 ;;      Temps:          0       0       0
  1958 ;;      Totals:         5       0       0
  1959 ;;Total ram usage:        5 bytes
  1960 ;; Hardware stack levels used: 1
  1961 ;; Hardware stack levels required when called: 4
  1962 ;; This function calls:
  1963 ;;		_change
  1964 ;;		_clear
  1965 ;; This function is called by:
  1966 ;;		_checkButtons
  1967 ;; This function uses a non-reentrant model
  1968 ;;
  1969                           
  1970     0246                     _onPressed:	
  1971                           ;psect for function _onPressed
  1972                           
  1973                           
  1974                           ;incstack = 0
  1975                           ; Regs used in _onPressed: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1976                           ;onPressed@btn stored from wreg
  1977     0246  00F9               	movwf	onPressed@btn
  1978     0247                     l1474:
  1979                           
  1980                           ;buttons.c: 17:     if (!!(btn || btn)) return 0;
  1981     0247  0879               	movf	onPressed@btn,w
  1982     0248  1D03               	btfss	3,2
  1983     0249  2A4B               	goto	u981
  1984     024A  2A4C               	goto	u980
  1985     024B                     u981:
  1986     024B  2A51               	goto	l1478
  1987     024C                     u980:
  1988     024C                     l1476:
  1989     024C  0879               	movf	onPressed@btn,w
  1990     024D  1903               	btfsc	3,2
  1991     024E  2A50               	goto	u991
  1992     024F  2A51               	goto	u990
  1993     0250                     u991:
  1994     0250  2A53               	goto	l1482
  1995     0251                     u990:
  1996     0251                     l1478:
  1997     0251  3000               	movlw	0
  1998     0252  2A84               	goto	l105
  1999     0253                     l1482:
  2000                           
  2001                           ;buttons.c: 18:     button.btn = btn;
  2002     0253  0879               	movf	onPressed@btn,w
  2003     0254  1283               	bcf	3,5	;RP0=0, select bank0
  2004     0255  1303               	bcf	3,6	;RP1=0, select bank0
  2005     0256  00B0               	movwf	_button+1	;volatile
  2006     0257                     l1484:
  2007                           
  2008                           ;buttons.c: 19:     if (button.status == 1) {
  2009     0257  032F               	decf	_button,w	;volatile
  2010     0258  1D03               	btfss	3,2
  2011     0259  2A5B               	goto	u1001
  2012     025A  2A5C               	goto	u1000
  2013     025B                     u1001:
  2014     025B  2A7A               	goto	l1500
  2015     025C                     u1000:
  2016     025C                     l1486:
  2017                           
  2018                           ;buttons.c: 20:         if (pressTime != 0 && button.pressTime > pressTime) {
  2019     025C  0876               	movf	onPressed@pressTime,w
  2020     025D  0477               	iorwf	onPressed@pressTime+1,w
  2021     025E  1903               	btfsc	3,2
  2022     025F  2A61               	goto	u1011
  2023     0260  2A62               	goto	u1010
  2024     0261                     u1011:
  2025     0261  2A72               	goto	l1494
  2026     0262                     u1010:
  2027     0262                     l1488:
  2028     0262  0832               	movf	_button+3,w	;volatile
  2029     0263  0277               	subwf	onPressed@pressTime+1,w
  2030     0264  1D03               	skipz
  2031     0265  2A68               	goto	u1025
  2032     0266  0831               	movf	_button+2,w	;volatile
  2033     0267  0276               	subwf	onPressed@pressTime,w
  2034     0268                     u1025:
  2035     0268  1803               	skipnc
  2036     0269  2A6B               	goto	u1021
  2037     026A  2A6C               	goto	u1020
  2038     026B                     u1021:
  2039     026B  2A72               	goto	l1494
  2040     026C                     u1020:
  2041     026C                     l1490:
  2042                           
  2043                           ;buttons.c: 21:             pressAction();
  2044     026C  0878               	movf	onPressed@pressAction,w
  2045     026D  2012               	fcall	fptable
  2046     026E                     l1492:
  2047                           
  2048                           ;buttons.c: 22:             button.pressTime = 0;
  2049     026E  1283               	bcf	3,5	;RP0=0, select bank0
  2050     026F  1303               	bcf	3,6	;RP1=0, select bank0
  2051     0270  01B1               	clrf	_button+2	;volatile
  2052     0271  01B2               	clrf	_button+3	;volatile
  2053     0272                     l1494:
  2054                           
  2055                           ;buttons.c: 24:         timers[1] = 100;
  2056     0272  3000               	movlw	0
  2057     0273  1283               	bcf	3,5	;RP0=0, select bank0
  2058     0274  1303               	bcf	3,6	;RP1=0, select bank0
  2059     0275  00A3               	movwf	_timers+3	;volatile
  2060     0276  3064               	movlw	100
  2061     0277  00A2               	movwf	_timers+2	;volatile
  2062     0278                     l1496:
  2063                           
  2064                           ;buttons.c: 25:         return 1;
  2065     0278  3001               	movlw	1
  2066     0279  2A84               	goto	l105
  2067     027A                     l1500:
  2068                           
  2069                           ;buttons.c: 27:     if (timers[1]) return 1;
  2070     027A  0822               	movf	_timers+2,w	;volatile
  2071     027B  0423               	iorwf	_timers+3,w	;volatile
  2072     027C  1903               	btfsc	3,2
  2073     027D  2A7F               	goto	u1031
  2074     027E  2A80               	goto	u1030
  2075     027F                     u1031:
  2076     027F  2A81               	goto	l1506
  2077     0280                     u1030:
  2078     0280  2A78               	goto	l1496
  2079     0281                     l1506:
  2080                           
  2081                           ;buttons.c: 28:     action();
  2082     0281  0875               	movf	onPressed@action,w
  2083     0282  2012               	fcall	fptable
  2084     0283  2A72               	goto	l1494
  2085     0284                     l105:
  2086     0284  0008               	return
  2087     0285                     __end_of_onPressed:
  2088                           
  2089                           	psect	text10
  2090     0437                     __ptext10:	
  2091 ;; *************** function _clear *****************
  2092 ;; Defined at:
  2093 ;;		line 66 in file "buttons.c"
  2094 ;; Parameters:    Size  Location     Type
  2095 ;;		None
  2096 ;; Auto vars:     Size  Location     Type
  2097 ;;		None
  2098 ;; Return value:  Size  Location     Type
  2099 ;;                  1    wreg      void 
  2100 ;; Registers used:
  2101 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2102 ;; Tracked objects:
  2103 ;;		On entry : 0/0
  2104 ;;		On exit  : 0/0
  2105 ;;		Unchanged: 0/0
  2106 ;; Data sizes:     COMMON   BANK0   BANK1
  2107 ;;      Params:         0       0       0
  2108 ;;      Locals:         0       0       0
  2109 ;;      Temps:          0       0       0
  2110 ;;      Totals:         0       0       0
  2111 ;;Total ram usage:        0 bytes
  2112 ;; Hardware stack levels used: 1
  2113 ;; Hardware stack levels required when called: 3
  2114 ;; This function calls:
  2115 ;;		_saveMemory
  2116 ;; This function is called by:
  2117 ;;		_checkButtons
  2118 ;;		_onPressed
  2119 ;; This function uses a non-reentrant model
  2120 ;;
  2121                           
  2122     0437                     _clear:	
  2123                           ;psect for function _clear
  2124                           
  2125     0437                     l1412:	
  2126                           ;incstack = 0
  2127                           ; Regs used in _clear: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2128                           
  2129                           
  2130                           ;buttons.c: 67:     score.win1 = score.win2 = 0;
  2131     0437  1283               	bcf	3,5	;RP0=0, select bank0
  2132     0438  1303               	bcf	3,6	;RP1=0, select bank0
  2133     0439  01AD               	clrf	_score+3
  2134     043A  01AC               	clrf	_score+2
  2135                           
  2136                           ;buttons.c: 68:     score.team1 = score.team2 = 0;
  2137     043B  01AB               	clrf	_score+1
  2138     043C  01AA               	clrf	_score
  2139     043D                     l1414:
  2140                           
  2141                           ;buttons.c: 69:     saveMemory();
  2142     043D  239B               	fcall	_saveMemory
  2143     043E                     l133:
  2144     043E  0008               	return
  2145     043F                     __end_of_clear:
  2146                           
  2147                           	psect	text11
  2148     037D                     __ptext11:	
  2149 ;; *************** function _change *****************
  2150 ;; Defined at:
  2151 ;;		line 57 in file "buttons.c"
  2152 ;; Parameters:    Size  Location     Type
  2153 ;;		None
  2154 ;; Auto vars:     Size  Location     Type
  2155 ;;  aux             1    2[COMMON] unsigned char 
  2156 ;; Return value:  Size  Location     Type
  2157 ;;                  1    wreg      void 
  2158 ;; Registers used:
  2159 ;;		wreg
  2160 ;; Tracked objects:
  2161 ;;		On entry : 0/0
  2162 ;;		On exit  : 0/0
  2163 ;;		Unchanged: 0/0
  2164 ;; Data sizes:     COMMON   BANK0   BANK1
  2165 ;;      Params:         0       0       0
  2166 ;;      Locals:         1       0       0
  2167 ;;      Temps:          0       0       0
  2168 ;;      Totals:         1       0       0
  2169 ;;Total ram usage:        1 bytes
  2170 ;; Hardware stack levels used: 1
  2171 ;; Hardware stack levels required when called: 1
  2172 ;; This function calls:
  2173 ;;		Nothing
  2174 ;; This function is called by:
  2175 ;;		_checkButtons
  2176 ;;		_onPressed
  2177 ;; This function uses a non-reentrant model
  2178 ;;
  2179                           
  2180     037D                     _change:	
  2181                           ;psect for function _change
  2182                           
  2183     037D                     l1402:	
  2184                           ;incstack = 0
  2185                           ; Regs used in _change: [wreg]
  2186                           
  2187                           
  2188                           ;buttons.c: 58:     if (score.team1 > 0 || score.team2 > 0) return;
  2189     037D  1283               	bcf	3,5	;RP0=0, select bank0
  2190     037E  1303               	bcf	3,6	;RP1=0, select bank0
  2191     037F  082A               	movf	_score,w
  2192     0380  3A80               	xorlw	128
  2193     0381  3E7F               	addlw	-129
  2194     0382  1803               	skipnc
  2195     0383  2B85               	goto	u881
  2196     0384  2B86               	goto	u880
  2197     0385                     u881:
  2198     0385  2B9A               	goto	l130
  2199     0386                     u880:
  2200     0386                     l1404:
  2201     0386  082B               	movf	_score+1,w
  2202     0387  3A80               	xorlw	128
  2203     0388  3E7F               	addlw	-129
  2204     0389  1C03               	skipc
  2205     038A  2B8C               	goto	u891
  2206     038B  2B8D               	goto	u890
  2207     038C                     u891:
  2208     038C  2B8E               	goto	l1406
  2209     038D                     u890:
  2210     038D  2B9A               	goto	l130
  2211     038E                     l1406:
  2212                           
  2213                           ;buttons.c: 59:     char aux = score.win1;
  2214     038E  082C               	movf	_score+2,w
  2215     038F  00F2               	movwf	change@aux
  2216                           
  2217                           ;buttons.c: 60:     score.win1 = score.win2;
  2218     0390  082D               	movf	_score+3,w
  2219     0391  00AC               	movwf	_score+2
  2220                           
  2221                           ;buttons.c: 61:     score.win2 = aux;
  2222     0392  0872               	movf	change@aux,w
  2223     0393  00AD               	movwf	_score+3
  2224     0394                     l1408:
  2225                           
  2226                           ;buttons.c: 62:     isSaveMemory = 1;
  2227     0394  01B5               	clrf	_isSaveMemory
  2228     0395  0AB5               	incf	_isSaveMemory,f
  2229     0396                     l1410:
  2230                           
  2231                           ;buttons.c: 63:     timers[4] = 5000;
  2232     0396  3013               	movlw	19
  2233     0397  00A9               	movwf	_timers+9	;volatile
  2234     0398  3088               	movlw	136
  2235     0399  00A8               	movwf	_timers+8	;volatile
  2236     039A                     l130:
  2237     039A  0008               	return
  2238     039B                     __end_of_change:
  2239                           
  2240                           	psect	text12
  2241     030B                     __ptext12:	
  2242 ;; *************** function _onClick *****************
  2243 ;; Defined at:
  2244 ;;		line 3 in file "buttons.c"
  2245 ;; Parameters:    Size  Location     Type
  2246 ;;  btn             1    wreg     unsigned char 
  2247 ;;  action          1    6[COMMON] PTR FTN()void 
  2248 ;;		 -> win(1), down2(1), down1(1), up1(1), 
  2249 ;;		 -> up2(1), 
  2250 ;; Auto vars:     Size  Location     Type
  2251 ;;  btn             1    7[COMMON] unsigned char 
  2252 ;; Return value:  Size  Location     Type
  2253 ;;                  1    wreg      unsigned char 
  2254 ;; Registers used:
  2255 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2256 ;; Tracked objects:
  2257 ;;		On entry : 0/0
  2258 ;;		On exit  : 0/0
  2259 ;;		Unchanged: 0/0
  2260 ;; Data sizes:     COMMON   BANK0   BANK1
  2261 ;;      Params:         1       0       0
  2262 ;;      Locals:         1       0       0
  2263 ;;      Temps:          0       0       0
  2264 ;;      Totals:         2       0       0
  2265 ;;Total ram usage:        2 bytes
  2266 ;; Hardware stack levels used: 1
  2267 ;; Hardware stack levels required when called: 4
  2268 ;; This function calls:
  2269 ;;		_down1
  2270 ;;		_down2
  2271 ;;		_up1
  2272 ;;		_up2
  2273 ;;		_win
  2274 ;; This function is called by:
  2275 ;;		_checkButtons
  2276 ;; This function uses a non-reentrant model
  2277 ;;
  2278                           
  2279     030B                     _onClick:	
  2280                           ;psect for function _onClick
  2281                           
  2282                           
  2283                           ;incstack = 0
  2284                           ; Regs used in _onClick: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2285                           ;onClick@btn stored from wreg
  2286     030B  00F7               	movwf	onClick@btn
  2287     030C                     l1442:
  2288                           
  2289                           ;buttons.c: 4:     if (!!(btn || btn)) return 0;
  2290     030C  0877               	movf	onClick@btn,w
  2291     030D  1D03               	btfss	3,2
  2292     030E  2B10               	goto	u941
  2293     030F  2B11               	goto	u940
  2294     0310                     u941:
  2295     0310  2B16               	goto	l1446
  2296     0311                     u940:
  2297     0311                     l1444:
  2298     0311  0877               	movf	onClick@btn,w
  2299     0312  1903               	btfsc	3,2
  2300     0313  2B15               	goto	u951
  2301     0314  2B16               	goto	u950
  2302     0315                     u951:
  2303     0315  2B18               	goto	l1450
  2304     0316                     u950:
  2305     0316                     l1446:
  2306     0316  3000               	movlw	0
  2307     0317  2B33               	goto	l97
  2308     0318                     l1450:
  2309                           
  2310                           ;buttons.c: 5:     button.btn = btn;
  2311     0318  0877               	movf	onClick@btn,w
  2312     0319  1283               	bcf	3,5	;RP0=0, select bank0
  2313     031A  1303               	bcf	3,6	;RP1=0, select bank0
  2314     031B  00B0               	movwf	_button+1	;volatile
  2315     031C                     l1452:
  2316                           
  2317                           ;buttons.c: 6:     if (button.status == 1) {
  2318     031C  032F               	decf	_button,w	;volatile
  2319     031D  1D03               	btfss	3,2
  2320     031E  2B20               	goto	u961
  2321     031F  2B21               	goto	u960
  2322     0320                     u961:
  2323     0320  2B29               	goto	l1460
  2324     0321                     u960:
  2325     0321                     l1454:
  2326                           
  2327                           ;buttons.c: 7:         timers[1] = 100;
  2328     0321  3000               	movlw	0
  2329     0322  1283               	bcf	3,5	;RP0=0, select bank0
  2330     0323  1303               	bcf	3,6	;RP1=0, select bank0
  2331     0324  00A3               	movwf	_timers+3	;volatile
  2332     0325  3064               	movlw	100
  2333     0326  00A2               	movwf	_timers+2	;volatile
  2334     0327                     l1456:
  2335                           
  2336                           ;buttons.c: 8:         return 1;
  2337     0327  3001               	movlw	1
  2338     0328  2B33               	goto	l97
  2339     0329                     l1460:
  2340                           
  2341                           ;buttons.c: 10:     if (timers[1]) return 1;
  2342     0329  0822               	movf	_timers+2,w	;volatile
  2343     032A  0423               	iorwf	_timers+3,w	;volatile
  2344     032B  1903               	btfsc	3,2
  2345     032C  2B2E               	goto	u971
  2346     032D  2B2F               	goto	u970
  2347     032E                     u971:
  2348     032E  2B30               	goto	l1466
  2349     032F                     u970:
  2350     032F  2B27               	goto	l1456
  2351     0330                     l1466:
  2352                           
  2353                           ;buttons.c: 11:     action();
  2354     0330  0876               	movf	onClick@action,w
  2355     0331  2012               	fcall	fptable
  2356     0332  2B21               	goto	l1454
  2357     0333                     l97:
  2358     0333  0008               	return
  2359     0334                     __end_of_onClick:
  2360                           
  2361                           	psect	text13
  2362     040B                     __ptext13:	
  2363 ;; *************** function _down2 *****************
  2364 ;; Defined at:
  2365 ;;		line 51 in file "buttons.c"
  2366 ;; Parameters:    Size  Location     Type
  2367 ;;		None
  2368 ;; Auto vars:     Size  Location     Type
  2369 ;;		None
  2370 ;; Return value:  Size  Location     Type
  2371 ;;                  1    wreg      void 
  2372 ;; Registers used:
  2373 ;;		wreg, status,2, status,0, btemp+1
  2374 ;; Tracked objects:
  2375 ;;		On entry : 0/0
  2376 ;;		On exit  : 0/0
  2377 ;;		Unchanged: 0/0
  2378 ;; Data sizes:     COMMON   BANK0   BANK1
  2379 ;;      Params:         0       0       0
  2380 ;;      Locals:         0       0       0
  2381 ;;      Temps:          0       0       0
  2382 ;;      Totals:         0       0       0
  2383 ;;Total ram usage:        0 bytes
  2384 ;; Hardware stack levels used: 1
  2385 ;; Hardware stack levels required when called: 1
  2386 ;; This function calls:
  2387 ;;		Nothing
  2388 ;; This function is called by:
  2389 ;;		_checkButtons
  2390 ;;		_onClick
  2391 ;; This function uses a non-reentrant model
  2392 ;;
  2393                           
  2394     040B                     _down2:	
  2395                           ;psect for function _down2
  2396                           
  2397     040B                     l1394:	
  2398                           ;incstack = 0
  2399                           ; Regs used in _down2: [wreg+status,2+status,0+btemp+1]
  2400                           
  2401                           
  2402                           ;buttons.c: 52:     if (--score.team2 < 0) score.team2 = 0;
  2403     040B  30FF               	movlw	255
  2404     040C  00FF               	movwf	btemp+1
  2405     040D  087F               	movf	btemp+1,w
  2406     040E  1283               	bcf	3,5	;RP0=0, select bank0
  2407     040F  1303               	bcf	3,6	;RP1=0, select bank0
  2408     0410  07AB               	addwf	_score+1,f
  2409     0411  1FAB               	btfss	_score+1,7
  2410     0412  2C14               	goto	u871
  2411     0413  2C15               	goto	u870
  2412     0414                     u871:
  2413     0414  2C16               	goto	l1398
  2414     0415                     u870:
  2415     0415                     l1396:
  2416     0415  01AB               	clrf	_score+1
  2417     0416                     l1398:
  2418                           
  2419                           ;buttons.c: 53:     isSaveMemory = 1;
  2420     0416  01B5               	clrf	_isSaveMemory
  2421     0417  0AB5               	incf	_isSaveMemory,f
  2422     0418                     l1400:
  2423                           
  2424                           ;buttons.c: 54:     timers[4] = 5000;
  2425     0418  3013               	movlw	19
  2426     0419  00A9               	movwf	_timers+9	;volatile
  2427     041A  3088               	movlw	136
  2428     041B  00A8               	movwf	_timers+8	;volatile
  2429     041C                     l124:
  2430     041C  0008               	return
  2431     041D                     __end_of_down2:
  2432                           
  2433                           	psect	text14
  2434     041D                     __ptext14:	
  2435 ;; *************** function _down1 *****************
  2436 ;; Defined at:
  2437 ;;		line 45 in file "buttons.c"
  2438 ;; Parameters:    Size  Location     Type
  2439 ;;		None
  2440 ;; Auto vars:     Size  Location     Type
  2441 ;;		None
  2442 ;; Return value:  Size  Location     Type
  2443 ;;                  1    wreg      void 
  2444 ;; Registers used:
  2445 ;;		wreg, status,2, status,0, btemp+1
  2446 ;; Tracked objects:
  2447 ;;		On entry : 0/0
  2448 ;;		On exit  : 0/0
  2449 ;;		Unchanged: 0/0
  2450 ;; Data sizes:     COMMON   BANK0   BANK1
  2451 ;;      Params:         0       0       0
  2452 ;;      Locals:         0       0       0
  2453 ;;      Temps:          0       0       0
  2454 ;;      Totals:         0       0       0
  2455 ;;Total ram usage:        0 bytes
  2456 ;; Hardware stack levels used: 1
  2457 ;; Hardware stack levels required when called: 1
  2458 ;; This function calls:
  2459 ;;		Nothing
  2460 ;; This function is called by:
  2461 ;;		_checkButtons
  2462 ;;		_onClick
  2463 ;; This function uses a non-reentrant model
  2464 ;;
  2465                           
  2466     041D                     _down1:	
  2467                           ;psect for function _down1
  2468                           
  2469     041D                     l1386:	
  2470                           ;incstack = 0
  2471                           ; Regs used in _down1: [wreg+status,2+status,0+btemp+1]
  2472                           
  2473                           
  2474                           ;buttons.c: 46:     if (--score.team1 < 0) score.team1 = 0;
  2475     041D  30FF               	movlw	255
  2476     041E  00FF               	movwf	btemp+1
  2477     041F  087F               	movf	btemp+1,w
  2478     0420  1283               	bcf	3,5	;RP0=0, select bank0
  2479     0421  1303               	bcf	3,6	;RP1=0, select bank0
  2480     0422  07AA               	addwf	_score,f
  2481     0423  1FAA               	btfss	_score,7
  2482     0424  2C26               	goto	u861
  2483     0425  2C27               	goto	u860
  2484     0426                     u861:
  2485     0426  2C28               	goto	l1390
  2486     0427                     u860:
  2487     0427                     l1388:
  2488     0427  01AA               	clrf	_score
  2489     0428                     l1390:
  2490                           
  2491                           ;buttons.c: 47:     isSaveMemory = 1;
  2492     0428  01B5               	clrf	_isSaveMemory
  2493     0429  0AB5               	incf	_isSaveMemory,f
  2494     042A                     l1392:
  2495                           
  2496                           ;buttons.c: 48:     timers[4] = 5000;
  2497     042A  3013               	movlw	19
  2498     042B  00A9               	movwf	_timers+9	;volatile
  2499     042C  3088               	movlw	136
  2500     042D  00A8               	movwf	_timers+8	;volatile
  2501     042E                     l120:
  2502     042E  0008               	return
  2503     042F                     __end_of_down1:
  2504                           
  2505                           	psect	text15
  2506     03CA                     __ptext15:	
  2507 ;; *************** function _up1 *****************
  2508 ;; Defined at:
  2509 ;;		line 33 in file "buttons.c"
  2510 ;; Parameters:    Size  Location     Type
  2511 ;;		None
  2512 ;; Auto vars:     Size  Location     Type
  2513 ;;		None
  2514 ;; Return value:  Size  Location     Type
  2515 ;;                  1    wreg      void 
  2516 ;; Registers used:
  2517 ;;		wreg, status,2, status,0, btemp+1
  2518 ;; Tracked objects:
  2519 ;;		On entry : 0/0
  2520 ;;		On exit  : 0/0
  2521 ;;		Unchanged: 0/0
  2522 ;; Data sizes:     COMMON   BANK0   BANK1
  2523 ;;      Params:         0       0       0
  2524 ;;      Locals:         0       0       0
  2525 ;;      Temps:          0       0       0
  2526 ;;      Totals:         0       0       0
  2527 ;;Total ram usage:        0 bytes
  2528 ;; Hardware stack levels used: 1
  2529 ;; Hardware stack levels required when called: 1
  2530 ;; This function calls:
  2531 ;;		Nothing
  2532 ;; This function is called by:
  2533 ;;		_main
  2534 ;;		_checkButtons
  2535 ;;		_onClick
  2536 ;; This function uses a non-reentrant model
  2537 ;;
  2538                           
  2539     03CA                     _up1:	
  2540                           ;psect for function _up1
  2541                           
  2542     03CA                     l1378:	
  2543                           ;incstack = 0
  2544                           ; Regs used in _up1: [wreg+status,2+status,0+btemp+1]
  2545                           
  2546                           
  2547                           ;buttons.c: 34:     if (++score.team1 > 99) score.team1 = 99;
  2548     03CA  3001               	movlw	1
  2549     03CB  00FF               	movwf	btemp+1
  2550     03CC  087F               	movf	btemp+1,w
  2551     03CD  1283               	bcf	3,5	;RP0=0, select bank0
  2552     03CE  1303               	bcf	3,6	;RP1=0, select bank0
  2553     03CF  07AA               	addwf	_score,f
  2554     03D0  082A               	movf	_score,w
  2555     03D1  3A80               	xorlw	128
  2556     03D2  3E1C               	addlw	-228
  2557     03D3  1C03               	skipc
  2558     03D4  2BD6               	goto	u851
  2559     03D5  2BD7               	goto	u850
  2560     03D6                     u851:
  2561     03D6  2BD9               	goto	l1382
  2562     03D7                     u850:
  2563     03D7                     l1380:
  2564     03D7  3063               	movlw	99
  2565     03D8  00AA               	movwf	_score
  2566     03D9                     l1382:
  2567                           
  2568                           ;buttons.c: 35:     isSaveMemory = 1;
  2569     03D9  01B5               	clrf	_isSaveMemory
  2570     03DA  0AB5               	incf	_isSaveMemory,f
  2571     03DB                     l1384:
  2572                           
  2573                           ;buttons.c: 36:     timers[4] = 5000;
  2574     03DB  3013               	movlw	19
  2575     03DC  00A9               	movwf	_timers+9	;volatile
  2576     03DD  3088               	movlw	136
  2577     03DE  00A8               	movwf	_timers+8	;volatile
  2578     03DF                     l112:
  2579     03DF  0008               	return
  2580     03E0                     __end_of_up1:
  2581                           
  2582                           	psect	text16
  2583     03E0                     __ptext16:	
  2584 ;; *************** function _up2 *****************
  2585 ;; Defined at:
  2586 ;;		line 39 in file "buttons.c"
  2587 ;; Parameters:    Size  Location     Type
  2588 ;;		None
  2589 ;; Auto vars:     Size  Location     Type
  2590 ;;		None
  2591 ;; Return value:  Size  Location     Type
  2592 ;;                  1    wreg      void 
  2593 ;; Registers used:
  2594 ;;		wreg, status,2, status,0, btemp+1
  2595 ;; Tracked objects:
  2596 ;;		On entry : 0/0
  2597 ;;		On exit  : 0/0
  2598 ;;		Unchanged: 0/0
  2599 ;; Data sizes:     COMMON   BANK0   BANK1
  2600 ;;      Params:         0       0       0
  2601 ;;      Locals:         0       0       0
  2602 ;;      Temps:          0       0       0
  2603 ;;      Totals:         0       0       0
  2604 ;;Total ram usage:        0 bytes
  2605 ;; Hardware stack levels used: 1
  2606 ;; Hardware stack levels required when called: 1
  2607 ;; This function calls:
  2608 ;;		Nothing
  2609 ;; This function is called by:
  2610 ;;		_main
  2611 ;;		_checkButtons
  2612 ;;		_onClick
  2613 ;; This function uses a non-reentrant model
  2614 ;;
  2615                           
  2616     03E0                     _up2:	
  2617                           ;psect for function _up2
  2618                           
  2619     03E0                     l1370:	
  2620                           ;incstack = 0
  2621                           ; Regs used in _up2: [wreg+status,2+status,0+btemp+1]
  2622                           
  2623                           
  2624                           ;buttons.c: 40:     if (++score.team2 > 99) score.team2 = 99;
  2625     03E0  3001               	movlw	1
  2626     03E1  00FF               	movwf	btemp+1
  2627     03E2  087F               	movf	btemp+1,w
  2628     03E3  1283               	bcf	3,5	;RP0=0, select bank0
  2629     03E4  1303               	bcf	3,6	;RP1=0, select bank0
  2630     03E5  07AB               	addwf	_score+1,f
  2631     03E6  082B               	movf	_score+1,w
  2632     03E7  3A80               	xorlw	128
  2633     03E8  3E1C               	addlw	-228
  2634     03E9  1C03               	skipc
  2635     03EA  2BEC               	goto	u841
  2636     03EB  2BED               	goto	u840
  2637     03EC                     u841:
  2638     03EC  2BEF               	goto	l1374
  2639     03ED                     u840:
  2640     03ED                     l1372:
  2641     03ED  3063               	movlw	99
  2642     03EE  00AB               	movwf	_score+1
  2643     03EF                     l1374:
  2644                           
  2645                           ;buttons.c: 41:     isSaveMemory = 1;
  2646     03EF  01B5               	clrf	_isSaveMemory
  2647     03F0  0AB5               	incf	_isSaveMemory,f
  2648     03F1                     l1376:
  2649                           
  2650                           ;buttons.c: 42:     timers[4] = 5000;
  2651     03F1  3013               	movlw	19
  2652     03F2  00A9               	movwf	_timers+9	;volatile
  2653     03F3  3088               	movlw	136
  2654     03F4  00A8               	movwf	_timers+8	;volatile
  2655     03F5                     l116:
  2656     03F5  0008               	return
  2657     03F6                     __end_of_up2:
  2658                           
  2659                           	psect	text17
  2660     0334                     __ptext17:	
  2661 ;; *************** function _win *****************
  2662 ;; Defined at:
  2663 ;;		line 72 in file "buttons.c"
  2664 ;; Parameters:    Size  Location     Type
  2665 ;;		None
  2666 ;; Auto vars:     Size  Location     Type
  2667 ;;		None
  2668 ;; Return value:  Size  Location     Type
  2669 ;;                  1    wreg      void 
  2670 ;; Registers used:
  2671 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2672 ;; Tracked objects:
  2673 ;;		On entry : 0/0
  2674 ;;		On exit  : 0/0
  2675 ;;		Unchanged: 0/0
  2676 ;; Data sizes:     COMMON   BANK0   BANK1
  2677 ;;      Params:         0       0       0
  2678 ;;      Locals:         0       0       0
  2679 ;;      Temps:          1       0       0
  2680 ;;      Totals:         1       0       0
  2681 ;;Total ram usage:        1 bytes
  2682 ;; Hardware stack levels used: 1
  2683 ;; Hardware stack levels required when called: 3
  2684 ;; This function calls:
  2685 ;;		_saveMemory
  2686 ;; This function is called by:
  2687 ;;		_checkButtons
  2688 ;;		_onClick
  2689 ;; This function uses a non-reentrant model
  2690 ;;
  2691                           
  2692     0334                     _win:	
  2693                           ;psect for function _win
  2694                           
  2695     0334                     l1416:	
  2696                           ;incstack = 0
  2697                           ; Regs used in _win: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2698                           
  2699                           
  2700                           ;buttons.c: 73:     if (score.team1 == score.team2) return;
  2701     0334  1283               	bcf	3,5	;RP0=0, select bank0
  2702     0335  1303               	bcf	3,6	;RP1=0, select bank0
  2703     0336  082B               	movf	_score+1,w
  2704     0337  062A               	xorwf	_score,w
  2705     0338  1D03               	skipz
  2706     0339  2B3B               	goto	u901
  2707     033A  2B3C               	goto	u900
  2708     033B                     u901:
  2709     033B  2B3D               	goto	l1420
  2710     033C                     u900:
  2711     033C  2B5C               	goto	l137
  2712     033D                     l1420:
  2713                           
  2714                           ;buttons.c: 74:     if (score.team1 > score.team2) score.win1++;
  2715     033D  082B               	movf	_score+1,w
  2716     033E  3A80               	xorlw	128
  2717     033F  00F5               	movwf	??_win
  2718     0340  082A               	movf	_score,w
  2719     0341  3A80               	xorlw	128
  2720     0342  02F5               	subwf	??_win,f
  2721     0343  1803               	skipnc
  2722     0344  2B46               	goto	u911
  2723     0345  2B47               	goto	u910
  2724     0346                     u911:
  2725     0346  2B4B               	goto	l1424
  2726     0347                     u910:
  2727     0347                     l1422:
  2728     0347  3001               	movlw	1
  2729     0348  00FF               	movwf	btemp+1
  2730     0349  087F               	movf	btemp+1,w
  2731     034A  07AC               	addwf	_score+2,f
  2732     034B                     l1424:
  2733                           
  2734                           ;buttons.c: 75:     if (score.team2 > score.team1) score.win2++;
  2735     034B  082A               	movf	_score,w
  2736     034C  3A80               	xorlw	128
  2737     034D  00F5               	movwf	??_win
  2738     034E  082B               	movf	_score+1,w
  2739     034F  3A80               	xorlw	128
  2740     0350  02F5               	subwf	??_win,f
  2741     0351  1803               	skipnc
  2742     0352  2B54               	goto	u921
  2743     0353  2B55               	goto	u920
  2744     0354                     u921:
  2745     0354  2B59               	goto	l1428
  2746     0355                     u920:
  2747     0355                     l1426:
  2748     0355  3001               	movlw	1
  2749     0356  00FF               	movwf	btemp+1
  2750     0357  087F               	movf	btemp+1,w
  2751     0358  07AD               	addwf	_score+3,f
  2752     0359                     l1428:
  2753                           
  2754                           ;buttons.c: 76:     score.team1 = score.team2 = 0;
  2755     0359  01AB               	clrf	_score+1
  2756     035A  01AA               	clrf	_score
  2757     035B                     l1430:
  2758                           
  2759                           ;buttons.c: 77:     saveMemory();
  2760     035B  239B               	fcall	_saveMemory
  2761     035C                     l137:
  2762     035C  0008               	return
  2763     035D                     __end_of_win:
  2764                           
  2765                           	psect	text18
  2766     039B                     __ptext18:	
  2767 ;; *************** function _saveMemory *****************
  2768 ;; Defined at:
  2769 ;;		line 9 in file "memory.c"
  2770 ;; Parameters:    Size  Location     Type
  2771 ;;		None
  2772 ;; Auto vars:     Size  Location     Type
  2773 ;;		None
  2774 ;; Return value:  Size  Location     Type
  2775 ;;                  1    wreg      void 
  2776 ;; Registers used:
  2777 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2778 ;; Tracked objects:
  2779 ;;		On entry : 0/0
  2780 ;;		On exit  : 0/0
  2781 ;;		Unchanged: 0/0
  2782 ;; Data sizes:     COMMON   BANK0   BANK1
  2783 ;;      Params:         0       0       0
  2784 ;;      Locals:         0       0       0
  2785 ;;      Temps:          0       0       0
  2786 ;;      Totals:         0       0       0
  2787 ;;Total ram usage:        0 bytes
  2788 ;; Hardware stack levels used: 1
  2789 ;; Hardware stack levels required when called: 2
  2790 ;; This function calls:
  2791 ;;		_updateMemory
  2792 ;; This function is called by:
  2793 ;;		_main
  2794 ;;		_clear
  2795 ;;		_win
  2796 ;; This function uses a non-reentrant model
  2797 ;;
  2798                           
  2799     039B                     _saveMemory:	
  2800                           ;psect for function _saveMemory
  2801                           
  2802     039B                     l1308:	
  2803                           ;incstack = 0
  2804                           ; Regs used in _saveMemory: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2805                           
  2806                           
  2807                           ;memory.c: 10:     updateMemory(0x00, (char) score.team1);
  2808     039B  1283               	bcf	3,5	;RP0=0, select bank0
  2809     039C  1303               	bcf	3,6	;RP1=0, select bank0
  2810     039D  082A               	movf	_score,w
  2811     039E  00F2               	movwf	updateMemory@value
  2812     039F  3000               	movlw	0
  2813     03A0  2203               	fcall	_updateMemory
  2814                           
  2815                           ;memory.c: 11:     updateMemory(0x01, (char) score.team2);
  2816     03A1  1283               	bcf	3,5	;RP0=0, select bank0
  2817     03A2  1303               	bcf	3,6	;RP1=0, select bank0
  2818     03A3  082B               	movf	_score+1,w
  2819     03A4  00F2               	movwf	updateMemory@value
  2820     03A5  3001               	movlw	1
  2821     03A6  2203               	fcall	_updateMemory
  2822                           
  2823                           ;memory.c: 12:     updateMemory(0x02, score.win1);
  2824     03A7  1283               	bcf	3,5	;RP0=0, select bank0
  2825     03A8  1303               	bcf	3,6	;RP1=0, select bank0
  2826     03A9  082C               	movf	_score+2,w
  2827     03AA  00F2               	movwf	updateMemory@value
  2828     03AB  3002               	movlw	2
  2829     03AC  2203               	fcall	_updateMemory
  2830                           
  2831                           ;memory.c: 13:     updateMemory(0x03, score.win2);
  2832     03AD  1283               	bcf	3,5	;RP0=0, select bank0
  2833     03AE  1303               	bcf	3,6	;RP1=0, select bank0
  2834     03AF  082D               	movf	_score+3,w
  2835     03B0  00F2               	movwf	updateMemory@value
  2836     03B1  3003               	movlw	3
  2837     03B2  2203               	fcall	_updateMemory
  2838     03B3                     l261:
  2839     03B3  0008               	return
  2840     03B4                     __end_of_saveMemory:
  2841                           
  2842                           	psect	text19
  2843     0203                     __ptext19:	
  2844 ;; *************** function _updateMemory *****************
  2845 ;; Defined at:
  2846 ;;		line 3 in file "memory.c"
  2847 ;; Parameters:    Size  Location     Type
  2848 ;;  addr            1    wreg     unsigned char 
  2849 ;;  value           1    2[COMMON] unsigned char 
  2850 ;; Auto vars:     Size  Location     Type
  2851 ;;  addr            1    4[COMMON] unsigned char 
  2852 ;;  mem             1    3[COMMON] unsigned char 
  2853 ;; Return value:  Size  Location     Type
  2854 ;;                  1    wreg      void 
  2855 ;; Registers used:
  2856 ;;		wreg, status,2, status,0, btemp+1
  2857 ;; Tracked objects:
  2858 ;;		On entry : 0/0
  2859 ;;		On exit  : 0/0
  2860 ;;		Unchanged: 0/0
  2861 ;; Data sizes:     COMMON   BANK0   BANK1
  2862 ;;      Params:         1       0       0
  2863 ;;      Locals:         2       0       0
  2864 ;;      Temps:          0       0       0
  2865 ;;      Totals:         3       0       0
  2866 ;;Total ram usage:        3 bytes
  2867 ;; Hardware stack levels used: 1
  2868 ;; Hardware stack levels required when called: 1
  2869 ;; This function calls:
  2870 ;;		Nothing
  2871 ;; This function is called by:
  2872 ;;		_saveMemory
  2873 ;; This function uses a non-reentrant model
  2874 ;;
  2875                           
  2876     0203                     _updateMemory:	
  2877                           ;psect for function _updateMemory
  2878                           
  2879                           
  2880                           ;incstack = 0
  2881                           ; Regs used in _updateMemory: [wreg+status,2+status,0+btemp+1]
  2882                           ;updateMemory@addr stored from wreg
  2883     0203  00F4               	movwf	updateMemory@addr
  2884     0204                     l1276:
  2885                           
  2886                           ;memory.c: 4:     char mem = ( EEADR = addr, EECON1 &= 0x3F, EECON1bits.RD = 1, EEDATA);
  2887     0204  0874               	movf	updateMemory@addr,w
  2888     0205  1283               	bcf	3,5	;RP0=0, select bank2
  2889     0206  1703               	bsf	3,6	;RP1=1, select bank2
  2890     0207  008D               	movwf	13	;volatile
  2891     0208                     l1278:
  2892     0208  303F               	movlw	63
  2893     0209  00FF               	movwf	btemp+1
  2894     020A  087F               	movf	btemp+1,w
  2895     020B  1683               	bsf	3,5	;RP0=1, select bank3
  2896     020C  1703               	bsf	3,6	;RP1=1, select bank3
  2897     020D  058C               	andwf	12,f	;volsfr
  2898     020E                     l1280:
  2899     020E  140C               	bsf	12,0	;volsfr
  2900     020F                     l1282:
  2901     020F  1283               	bcf	3,5	;RP0=0, select bank2
  2902     0210  1703               	bsf	3,6	;RP1=1, select bank2
  2903     0211  080C               	movf	12,w	;volatile
  2904     0212  00F3               	movwf	updateMemory@mem
  2905     0213                     l1284:
  2906                           
  2907                           ;memory.c: 5:     if (mem == value) return;
  2908     0213  0873               	movf	updateMemory@mem,w
  2909     0214  0672               	xorwf	updateMemory@value,w
  2910     0215  1D03               	skipz
  2911     0216  2A18               	goto	u681
  2912     0217  2A19               	goto	u680
  2913     0218                     u681:
  2914     0218  2A1A               	goto	l253
  2915     0219                     u680:
  2916     0219  2A45               	goto	l251
  2917     021A                     l253:
  2918     021A  1683               	bsf	3,5	;RP0=1, select bank3
  2919     021B  1703               	bsf	3,6	;RP1=1, select bank3
  2920     021C  188C               	btfsc	12,1	;volsfr
  2921     021D  2A1F               	goto	u691
  2922     021E  2A20               	goto	u690
  2923     021F                     u691:
  2924     021F  2A1A               	goto	l253
  2925     0220                     u690:
  2926     0220                     l1288:
  2927     0220  0874               	movf	updateMemory@addr,w
  2928     0221  1283               	bcf	3,5	;RP0=0, select bank2
  2929     0222  1703               	bsf	3,6	;RP1=1, select bank2
  2930     0223  008D               	movwf	13	;volatile
  2931     0224  0872               	movf	updateMemory@value,w
  2932     0225  008C               	movwf	12	;volatile
  2933     0226                     l1290:
  2934     0226  303F               	movlw	63
  2935     0227  00FF               	movwf	btemp+1
  2936     0228  087F               	movf	btemp+1,w
  2937     0229  1683               	bsf	3,5	;RP0=1, select bank3
  2938     022A  1703               	bsf	3,6	;RP1=1, select bank3
  2939     022B  058C               	andwf	12,f	;volsfr
  2940     022C                     l1292:
  2941     022C  1283               	bcf	3,5	;RP0=0, select bank0
  2942     022D  1303               	bcf	3,6	;RP1=0, select bank0
  2943     022E  1003               	bcf	3,0	;volatile
  2944     022F                     l1294:
  2945     022F  1F8B               	btfss	11,7	;volatile
  2946     0230  2A32               	goto	u701
  2947     0231  2A33               	goto	u700
  2948     0232                     u701:
  2949     0232  2A34               	goto	l256
  2950     0233                     u700:
  2951     0233                     l1296:
  2952     0233  1403               	bsf	3,0	;volatile
  2953     0234                     l256:
  2954     0234  138B               	bcf	11,7	;volatile
  2955     0235  1683               	bsf	3,5	;RP0=1, select bank3
  2956     0236  1703               	bsf	3,6	;RP1=1, select bank3
  2957     0237  150C               	bsf	12,2	;volsfr
  2958     0238                     l1298:
  2959     0238  3055               	movlw	85
  2960     0239  008D               	movwf	13	;volsfr
  2961     023A  30AA               	movlw	170
  2962     023B  008D               	movwf	13	;volsfr
  2963     023C                     l1300:
  2964     023C  148C               	bsf	12,1	;volsfr
  2965     023D                     l1302:
  2966     023D  110C               	bcf	12,2	;volsfr
  2967     023E                     l1304:
  2968     023E  1283               	bcf	3,5	;RP0=0, select bank0
  2969     023F  1303               	bcf	3,6	;RP1=0, select bank0
  2970     0240  1C03               	btfss	3,0	;volatile
  2971     0241  2A43               	goto	u711
  2972     0242  2A44               	goto	u710
  2973     0243                     u711:
  2974     0243  2A45               	goto	l251
  2975     0244                     u710:
  2976     0244                     l1306:
  2977     0244  178B               	bsf	11,7	;volatile
  2978     0245                     l251:
  2979     0245  0008               	return
  2980     0246                     __end_of_updateMemory:
  2981                           
  2982                           	psect	text20
  2983     001F                     __ptext20:	
  2984 ;; *************** function _isr *****************
  2985 ;; Defined at:
  2986 ;;		line 3 in file "interrupt.c"
  2987 ;; Parameters:    Size  Location     Type
  2988 ;;		None
  2989 ;; Auto vars:     Size  Location     Type
  2990 ;;		None
  2991 ;; Return value:  Size  Location     Type
  2992 ;;                  1    wreg      void 
  2993 ;; Registers used:
  2994 ;;		wreg, status,2, status,0
  2995 ;; Tracked objects:
  2996 ;;		On entry : 0/0
  2997 ;;		On exit  : 0/0
  2998 ;;		Unchanged: 0/0
  2999 ;; Data sizes:     COMMON   BANK0   BANK1
  3000 ;;      Params:         0       0       0
  3001 ;;      Locals:         0       0       0
  3002 ;;      Temps:          2       0       0
  3003 ;;      Totals:         2       0       0
  3004 ;;Total ram usage:        2 bytes
  3005 ;; Hardware stack levels used: 1
  3006 ;; This function calls:
  3007 ;;		Nothing
  3008 ;; This function is called by:
  3009 ;;		Interrupt level 1
  3010 ;; This function uses a non-reentrant model
  3011 ;;
  3012                           
  3013     001F                     _isr:	
  3014                           ;psect for function _isr
  3015                           
  3016     001F                     i1l1702:
  3017                           
  3018                           ;interrupt.c: 4:     if (INTCONbits.INTF) {
  3019     001F  1C8B               	btfss	11,1	;volatile
  3020     0020  2822               	goto	u126_21
  3021     0021  2823               	goto	u126_20
  3022     0022                     u126_21:
  3023     0022  2838               	goto	i1l209
  3024     0023                     u126_20:
  3025     0023                     i1l1704:
  3026                           
  3027                           ;interrupt.c: 5:         INTCONbits.INTF = 0;
  3028     0023  108B               	bcf	11,1	;volatile
  3029                           
  3030                           ;interrupt.c: 6:         timers[2] = 300;
  3031     0024  3001               	movlw	1
  3032     0025  1283               	bcf	3,5	;RP0=0, select bank0
  3033     0026  1303               	bcf	3,6	;RP1=0, select bank0
  3034     0027  00A5               	movwf	_timers+5	;volatile
  3035     0028  302C               	movlw	44
  3036     0029  00A4               	movwf	_timers+4	;volatile
  3037     002A                     i1l1706:
  3038                           
  3039                           ;interrupt.c: 7:         if (timers[3] == 0) {
  3040     002A  0826               	movf	_timers+6,w	;volatile
  3041     002B  0427               	iorwf	_timers+7,w	;volatile
  3042     002C  1D03               	btfss	3,2
  3043     002D  282F               	goto	u127_21
  3044     002E  2830               	goto	u127_20
  3045     002F                     u127_21:
  3046     002F  288A               	goto	i1l219
  3047     0030                     u127_20:
  3048     0030                     i1l1708:
  3049                           
  3050                           ;interrupt.c: 8:             rxClocks++;
  3051     0030  3001               	movlw	1
  3052     0031  07B3               	addwf	_rxClocks,f	;volatile
  3053     0032  1803               	skipnc
  3054     0033  0AB4               	incf	_rxClocks+1,f	;volatile
  3055     0034  3000               	movlw	0
  3056     0035  07B4               	addwf	_rxClocks+1,f	;volatile
  3057     0036                     i1l1710:
  3058                           
  3059                           ;interrupt.c: 9:             PORTCbits.RC7 = 1;
  3060     0036  1787               	bsf	7,7	;volatile
  3061     0037  288A               	goto	i1l219
  3062     0038                     i1l209:
  3063     0038  1283               	bcf	3,5	;RP0=0, select bank0
  3064     0039  1303               	bcf	3,6	;RP1=0, select bank0
  3065     003A  1C0C               	btfss	12,0	;volatile
  3066     003B  283D               	goto	u128_21
  3067     003C  283E               	goto	u128_20
  3068     003D                     u128_21:
  3069     003D  288A               	goto	i1l219
  3070     003E                     u128_20:
  3071     003E                     i1l1712:
  3072                           
  3073                           ;interrupt.c: 12:         PIR1bits.TMR1IF = 0;
  3074     003E  100C               	bcf	12,0	;volatile
  3075     003F                     i1l1714:
  3076                           
  3077                           ;interrupt.c: 13:         if (timers[0]) timers[0]--;
  3078     003F  0820               	movf	_timers,w	;volatile
  3079     0040  0421               	iorwf	_timers+1,w	;volatile
  3080     0041  1903               	btfsc	3,2
  3081     0042  2844               	goto	u129_21
  3082     0043  2845               	goto	u129_20
  3083     0044                     u129_21:
  3084     0044  284B               	goto	i1l1718
  3085     0045                     u129_20:
  3086     0045                     i1l1716:
  3087     0045  3001               	movlw	1
  3088     0046  02A0               	subwf	_timers,f	;volatile
  3089     0047  3000               	movlw	0
  3090     0048  1C03               	skipc
  3091     0049  03A1               	decf	_timers+1,f	;volatile
  3092     004A  02A1               	subwf	_timers+1,f	;volatile
  3093     004B                     i1l1718:
  3094                           
  3095                           ;interrupt.c: 14:         if (timers[1]) timers[1]--;
  3096     004B  0822               	movf	_timers+2,w	;volatile
  3097     004C  0423               	iorwf	_timers+3,w	;volatile
  3098     004D  1903               	btfsc	3,2
  3099     004E  2850               	goto	u130_21
  3100     004F  2851               	goto	u130_20
  3101     0050                     u130_21:
  3102     0050  2857               	goto	i1l1722
  3103     0051                     u130_20:
  3104     0051                     i1l1720:
  3105     0051  3001               	movlw	1
  3106     0052  02A2               	subwf	_timers+2,f	;volatile
  3107     0053  3000               	movlw	0
  3108     0054  1C03               	skipc
  3109     0055  03A3               	decf	_timers+3,f	;volatile
  3110     0056  02A3               	subwf	_timers+3,f	;volatile
  3111     0057                     i1l1722:
  3112                           
  3113                           ;interrupt.c: 15:         if (timers[2]) timers[2]--;
  3114     0057  0824               	movf	_timers+4,w	;volatile
  3115     0058  0425               	iorwf	_timers+5,w	;volatile
  3116     0059  1903               	btfsc	3,2
  3117     005A  285C               	goto	u131_21
  3118     005B  285D               	goto	u131_20
  3119     005C                     u131_21:
  3120     005C  2863               	goto	i1l1726
  3121     005D                     u131_20:
  3122     005D                     i1l1724:
  3123     005D  3001               	movlw	1
  3124     005E  02A4               	subwf	_timers+4,f	;volatile
  3125     005F  3000               	movlw	0
  3126     0060  1C03               	skipc
  3127     0061  03A5               	decf	_timers+5,f	;volatile
  3128     0062  02A5               	subwf	_timers+5,f	;volatile
  3129     0063                     i1l1726:
  3130                           
  3131                           ;interrupt.c: 16:         if (timers[3]) timers[3]--;
  3132     0063  0826               	movf	_timers+6,w	;volatile
  3133     0064  0427               	iorwf	_timers+7,w	;volatile
  3134     0065  1903               	btfsc	3,2
  3135     0066  2868               	goto	u132_21
  3136     0067  2869               	goto	u132_20
  3137     0068                     u132_21:
  3138     0068  286F               	goto	i1l1730
  3139     0069                     u132_20:
  3140     0069                     i1l1728:
  3141     0069  3001               	movlw	1
  3142     006A  02A6               	subwf	_timers+6,f	;volatile
  3143     006B  3000               	movlw	0
  3144     006C  1C03               	skipc
  3145     006D  03A7               	decf	_timers+7,f	;volatile
  3146     006E  02A7               	subwf	_timers+7,f	;volatile
  3147     006F                     i1l1730:
  3148                           
  3149                           ;interrupt.c: 17:         if (timers[4]) timers[4]--;
  3150     006F  0828               	movf	_timers+8,w	;volatile
  3151     0070  0429               	iorwf	_timers+9,w	;volatile
  3152     0071  1903               	btfsc	3,2
  3153     0072  2874               	goto	u133_21
  3154     0073  2875               	goto	u133_20
  3155     0074                     u133_21:
  3156     0074  287B               	goto	i1l1734
  3157     0075                     u133_20:
  3158     0075                     i1l1732:
  3159     0075  3001               	movlw	1
  3160     0076  02A8               	subwf	_timers+8,f	;volatile
  3161     0077  3000               	movlw	0
  3162     0078  1C03               	skipc
  3163     0079  03A9               	decf	_timers+9,f	;volatile
  3164     007A  02A9               	subwf	_timers+9,f	;volatile
  3165     007B                     i1l1734:
  3166                           
  3167                           ;interrupt.c: 18:         TMR1 = 65535 - 3200;
  3168     007B  30F3               	movlw	243
  3169     007C  008F               	movwf	15	;volatile
  3170     007D  307F               	movlw	127
  3171     007E  008E               	movwf	14	;volatile
  3172     007F                     i1l1736:
  3173                           
  3174                           ;interrupt.c: 20:         if (button.status == 1)
  3175     007F  032F               	decf	_button,w	;volatile
  3176     0080  1D03               	btfss	3,2
  3177     0081  2883               	goto	u134_21
  3178     0082  2884               	goto	u134_20
  3179     0083                     u134_21:
  3180     0083  288A               	goto	i1l219
  3181     0084                     u134_20:
  3182     0084                     i1l1738:
  3183                           
  3184                           ;interrupt.c: 21:             button.pressTime++;
  3185     0084  3001               	movlw	1
  3186     0085  07B1               	addwf	_button+2,f	;volatile
  3187     0086  1803               	skipnc
  3188     0087  0AB2               	incf	_button+3,f	;volatile
  3189     0088  3000               	movlw	0
  3190     0089  07B2               	addwf	_button+3,f	;volatile
  3191     008A                     i1l219:
  3192     008A  0871               	movf	??_isr+1,w
  3193     008B  008A               	movwf	10
  3194     008C  0E70               	swapf	??_isr,w
  3195     008D  0083               	movwf	3
  3196     008E  0EFE               	swapf	btemp,f
  3197     008F  0E7E               	swapf	btemp,w
  3198     0090  0009               	retfie
  3199     0091                     __end_of_isr:
  3200     000E                     
  3201                           	psect	intentry
  3202     0004                     __pintentry:	
  3203                           ;incstack = 0
  3204                           ; Regs used in _isr: [wreg+status,2+status,0]
  3205                           
  3206     0004                     interrupt_function:
  3207     007E                     saved_w	set	btemp
  3208     0004  00FE               	movwf	btemp
  3209     0005  0E03               	swapf	3,w
  3210     0006  00F0               	movwf	??_isr
  3211     0007  080A               	movf	10,w
  3212     0008  00F1               	movwf	??_isr+1
  3213     0009  281F               	ljmp	_isr
  3214                           
  3215                           	psect	functab
  3216     0012                     __pfunctab:
  3217     0012                     __fptable:
  3218     0012                     fptable:
  3219     0012  00FF               	movwf	(btemp+1)& (0+127)
  3220     0013  3000               	movlw	high fptable
  3221     0014  008A               	movwf	10
  3222     0015  087F               	movf	(btemp+1)& (0+127),w
  3223     0016  0782               	addwf	2,f
  3224     0017                     fpbase:
  3225     0017  2817               	goto	fpbase	; Call via a null pointer and you will get stuck here.
  3226     0018                     fp__win:
  3227     0018  2B34               	ljmp	_win
  3228     0019                     fp__up2:
  3229     0019                     entry__up2:
  3230     0019  2BE0               	ljmp	_up2
  3231     001A                     fp__up1:
  3232     001A                     entry__up1:
  3233     001A  2BCA               	ljmp	_up1
  3234     001B                     fp__down1:
  3235     001B  2C1D               	ljmp	_down1
  3236     001C                     fp__down2:
  3237     001C  2C0B               	ljmp	_down2
  3238     001D                     fp__change:
  3239     001D  2B7D               	ljmp	_change
  3240     001E                     fp__clear:
  3241     001E  2C37               	ljmp	_clear
  3242     001F                     __end_of__fptable:
  3243     007E                     btemp	set	126	;btemp
  3244     007E                     wtemp0	set	126
  3245                           
  3246                           	psect	config
  3247                           
  3248                           ;Config register CONFIG @ 0x2007
  3249                           ;	Oscillator Selection bits
  3250                           ;	FOSC = HS, HS oscillator
  3251                           ;	Watchdog Timer Enable bit
  3252                           ;	WDTE = OFF, WDT disabled
  3253                           ;	Power-up Timer Enable bit
  3254                           ;	PWRTE = OFF, PWRT disabled
  3255                           ;	FLASH Program Memory Code Protection bits
  3256                           ;	CP = OFF, Code protection off
  3257                           ;	Brown-out Reset Enable bit
  3258                           ;	BOREN = OFF, BOR disabled
  3259                           ;	Low Voltage In-Circuit Serial Programming Enable bit
  3260                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  3261                           ;	Data EE Memory Code Protection
  3262                           ;	CPD = OFF, Code Protection off
  3263                           ;	FLASH Program Memory Write Enable
  3264                           ;	WRT = ALL, Unprotected program memory may be written to by EECON control
  3265                           ;	In-Circuit Debugger Mode bit
  3266                           ;	DEBUG = 0x1, unprogrammed default
  3267     2007                     	org	8199
  3268     2007  3F3A               	dw	16186

Data Sizes:
    Strings     0
    Constant    16
    Data        0
    BSS         22
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      12
    BANK0            80     12      34
    BANK1            32      0       0

Pointer List with Targets:

    onClick@action	PTR FTN()void  size(1) Largest target is 1
		 -> down1(), down2(), up1(), up2(), 
		 -> win(), 

    onPressed@action	PTR FTN()void  size(1) Largest target is 1
		 -> change(), 

    onPressed@pressAction	PTR FTN()void  size(1) Largest target is 1
		 -> clear(), 


Critical Paths under _main in COMMON

    _main->_checkButtons
    _getNumber->_calcDigit
    _calcDigit->___awdiv
    _checkButtons->_onPressed
    _onClick->_win
    _saveMemory->_updateMemory

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_updateDisplay
    _getNumber->_calcDigit

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    3118
                                              9 BANK0      3     3      0
                       _checkButtons
                         _loadMemory
                         _saveMemory
                              _setup
                                _up1
                                _up2
                      _updateDisplay
 ---------------------------------------------------------------------------------
 (1) _updateDisplay                                        2     2      0     976
                                              7 BANK0      2     2      0
                          _getNumber
 ---------------------------------------------------------------------------------
 (2) _getNumber                                            0     0      0     930
                          _calcDigit
 ---------------------------------------------------------------------------------
 (3) _calcDigit                                            8     7      1     930
                                             10 COMMON     1     0      1
                                              0 BANK0      7     7      0
                            ___awdiv
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               3     2      1     168
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     452
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _loadMemory                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkButtons                                         2     2      0    1727
                                             10 COMMON     2     2      0
                            _onClick
                          _onPressed
 ---------------------------------------------------------------------------------
 (2) _onPressed                                            5     1      4     820
                                              5 COMMON     5     1      4
                             _change *
                              _clear *
 ---------------------------------------------------------------------------------
 (3) _clear                                                0     0      0     415
                         _saveMemory
 ---------------------------------------------------------------------------------
 (3) _change                                               1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _onClick                                              2     1      1     883
                                              6 COMMON     2     1      1
                              _down1 *
                              _down2 *
                                _up1 *
                                _up2 *
                                _win *
 ---------------------------------------------------------------------------------
 (3) _win                                                  1     1      0     415
                                              5 COMMON     1     1      0
                         _saveMemory
 ---------------------------------------------------------------------------------
 (1) _saveMemory                                           0     0      0     415
                       _updateMemory
 ---------------------------------------------------------------------------------
 (2) _updateMemory                                         3     2      1     415
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _up2                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _up1                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _down2                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _down1                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _checkButtons
     _onClick
       _down1 *
       _down2 *
       _up1 *
       _up2 *
       _win *
         _saveMemory
           _updateMemory
     _onPressed
       _change *
       _clear *
         _saveMemory
   _loadMemory
   _saveMemory
   _setup
   _up1
   _up2
   _updateDisplay
     _getNumber
       _calcDigit
         ___awdiv
         ___bmul

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              40      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      2E       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      C      22       5       42.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            20      0       0       6        0.0%
BANK1               20      0       0       7        0.0%
DATA                 0      0      2E       8        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Sat Jul 27 12:23:43 2024

   __end_of_checkButtons 015C        updateMemory@value 0072                        pc 0002  
         ___bmul@product 0073                       l61 037C                       l97 0333  
           ___awdiv@sign 0077                       fsr 0004                      l112 03DF  
                    l120 042E                      l105 0284                      l130 039A  
                    l116 03F5                      l124 041C                      l133 043E  
                    l137 035C                      l145 015B                      l170 02B6  
                    l251 0245                      l253 021A                      l261 03B3  
                    l181 02E1                      l174 030A                      l256 0234  
                    l169 02B5                      l507 00F7                      l268 01B7  
                    l380 040A                      _GIE 005F                      u700 0233  
                    u701 0232                      u710 0244                      u711 0243  
                    u800 00D5                      u720 03FC                      u801 00D4  
                    u721 03FB                      u730 0409                      u731 0408  
                    u900 033C                      u820 00E9                      u740 0096  
                    u901 033B                      u821 00E8                      u805 00D1  
                    u741 0095                      u910 0347                      u830 00EE  
                    u750 00A1                      u911 0346                      u831 00ED  
                    u815 00DD                      u751 00A0                      u680 0219  
                    u920 0355                      u840 03ED                      u760 00B2  
                    u681 0218                      u921 0354                      u841 03EC  
                    u761 00B1                      u690 0220                      u850 03D7  
                    u930 02A6                      u691 021F                      u851 03D6  
                    u931 02A5                      u860 0427                      u940 0311  
                    u780 00C4                      u861 0426                      u941 0310  
                    u781 00C3                      u870 0415                      u950 0316  
                    u871 0414                      u951 0315                      u775 00B6  
                    u960 0321                      u880 0386                      u961 0320  
                    u881 0385                      u970 032F                      u890 038D  
                    u971 032E                      u891 038C                      u795 00C5  
                    u980 024C                      u981 024B                      u990 0251  
                    u991 0250                      _up1 03CA                      _up2 03E0  
                    _isr 001F                      fsr0 0004                      _win 0334  
                    indf 0000                     l1300 023C                     l1302 023D  
                   l1310 03F7                     l1304 023E                     l1400 0418  
                   l1320 0404                     l1312 03F8                     l1306 0244  
                   l1410 0396                     l1402 037D                     l1330 0096  
                   l1322 0409                     l1314 03FC                     l1308 039B  
                   l1420 033D                     l1404 0386                     l1412 0437  
                   l1500 027A                     l1340 00AA                     l1332 009B  
                   l1316 0400                     l1430 035B                     l1422 0347  
                   l1406 038E                     l1414 043D                     l1350 00C0  
                   l1342 00AC                     l1334 009D                     l1326 0091  
                   l1318 0402                     l1280 020E                     l1424 034B  
                   l1416 0334                     l1408 0394                     l1600 0192  
                   l1360 00E3                     l1352 00C4                     l1344 00B2  
                   l1336 00A1                     l1328 0092                     l1432 0288  
                   l1520 02EE                     l1290 0226                     l1282 020F  
                   l1426 0355                     l1370 03E0                     l1450 0318  
                   l1442 030C                     l1506 0281                     l1610 01A5  
                   l1602 0198                     l1354 00D5                     l1346 00B5  
                   l1362 00E9                     l1338 00A6                     l1434 02A0  
                   l1522 02F4                     l1514 02E2                     l1292 022C  
                   l1284 0213                     l1276 0204                     l1428 0359  
                   l1372 03ED                     l1380 03D7                     l1460 0329  
                   l1452 031C                     l1444 0311                     l1620 01B6  
                   l1612 01AA                     l1604 0199                     l1364 00EE  
                   l1356 00DB                     l1348 00BC                     l1436 02A6  
                   l1532 0301                     l1516 02EA                     l1700 0200  
                   l1294 022F                     l1278 0208                     l1374 03EF  
                   l1382 03D9                     l1390 0428                     l1454 0321  
                   l1446 0316                     l1630 0120                     l1622 00F8  
                   l1614 01AB                     l1606 019F                     l1550 0368  
                   l1542 035D                     l1366 00F3                     l1358 00DC  
                   l1438 02AE                     l1534 0307                     l1526 02F9  
                   l1296 0233                     l1288 0220                     l1376 03F1  
                   l1384 03DB                     l1392 042A                     l1456 0327  
                   l1640 0154                     l1632 012F                     l1624 00FA  
                   l1616 01B0                     l1608 01A4                     l1560 0372  
                   l1552 0369                     l1544 0363                     l1528 02FF  
                   l1298 0238                     l1378 03CA                     l1386 041D  
                   l1394 040B                     l1466 0330                     l1490 026C  
                   l1482 0253                     l1474 0247                     l1642 0159  
                   l1634 0141                     l1626 0106                     l1618 01B1  
                   l1570 0377                     l1562 0373                     l1554 036A  
                   l1546 0364                     l1538 0309                     l1650 02C4  
                   l1388 0427                     l1396 0415                     l1492 026E  
                   l1484 0257                     l1476 024C                     l1636 014F  
                   l1628 0114                     l1580 0166                     l1572 0378  
                   l1564 0374                     l1556 036B                     l1548 0367  
                   l1660 02DF                     l1652 02CE                     l1644 02B7  
                   l1398 0416                     l1494 0272                     l1486 025C  
                   l1478 0251                     l1638 0150                     l1590 017D  
                   l1582 016C                     l1574 015C                     l1566 0375  
                   l1558 036C                     l1654 02CF                     l1670 01CB  
                   l1662 01B8                     l1496 0278                     l1488 0262  
                   l1592 0181                     l1584 0170                     l1576 015F  
                   l1568 0376                     l1656 02D6                     l1648 02C0  
                   l1680 01D9                     l1672 01CC                     l1664 01B9  
                   l1594 0187                     l1586 0176                     l1578 0165  
                   l1658 02DB                     l1690 01EC                     l1682 01DF  
                   l1674 01CF                     l1666 01C7                     l1596 0188  
                   l1588 0177                     l1692 01F0                     l1684 01E0  
                   l1676 01D0                     l1668 01CA                     l1598 018E  
                   l1686 01E9                     l1694 01F4                     l1678 01D1  
                   l1696 01F9                     l1688 01EB                     l1698 01FF  
                   ?_up1 0070                     ?_up2 0070                     ?_isr 0070  
                   ?_win 0070                     u1000 025C                     u1001 025B  
                   u1010 0262                     u1011 0261                     u1020 026C  
                   u1100 01B0                     u1021 026B                     u1101 01AF  
                   u1030 0280                     u1110 01B6                     u1031 027F  
                   u1111 01B5                     u1120 0106                     u1040 02EA  
                   u1200 02CE                     u1025 0268                     u1121 0105  
                   u1041 02E9                     u1201 02CD                     u1130 0114  
                   u1050 02F4                     u1210 01D9                     u1131 0113  
                   u1051 02F3                     u1211 01D8                     u1140 0120  
                   u1060 02FF                     u1220 01DF                     u1141 011F  
                   u1061 02FE                     u1221 01DE                     u1150 012F  
                   u1070 0307                     u1230 01E9                     u1151 012E  
                   u1071 0306                     u1231 01E8                     u1160 0141  
                   u1080 01A4                     u1240 01F9                     u1161 0140  
                   u1081 01A3                     u1241 01F8                     u1170 014F  
                   u1090 01AA                     u1250 01FF                     u1171 014E  
                   u1091 01A9                     u1251 01FE                     u1180 0159  
                   u1181 0158                     u1190 02BF                     u1191 02BE  
                   u1357 01C1                     _PEIE 005E                     _TMR1 000E  
         ?_updateDisplay 0070          __end_of_NUMBERS 03C4                     _main 01B8  
                   btemp 007E                     start 000A        ___bmul@multiplier 0074  
                  ??_up1 0072                    ??_up2 0072                    ??_isr 0070  
                  ??_win 0075       onPressed@pressTime 0076                    ?_main 0070  
        __end_of___awdiv 00F8                    _EEADR 010D          ___awdiv@divisor 0072  
                  _T1CON 0010                    i1l209 0038                    i1l219 008A  
        ___awdiv@counter 0076                    _PORTB 0006                    _PORTC 0007  
                  _TRISA 0085                    _TRISB 0086                    _TRISC 0087  
        __end_of_onClick 0334                    _clear 0437                    _down1 041D  
                  _down2 040B                    _score 002A                    _setup 035D  
                  fpbase 0017                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 000B             __end_of_main 0203  
                 ??_main 003F                   ?_clear 0070                   _ADCON0 001F  
                 ?_down1 0070                   ?_down2 0070          ??_updateDisplay 007B  
                 _EEDATA 010C                   _EECON1 018C                   _EECON2 018D  
       ___awdiv@dividend 0074                   ?_setup 0070                   _DIGITS 03C4  
                 i1l1710 0036                   i1l1702 001F                   i1l1720 0051  
                 i1l1712 003E                   i1l1704 0023                   i1l1730 006F  
                 i1l1722 0057                   i1l1714 003F                   i1l1706 002A  
                 i1l1732 0075                   i1l1724 005D                   i1l1716 0045  
                 i1l1708 0030                   i1l1734 007B                   i1l1726 0063  
                 i1l1718 004B                   i1l1736 007F                   i1l1728 0069  
                 u130_20 0051                   u130_21 0050                   i1l1738 0084  
                 u131_20 005D                   u131_21 005C                   u132_20 0069  
                 u132_21 0068                   u133_20 0075                   u133_21 0074  
                 u134_20 0084                   u126_20 0023                   u134_21 0083  
                 u126_21 0022                   u127_20 0030                   u127_21 002F  
                 u128_20 003E                   u128_21 003D                   u129_20 0045  
                 u129_21 0044         __end_of__fptable 001F      updateDisplay@number 003D  
                 ___bmul 03F6                ??___awdiv 0076                   _change 037D  
                 _button 002F         ___awdiv@quotient 0078                   _timers 0020  
                 fp__up1 001A                   fp__up2 0019                   fp__win 0018  
              ??_onClick 0077                   fptable 0012                   fptotal 000E  
                 saved_w 007E            _calcDigit$382 0038             _checkButtons 00F8  
__end_of__initialization 0010      ___bmul@multiplicand 0072           __pcstackCOMMON 0070  
          __end_of_clear 043F            __end_of_down1 042F            __end_of_down2 041D  
          __end_of_setup 037D            onClick@action 0076           _OPTION_REGbits 0081  
                ??_clear 0075                  ??_down1 0072                  ??_down2 0072  
                ??_setup 0072               __pbssBANK0 0020     onPressed@pressAction 0078  
             __pmaintext 01B8                  ?___bmul 0072                  ?_change 0070  
             __pintentry 0004               calcDigit@d 003C               calcDigit@u 003A  
      __end_of_calcDigit 02B7                  _NUMBERS 03BA               __stringtab 03B4  
      __end_of_getNumber 030B               _loadMemory 015C                  ___awdiv 0091  
                __ptext1 02B7                  __ptext2 02E2                  __ptext3 0285  
                __ptext4 03F6                  __ptext5 0091                  __ptext6 035D  
                __ptext7 015C                  __ptext8 00F8                  __ptext9 0246  
                _onClick 030B                _T1CONbits 0010        __end_of_onPressed 0285  
                clrloop0 0430     end_of_initialization 0010               _saveMemory 039B  
           onPressed@btn 0079                _PORTAbits 0005                _PORTCbits 0007  
           _isSaveMemory 0035    __end_of_updateDisplay 02E2           __end_of_DIGITS 03CA  
         calcDigit@dozen 007A           calcDigit@value 003B            ?_updateMemory 0072  
            ?_loadMemory 0070               onClick@btn 0077           __end_of___bmul 040B  
         __end_of_change 039B      start_initialization 000B              __end_of_up1 03E0  
            __end_of_up2 03F6              __end_of_isr 0091              __end_of_win 035D  
            ?_saveMemory 0070           ??_updateMemory 0073       updateDisplay@digit 003E  
               ??___bmul 0073                 ??_change 0072          onPressed@action 0075  
              ___latbits 0000            __pcstackBANK0 0036        __size_of__fptable 000D  
              _calcDigit 0285                __pfunctab 0012                 ?___awdiv 0072  
              _getNumber 02E2                __pstrings 03B4                 ?_onClick 0076  
              change@aux 0072               ?_calcDigit 007A                _onPressed 0246  
      interrupt_function 0004                clear_ram0 042F                 _PIE1bits 008C  
               _PIR1bits 000C               ?_getNumber 0070                fp__change 001D  
            __stringbase 03B9               _ADCON1bits 009F     __end_of_updateMemory 0246  
          ?_checkButtons 0070               ?_onPressed 0075         _checkButtons$357 007B  
             _EECON1bits 018C             ??_loadMemory 0072                entry__up1 001A  
              entry__up2 0019       __end_of__stringtab 03BA                 __fptable 0012  
         ??_checkButtons 007A                 __ptext10 0437                 __ptext11 037D  
               __ptext20 001F                 __ptext12 030B                 __ptext13 040B  
               __ptext14 041D                 __ptext15 03CA                 __ptext16 03E0  
               __ptext17 0334                 __ptext18 039B                 __ptext19 0203  
            ??_calcDigit 0036       __end_of_loadMemory 01B8             ??_saveMemory 0075  
               _rxClocks 0033                 fp__clear 001E                 fp__down1 001B  
               fp__down2 001C              ??_getNumber 007B       __end_of_saveMemory 03B4  
             _INTCONbits 000B              ??_onPressed 0079                 intlevel1 0012  
              stringcode 03B4                 stringdir 03B4                 stringtab 03B4  
          _updateDisplay 02B7               _STATUSbits 0003             _updateMemory 0203  
       updateMemory@addr 0074          updateMemory@mem 0073  
