

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Mon Jul 22 14:15:12 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F870
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	intentry,global,class=CODE,delta=2
    28                           	psect	functab,global,class=ENTRY,delta=2
    29                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    30                           	dabs	1,0x7E,2
    31     0000                     
    32                           ; Generated 12/10/2023 GMT
    33                           ; 
    34                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution. Publication is not required when
    48                           ;        this file is used in an embedded application.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC16F870 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66     0000                     	;# 
    67     0001                     	;# 
    68     0002                     	;# 
    69     0003                     	;# 
    70     0004                     	;# 
    71     0005                     	;# 
    72     0006                     	;# 
    73     0007                     	;# 
    74     000A                     	;# 
    75     000B                     	;# 
    76     000C                     	;# 
    77     000D                     	;# 
    78     000E                     	;# 
    79     000E                     	;# 
    80     000F                     	;# 
    81     0010                     	;# 
    82     0011                     	;# 
    83     0012                     	;# 
    84     0015                     	;# 
    85     0015                     	;# 
    86     0016                     	;# 
    87     0017                     	;# 
    88     0018                     	;# 
    89     0019                     	;# 
    90     001A                     	;# 
    91     001E                     	;# 
    92     001F                     	;# 
    93     0081                     	;# 
    94     0085                     	;# 
    95     0086                     	;# 
    96     0087                     	;# 
    97     008C                     	;# 
    98     008D                     	;# 
    99     008E                     	;# 
   100     0092                     	;# 
   101     0098                     	;# 
   102     0099                     	;# 
   103     009E                     	;# 
   104     009F                     	;# 
   105     010C                     	;# 
   106     010D                     	;# 
   107     010E                     	;# 
   108     010F                     	;# 
   109     018C                     	;# 
   110     018D                     	;# 
   111     0000                     	;# 
   112     0001                     	;# 
   113     0002                     	;# 
   114     0003                     	;# 
   115     0004                     	;# 
   116     0005                     	;# 
   117     0006                     	;# 
   118     0007                     	;# 
   119     000A                     	;# 
   120     000B                     	;# 
   121     000C                     	;# 
   122     000D                     	;# 
   123     000E                     	;# 
   124     000E                     	;# 
   125     000F                     	;# 
   126     0010                     	;# 
   127     0011                     	;# 
   128     0012                     	;# 
   129     0015                     	;# 
   130     0015                     	;# 
   131     0016                     	;# 
   132     0017                     	;# 
   133     0018                     	;# 
   134     0019                     	;# 
   135     001A                     	;# 
   136     001E                     	;# 
   137     001F                     	;# 
   138     0081                     	;# 
   139     0085                     	;# 
   140     0086                     	;# 
   141     0087                     	;# 
   142     008C                     	;# 
   143     008D                     	;# 
   144     008E                     	;# 
   145     0092                     	;# 
   146     0098                     	;# 
   147     0099                     	;# 
   148     009E                     	;# 
   149     009F                     	;# 
   150     010C                     	;# 
   151     010D                     	;# 
   152     010E                     	;# 
   153     010F                     	;# 
   154     018C                     	;# 
   155     018D                     	;# 
   156     0000                     	;# 
   157     0001                     	;# 
   158     0002                     	;# 
   159     0003                     	;# 
   160     0004                     	;# 
   161     0005                     	;# 
   162     0006                     	;# 
   163     0007                     	;# 
   164     000A                     	;# 
   165     000B                     	;# 
   166     000C                     	;# 
   167     000D                     	;# 
   168     000E                     	;# 
   169     000E                     	;# 
   170     000F                     	;# 
   171     0010                     	;# 
   172     0011                     	;# 
   173     0012                     	;# 
   174     0015                     	;# 
   175     0015                     	;# 
   176     0016                     	;# 
   177     0017                     	;# 
   178     0018                     	;# 
   179     0019                     	;# 
   180     001A                     	;# 
   181     001E                     	;# 
   182     001F                     	;# 
   183     0081                     	;# 
   184     0085                     	;# 
   185     0086                     	;# 
   186     0087                     	;# 
   187     008C                     	;# 
   188     008D                     	;# 
   189     008E                     	;# 
   190     0092                     	;# 
   191     0098                     	;# 
   192     0099                     	;# 
   193     009E                     	;# 
   194     009F                     	;# 
   195     010C                     	;# 
   196     010D                     	;# 
   197     010E                     	;# 
   198     010F                     	;# 
   199     018C                     	;# 
   200     018D                     	;# 
   201     0000                     	;# 
   202     0001                     	;# 
   203     0002                     	;# 
   204     0003                     	;# 
   205     0004                     	;# 
   206     0005                     	;# 
   207     0006                     	;# 
   208     0007                     	;# 
   209     000A                     	;# 
   210     000B                     	;# 
   211     000C                     	;# 
   212     000D                     	;# 
   213     000E                     	;# 
   214     000E                     	;# 
   215     000F                     	;# 
   216     0010                     	;# 
   217     0011                     	;# 
   218     0012                     	;# 
   219     0015                     	;# 
   220     0015                     	;# 
   221     0016                     	;# 
   222     0017                     	;# 
   223     0018                     	;# 
   224     0019                     	;# 
   225     001A                     	;# 
   226     001E                     	;# 
   227     001F                     	;# 
   228     0081                     	;# 
   229     0085                     	;# 
   230     0086                     	;# 
   231     0087                     	;# 
   232     008C                     	;# 
   233     008D                     	;# 
   234     008E                     	;# 
   235     0092                     	;# 
   236     0098                     	;# 
   237     0099                     	;# 
   238     009E                     	;# 
   239     009F                     	;# 
   240     010C                     	;# 
   241     010D                     	;# 
   242     010E                     	;# 
   243     010F                     	;# 
   244     018C                     	;# 
   245     018D                     	;# 
   246     0000                     	;# 
   247     0001                     	;# 
   248     0002                     	;# 
   249     0003                     	;# 
   250     0004                     	;# 
   251     0005                     	;# 
   252     0006                     	;# 
   253     0007                     	;# 
   254     000A                     	;# 
   255     000B                     	;# 
   256     000C                     	;# 
   257     000D                     	;# 
   258     000E                     	;# 
   259     000E                     	;# 
   260     000F                     	;# 
   261     0010                     	;# 
   262     0011                     	;# 
   263     0012                     	;# 
   264     0015                     	;# 
   265     0015                     	;# 
   266     0016                     	;# 
   267     0017                     	;# 
   268     0018                     	;# 
   269     0019                     	;# 
   270     001A                     	;# 
   271     001E                     	;# 
   272     001F                     	;# 
   273     0081                     	;# 
   274     0085                     	;# 
   275     0086                     	;# 
   276     0087                     	;# 
   277     008C                     	;# 
   278     008D                     	;# 
   279     008E                     	;# 
   280     0092                     	;# 
   281     0098                     	;# 
   282     0099                     	;# 
   283     009E                     	;# 
   284     009F                     	;# 
   285     010C                     	;# 
   286     010D                     	;# 
   287     010E                     	;# 
   288     010F                     	;# 
   289     018C                     	;# 
   290     018D                     	;# 
   291                           
   292                           	psect	strings
   293     0263                     __pstrings:
   294     0263                     stringtab:
   295     0263                     __stringtab:
   296     0263                     stringcode:	
   297                           ;	String table - string pointers are 1 byte each
   298                           
   299     0263                     stringdir:
   300     0263  3002               	movlw	high stringdir
   301     0264  008A               	movwf	10
   302     0265  0804               	movf	4,w
   303     0266  0A84               	incf	4,f
   304     0267  0782               	addwf	2,f
   305     0268                     __stringbase:
   306     0268  3400               	retlw	0
   307     0269                     __end_of__stringtab:
   308     0269                     _NUMBERS:
   309     0269  347E               	retlw	126
   310     026A  340C               	retlw	12
   311     026B  34B6               	retlw	182
   312     026C  349E               	retlw	158
   313     026D  34CC               	retlw	204
   314     026E  34DA               	retlw	218
   315     026F  34FA               	retlw	250
   316     0270  340E               	retlw	14
   317     0271  34FE               	retlw	254
   318     0272  349E               	retlw	158
   319     0273                     __end_of_NUMBERS:
   320     0273                     _DIGITS:
   321     0273  343E               	retlw	62
   322     0274  343D               	retlw	61
   323     0275  343B               	retlw	59
   324     0276  3437               	retlw	55
   325     0277  342F               	retlw	47
   326     0278  341F               	retlw	31
   327     0279                     __end_of_DIGITS:
   328     000E                     _TMR1	set	14
   329     000C                     _PIR1bits	set	12
   330     0005                     _PORTAbits	set	5
   331     0007                     _PORTCbits	set	7
   332     000B                     _INTCONbits	set	11
   333     001F                     _ADCON0	set	31
   334     0010                     _T1CONbits	set	16
   335     0010                     _T1CON	set	16
   336     0007                     _PORTC	set	7
   337     0006                     _PORTB	set	6
   338     005F                     _GIE	set	95
   339     005E                     _PEIE	set	94
   340     008C                     _PIE1bits	set	140
   341     0081                     _OPTION_REGbits	set	129
   342     009F                     _ADCON1bits	set	159
   343     0087                     _TRISC	set	135
   344     0086                     _TRISB	set	134
   345     0085                     _TRISA	set	133
   346                           
   347                           	psect	cinit
   348     000B                     start_initialization:	
   349                           ; #config settings
   350                           
   351     000B                     __initialization:
   352                           
   353                           ; Clear objects allocated to COMMON
   354     000B  01FB               	clrf	__pbssCOMMON& (0+127)
   355                           
   356                           ; Clear objects allocated to BANK0
   357     000C  1383               	bcf	3,7	;select IRP bank0
   358     000D  3020               	movlw	low __pbssBANK0
   359     000E  0084               	movwf	4
   360     000F  302D               	movlw	low (__pbssBANK0+13)
   361     0010  22C6               	fcall	clear_ram0
   362     0011                     end_of_initialization:	
   363                           ;End of C runtime variable initialization code
   364                           
   365     0011                     __end_of__initialization:
   366     0011  0183               	clrf	3
   367     0012  2924               	ljmp	_main	;jump to C main() function
   368                           
   369                           	psect	bssCOMMON
   370     007B                     __pbssCOMMON:
   371     007B                     _button:
   372     007B                     	ds	1
   373                           
   374                           	psect	bssBANK0
   375     0020                     __pbssBANK0:
   376     0020                     _timers:
   377     0020                     	ds	6
   378     0026                     _score:
   379     0026                     	ds	5
   380     002B                     _rxClocks:
   381     002B                     	ds	2
   382                           
   383                           	psect	clrtext
   384     02C6                     clear_ram0:	
   385                           ;	Called with FSR containing the base address, and
   386                           ;	W with the last address+1
   387                           
   388     02C6  0064               	clrwdt	;clear the watchdog before getting into this loop
   389     02C7                     clrloop0:
   390     02C7  0180               	clrf	0	;clear RAM location pointed to by FSR
   391     02C8  0A84               	incf	4,f	;increment pointer
   392     02C9  0604               	xorwf	4,w	;XOR with final address
   393     02CA  1903               	btfsc	3,2	;have we reached the end yet?
   394     02CB  3400               	retlw	0	;all done for this memory range, return
   395     02CC  0604               	xorwf	4,w	;XOR again to restore value
   396     02CD  2AC7               	goto	clrloop0	;do the next byte
   397                           
   398                           	psect	cstackCOMMON
   399     0070                     __pcstackCOMMON:
   400     0070                     ?_checkButtons:
   401     0070                     ?_updateDisplay:	
   402                           ; 1 bytes @ 0x0
   403                           
   404     0070                     ?_up2:	
   405                           ; 1 bytes @ 0x0
   406                           
   407     0070                     ?_up1:	
   408                           ; 1 bytes @ 0x0
   409                           
   410     0070                     ?_setup:	
   411                           ; 1 bytes @ 0x0
   412                           
   413     0070                     ?_main:	
   414                           ; 1 bytes @ 0x0
   415                           
   416     0070                     ?_down1:	
   417                           ; 1 bytes @ 0x0
   418                           
   419     0070                     ?_down2:	
   420                           ; 1 bytes @ 0x0
   421                           
   422     0070                     ?_change:	
   423                           ; 1 bytes @ 0x0
   424                           
   425     0070                     ?_win:	
   426                           ; 1 bytes @ 0x0
   427                           
   428     0070                     ?_getNumber:	
   429                           ; 1 bytes @ 0x0
   430                           
   431     0070                     ?_isr:	
   432                           ; 1 bytes @ 0x0
   433                           
   434     0070                     ??_isr:	
   435                           ; 1 bytes @ 0x0
   436                           
   437                           
   438                           ; 1 bytes @ 0x0
   439     0070                     	ds	2
   440     0072                     ??_up2:
   441     0072                     ??_up1:	
   442                           ; 1 bytes @ 0x2
   443                           
   444     0072                     ??_setup:	
   445                           ; 1 bytes @ 0x2
   446                           
   447     0072                     ??_down1:	
   448                           ; 1 bytes @ 0x2
   449                           
   450     0072                     ??_down2:	
   451                           ; 1 bytes @ 0x2
   452                           
   453     0072                     ??_change:	
   454                           ; 1 bytes @ 0x2
   455                           
   456     0072                     ??_win:	
   457                           ; 1 bytes @ 0x2
   458                           
   459     0072                     ?___bmul:	
   460                           ; 1 bytes @ 0x2
   461                           
   462     0072                     ?___awdiv:	
   463                           ; 1 bytes @ 0x2
   464                           
   465     0072                     change@aux:	
   466                           ; 2 bytes @ 0x2
   467                           
   468     0072                     ___bmul@multiplicand:	
   469                           ; 1 bytes @ 0x2
   470                           
   471     0072                     ___awdiv@divisor:	
   472                           ; 1 bytes @ 0x2
   473                           
   474                           
   475                           ; 2 bytes @ 0x2
   476     0072                     	ds	1
   477     0073                     ?_checkButton:
   478     0073                     ??___bmul:	
   479                           ; 1 bytes @ 0x3
   480                           
   481     0073                     checkButton@action:	
   482                           ; 1 bytes @ 0x3
   483                           
   484     0073                     ___bmul@product:	
   485                           ; 1 bytes @ 0x3
   486                           
   487                           
   488                           ; 1 bytes @ 0x3
   489     0073                     	ds	1
   490     0074                     ??_checkButton:
   491     0074                     checkButton@btn:	
   492                           ; 1 bytes @ 0x4
   493                           
   494     0074                     ___bmul@multiplier:	
   495                           ; 1 bytes @ 0x4
   496                           
   497     0074                     ___awdiv@dividend:	
   498                           ; 1 bytes @ 0x4
   499                           
   500                           
   501                           ; 2 bytes @ 0x4
   502     0074                     	ds	1
   503     0075                     ??_checkButtons:
   504                           
   505                           ; 1 bytes @ 0x5
   506     0075                     	ds	1
   507     0076                     ??___awdiv:
   508     0076                     _checkButtons$327:	
   509                           ; 1 bytes @ 0x6
   510                           
   511     0076                     ___awdiv@counter:	
   512                           ; 1 bytes @ 0x6
   513                           
   514                           
   515                           ; 1 bytes @ 0x6
   516     0076                     	ds	1
   517     0077                     ___awdiv@sign:
   518                           
   519                           ; 1 bytes @ 0x7
   520     0077                     	ds	1
   521     0078                     ___awdiv@quotient:
   522                           
   523                           ; 2 bytes @ 0x8
   524     0078                     	ds	2
   525     007A                     ?_calcDigit:
   526     007A                     calcDigit@dozen:	
   527                           ; 1 bytes @ 0xA
   528                           
   529                           
   530                           ; 1 bytes @ 0xA
   531     007A                     	ds	1
   532     007B                     ??_updateDisplay:
   533     007B                     ??_getNumber:	
   534                           ; 1 bytes @ 0xB
   535                           
   536                           
   537                           	psect	cstackBANK0
   538     002D                     __pcstackBANK0:	
   539                           ; 1 bytes @ 0xB
   540                           
   541     002D                     ??_calcDigit:
   542                           
   543                           ; 1 bytes @ 0x0
   544     002D                     	ds	2
   545     002F                     _calcDigit$349:
   546                           
   547                           ; 2 bytes @ 0x2
   548     002F                     	ds	2
   549     0031                     calcDigit@u:
   550                           
   551                           ; 1 bytes @ 0x4
   552     0031                     	ds	1
   553     0032                     calcDigit@value:
   554                           
   555                           ; 1 bytes @ 0x5
   556     0032                     	ds	1
   557     0033                     calcDigit@d:
   558                           
   559                           ; 1 bytes @ 0x6
   560     0033                     	ds	1
   561     0034                     updateDisplay@number:
   562                           
   563                           ; 1 bytes @ 0x7
   564     0034                     	ds	1
   565     0035                     updateDisplay@digit:
   566                           
   567                           ; 1 bytes @ 0x8
   568     0035                     	ds	1
   569     0036                     ??_main:
   570                           
   571                           ; 1 bytes @ 0x9
   572     0036                     	ds	3
   573                           
   574                           	psect	maintext
   575     0124                     __pmaintext:	
   576 ;;
   577 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   578 ;;
   579 ;; *************** function _main *****************
   580 ;; Defined at:
   581 ;;		line 28 in file "main.c"
   582 ;; Parameters:    Size  Location     Type
   583 ;;		None
   584 ;; Auto vars:     Size  Location     Type
   585 ;;		None
   586 ;; Return value:  Size  Location     Type
   587 ;;                  1    wreg      void 
   588 ;; Registers used:
   589 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   590 ;; Tracked objects:
   591 ;;		On entry : B00/0
   592 ;;		On exit  : 0/0
   593 ;;		Unchanged: 0/0
   594 ;; Data sizes:     COMMON   BANK0   BANK1
   595 ;;      Params:         0       0       0
   596 ;;      Locals:         0       0       0
   597 ;;      Temps:          0       3       0
   598 ;;      Totals:         0       3       0
   599 ;;Total ram usage:        3 bytes
   600 ;; Hardware stack levels required when called: 5
   601 ;; This function calls:
   602 ;;		_checkButtons
   603 ;;		_setup
   604 ;;		_up1
   605 ;;		_up2
   606 ;;		_updateDisplay
   607 ;; This function is called by:
   608 ;;		Startup code after reset
   609 ;; This function uses a non-reentrant model
   610 ;;
   611                           
   612     0124                     _main:	
   613                           ;psect for function _main
   614                           
   615     0124                     l1237:	
   616                           ;incstack = 0
   617                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   618                           
   619                           
   620                           ;main.c: 30:     setup();
   621     0124  222B               	fcall	_setup
   622     0125                     l1239:
   623                           
   624                           ;main.c: 32:     _delay((unsigned long)((500)*(12800000L/4000.0)));
   625     0125  3009               	movlw	9
   626     0126  1283               	bcf	3,5	;RP0=0, select bank0
   627     0127  1303               	bcf	3,6	;RP1=0, select bank0
   628     0128  00B8               	movwf	??_main+2
   629     0129  301E               	movlw	30
   630     012A  00B7               	movwf	??_main+1
   631     012B  30E4               	movlw	228
   632     012C  00B6               	movwf	??_main
   633     012D                     u937:
   634     012D  0BB6               	decfsz	??_main,f
   635     012E  292D               	goto	u937
   636     012F  0BB7               	decfsz	??_main+1,f
   637     0130  292D               	goto	u937
   638     0131  0BB8               	decfsz	??_main+2,f
   639     0132  292D               	goto	u937
   640     0133                     l1241:
   641                           
   642                           ;main.c: 35:         checkButtons();
   643     0133  2086               	fcall	_checkButtons
   644     0134                     l1243:
   645                           
   646                           ;main.c: 36:         updateDisplay();
   647     0134  2188               	fcall	_updateDisplay
   648     0135                     l1245:
   649                           
   650                           ;main.c: 37:         if (timers[2] == 0 && rxClocks > 0) {
   651     0135  1283               	bcf	3,5	;RP0=0, select bank0
   652     0136  1303               	bcf	3,6	;RP1=0, select bank0
   653     0137  0824               	movf	_timers+4,w	;volatile
   654     0138  0425               	iorwf	_timers+5,w	;volatile
   655     0139  1D03               	btfss	3,2
   656     013A  293C               	goto	u851
   657     013B  293D               	goto	u850
   658     013C                     u851:
   659     013C  2933               	goto	l1241
   660     013D                     u850:
   661     013D                     l1247:
   662     013D  082B               	movf	_rxClocks,w	;volatile
   663     013E  042C               	iorwf	_rxClocks+1,w	;volatile
   664     013F  1903               	btfsc	3,2
   665     0140  2942               	goto	u861
   666     0141  2943               	goto	u860
   667     0142                     u861:
   668     0142  2933               	goto	l1241
   669     0143                     u860:
   670     0143                     l1249:
   671                           
   672                           ;main.c: 38:             PORTCbits.RC7 = 0;
   673     0143  1387               	bcf	7,7	;volatile
   674     0144                     l1251:
   675                           
   676                           ;main.c: 39:             if (rxClocks > 200) up2();
   677     0144  3000               	movlw	0
   678     0145  022C               	subwf	_rxClocks+1,w	;volatile
   679     0146  30C9               	movlw	201
   680     0147  1903               	skipnz
   681     0148  022B               	subwf	_rxClocks,w	;volatile
   682     0149  1C03               	skipc
   683     014A  294C               	goto	u871
   684     014B  294D               	goto	u870
   685     014C                     u871:
   686     014C  294F               	goto	l1255
   687     014D                     u870:
   688     014D                     l1253:
   689     014D  229E               	fcall	_up2
   690     014E  2950               	goto	l1257
   691     014F                     l1255:
   692     014F  228E               	fcall	_up1
   693     0150                     l1257:
   694                           
   695                           ;main.c: 41:             rxClocks = 0;
   696     0150  1283               	bcf	3,5	;RP0=0, select bank0
   697     0151  1303               	bcf	3,6	;RP1=0, select bank0
   698     0152  01AB               	clrf	_rxClocks	;volatile
   699     0153  01AC               	clrf	_rxClocks+1	;volatile
   700     0154  2933               	goto	l1241
   701     0155  280A               	ljmp	start
   702     0156                     __end_of_main:
   703                           
   704                           	psect	text1
   705     0188                     __ptext1:	
   706 ;; *************** function _updateDisplay *****************
   707 ;; Defined at:
   708 ;;		line 17 in file "display.c"
   709 ;; Parameters:    Size  Location     Type
   710 ;;		None
   711 ;; Auto vars:     Size  Location     Type
   712 ;;  digit           1    8[BANK0 ] unsigned char 
   713 ;;  number          1    7[BANK0 ] unsigned char 
   714 ;; Return value:  Size  Location     Type
   715 ;;                  1    wreg      void 
   716 ;; Registers used:
   717 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   718 ;; Tracked objects:
   719 ;;		On entry : 0/0
   720 ;;		On exit  : 0/0
   721 ;;		Unchanged: 0/0
   722 ;; Data sizes:     COMMON   BANK0   BANK1
   723 ;;      Params:         0       0       0
   724 ;;      Locals:         0       2       0
   725 ;;      Temps:          0       0       0
   726 ;;      Totals:         0       2       0
   727 ;;Total ram usage:        2 bytes
   728 ;; Hardware stack levels used: 1
   729 ;; Hardware stack levels required when called: 4
   730 ;; This function calls:
   731 ;;		_getNumber
   732 ;; This function is called by:
   733 ;;		_main
   734 ;; This function uses a non-reentrant model
   735 ;;
   736                           
   737     0188                     _updateDisplay:	
   738                           ;psect for function _updateDisplay
   739                           
   740     0188                     l1219:	
   741                           ;incstack = 0
   742                           ; Regs used in _updateDisplay: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   743                           
   744                           
   745                           ;display.c: 18:     if (timers[0]) return;
   746     0188  1283               	bcf	3,5	;RP0=0, select bank0
   747     0189  1303               	bcf	3,6	;RP1=0, select bank0
   748     018A  0820               	movf	_timers,w	;volatile
   749     018B  0421               	iorwf	_timers+1,w	;volatile
   750     018C  1903               	btfsc	3,2
   751     018D  298F               	goto	u831
   752     018E  2990               	goto	u830
   753     018F                     u831:
   754     018F  2991               	goto	l1223
   755     0190                     u830:
   756     0190  29B2               	goto	l155
   757     0191                     l1223:
   758                           
   759                           ;display.c: 19:     timers[0] = 10;
   760     0191  300A               	movlw	10
   761     0192  00A0               	movwf	_timers	;volatile
   762     0193  3000               	movlw	0
   763     0194  00A1               	movwf	_timers+1	;volatile
   764     0195                     l1225:
   765                           
   766                           ;display.c: 21:     if (++score.digit > 5) score.digit = 0;
   767     0195  3001               	movlw	1
   768     0196  00FF               	movwf	btemp+1
   769     0197  087F               	movf	btemp+1,w
   770     0198  07AA               	addwf	_score+4,f
   771     0199  3006               	movlw	6
   772     019A  022A               	subwf	_score+4,w
   773     019B  1C03               	skipc
   774     019C  299E               	goto	u841
   775     019D  299F               	goto	u840
   776     019E                     u841:
   777     019E  29A0               	goto	l1229
   778     019F                     u840:
   779     019F                     l1227:
   780     019F  01AA               	clrf	_score+4
   781     01A0                     l1229:
   782                           
   783                           ;display.c: 22:     char number = NUMBERS[getNumber()];
   784     01A0  21B3               	fcall	_getNumber
   785     01A1  3E01               	addlw	low ((_NUMBERS-__stringbase)| (0+32768))
   786     01A2  0084               	movwf	4
   787     01A3  2263               	fcall	stringdir
   788     01A4  1283               	bcf	3,5	;RP0=0, select bank0
   789     01A5  1303               	bcf	3,6	;RP1=0, select bank0
   790     01A6  00B4               	movwf	updateDisplay@number
   791     01A7                     l1231:
   792                           
   793                           ;display.c: 23:     char digit = DIGITS[score.digit];
   794     01A7  082A               	movf	_score+4,w
   795     01A8  3E0B               	addlw	low ((_DIGITS-__stringbase)| (0+32768))
   796     01A9  0084               	movwf	4
   797     01AA  2263               	fcall	stringdir
   798     01AB  00B5               	movwf	updateDisplay@digit
   799     01AC                     l1233:
   800                           
   801                           ;display.c: 25:     PORTC = (PORTC & 0b10000000) | digit;
   802     01AC  0807               	movf	7,w	;volatile
   803     01AD  3980               	andlw	128
   804     01AE  0435               	iorwf	updateDisplay@digit,w
   805     01AF  0087               	movwf	7	;volatile
   806     01B0                     l1235:
   807                           
   808                           ;display.c: 26:     PORTB = number;
   809     01B0  0834               	movf	updateDisplay@number,w
   810     01B1  0086               	movwf	6	;volatile
   811     01B2                     l155:
   812     01B2  0008               	return
   813     01B3                     __end_of_updateDisplay:
   814                           
   815                           	psect	text2
   816     01B3                     __ptext2:	
   817 ;; *************** function _getNumber *****************
   818 ;; Defined at:
   819 ;;		line 9 in file "display.c"
   820 ;; Parameters:    Size  Location     Type
   821 ;;		None
   822 ;; Auto vars:     Size  Location     Type
   823 ;;		None
   824 ;; Return value:  Size  Location     Type
   825 ;;                  1    wreg      unsigned char 
   826 ;; Registers used:
   827 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   828 ;; Tracked objects:
   829 ;;		On entry : 0/0
   830 ;;		On exit  : 0/0
   831 ;;		Unchanged: 0/0
   832 ;; Data sizes:     COMMON   BANK0   BANK1
   833 ;;      Params:         0       0       0
   834 ;;      Locals:         0       0       0
   835 ;;      Temps:          0       0       0
   836 ;;      Totals:         0       0       0
   837 ;;Total ram usage:        0 bytes
   838 ;; Hardware stack levels used: 1
   839 ;; Hardware stack levels required when called: 3
   840 ;; This function calls:
   841 ;;		_calcDigit
   842 ;; This function is called by:
   843 ;;		_updateDisplay
   844 ;; This function uses a non-reentrant model
   845 ;;
   846                           
   847     01B3                     _getNumber:	
   848                           ;psect for function _getNumber
   849                           
   850     01B3                     l1141:	
   851                           ;incstack = 0
   852                           ; Regs used in _getNumber: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   853                           
   854                           
   855                           ;display.c: 10:     if (score.digit < 2) return calcDigit(score.team1, 0);
   856     01B3  3002               	movlw	2
   857     01B4  1283               	bcf	3,5	;RP0=0, select bank0
   858     01B5  1303               	bcf	3,6	;RP1=0, select bank0
   859     01B6  022A               	subwf	_score+4,w
   860     01B7  1803               	skipnc
   861     01B8  29BA               	goto	u731
   862     01B9  29BB               	goto	u730
   863     01BA                     u731:
   864     01BA  29BF               	goto	l1147
   865     01BB                     u730:
   866     01BB                     l1143:
   867     01BB  01FA               	clrf	calcDigit@dozen
   868     01BC  0826               	movf	_score,w
   869     01BD  2156               	fcall	_calcDigit
   870     01BE  29DB               	goto	l148
   871     01BF                     l1147:
   872                           
   873                           ;display.c: 11:     if (score.digit < 4) return calcDigit(score.team2, 2);
   874     01BF  3004               	movlw	4
   875     01C0  022A               	subwf	_score+4,w
   876     01C1  1803               	skipnc
   877     01C2  29C4               	goto	u741
   878     01C3  29C5               	goto	u740
   879     01C4                     u741:
   880     01C4  29CA               	goto	l1153
   881     01C5                     u740:
   882     01C5                     l1149:
   883     01C5  3002               	movlw	2
   884     01C6  00FA               	movwf	calcDigit@dozen
   885     01C7  0827               	movf	_score+1,w
   886     01C8  2156               	fcall	_calcDigit
   887     01C9  29DB               	goto	l148
   888     01CA                     l1153:
   889                           
   890                           ;display.c: 12:     if (score.digit == 4) return score.win1;
   891     01CA  3004               	movlw	4
   892     01CB  062A               	xorwf	_score+4,w
   893     01CC  1D03               	btfss	3,2
   894     01CD  29CF               	goto	u751
   895     01CE  29D0               	goto	u750
   896     01CF                     u751:
   897     01CF  29D2               	goto	l1159
   898     01D0                     u750:
   899     01D0                     l1155:
   900     01D0  0828               	movf	_score+2,w
   901     01D1  29DB               	goto	l148
   902     01D2                     l1159:
   903                           
   904                           ;display.c: 13:     if (score.digit == 5) return score.win2;
   905     01D2  3005               	movlw	5
   906     01D3  062A               	xorwf	_score+4,w
   907     01D4  1D03               	btfss	3,2
   908     01D5  29D7               	goto	u761
   909     01D6  29D8               	goto	u760
   910     01D7                     u761:
   911     01D7  29DA               	goto	l1165
   912     01D8                     u760:
   913     01D8                     l1161:
   914     01D8  0829               	movf	_score+3,w
   915     01D9  29DB               	goto	l148
   916     01DA                     l1165:
   917                           
   918                           ;display.c: 14:     return 0;
   919     01DA  3000               	movlw	0
   920     01DB                     l148:
   921     01DB  0008               	return
   922     01DC                     __end_of_getNumber:
   923                           
   924                           	psect	text3
   925     0156                     __ptext3:	
   926 ;; *************** function _calcDigit *****************
   927 ;; Defined at:
   928 ;;		line 3 in file "display.c"
   929 ;; Parameters:    Size  Location     Type
   930 ;;  value           1    wreg     char 
   931 ;;  dozen           1   10[COMMON] unsigned char 
   932 ;; Auto vars:     Size  Location     Type
   933 ;;  value           1    5[BANK0 ] char 
   934 ;;  d               1    6[BANK0 ] unsigned char 
   935 ;;  u               1    4[BANK0 ] unsigned char 
   936 ;; Return value:  Size  Location     Type
   937 ;;                  1    wreg      unsigned char 
   938 ;; Registers used:
   939 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   940 ;; Tracked objects:
   941 ;;		On entry : 0/0
   942 ;;		On exit  : 0/0
   943 ;;		Unchanged: 0/0
   944 ;; Data sizes:     COMMON   BANK0   BANK1
   945 ;;      Params:         1       0       0
   946 ;;      Locals:         0       5       0
   947 ;;      Temps:          0       2       0
   948 ;;      Totals:         1       7       0
   949 ;;Total ram usage:        8 bytes
   950 ;; Hardware stack levels used: 1
   951 ;; Hardware stack levels required when called: 2
   952 ;; This function calls:
   953 ;;		___awdiv
   954 ;;		___bmul
   955 ;; This function is called by:
   956 ;;		_getNumber
   957 ;; This function uses a non-reentrant model
   958 ;;
   959                           
   960     0156                     _calcDigit:	
   961                           ;psect for function _calcDigit
   962                           
   963                           
   964                           ;incstack = 0
   965                           ; Regs used in _calcDigit: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   966                           ;calcDigit@value stored from wreg
   967     0156  1283               	bcf	3,5	;RP0=0, select bank0
   968     0157  1303               	bcf	3,6	;RP1=0, select bank0
   969     0158  00B2               	movwf	calcDigit@value
   970     0159                     l1103:
   971                           
   972                           ;display.c: 4:     char d = (char) value / 10;
   973     0159  300A               	movlw	10
   974     015A  00F2               	movwf	___awdiv@divisor
   975     015B  3000               	movlw	0
   976     015C  00F3               	movwf	___awdiv@divisor+1
   977     015D  0832               	movf	calcDigit@value,w
   978     015E  00AD               	movwf	??_calcDigit
   979     015F  01AE               	clrf	??_calcDigit+1
   980     0160  082D               	movf	??_calcDigit,w
   981     0161  00F4               	movwf	___awdiv@dividend
   982     0162  082E               	movf	??_calcDigit+1,w
   983     0163  00F5               	movwf	___awdiv@dividend+1
   984     0164  201F               	fcall	___awdiv
   985     0165  0872               	movf	?___awdiv,w
   986     0166  1283               	bcf	3,5	;RP0=0, select bank0
   987     0167  1303               	bcf	3,6	;RP1=0, select bank0
   988     0168  00B3               	movwf	calcDigit@d
   989                           
   990                           ;display.c: 5:     char u = (char) value - d * 10;
   991     0169  30F6               	movlw	246
   992     016A  00F2               	movwf	___bmul@multiplicand
   993     016B  0833               	movf	calcDigit@d,w
   994     016C  2279               	fcall	___bmul
   995     016D  1283               	bcf	3,5	;RP0=0, select bank0
   996     016E  1303               	bcf	3,6	;RP1=0, select bank0
   997     016F  0732               	addwf	calcDigit@value,w
   998     0170  00B1               	movwf	calcDigit@u
   999     0171                     l1105:
  1000                           
  1001                           ;display.c: 6:     return score.digit == dozen ? d : u;
  1002     0171  082A               	movf	_score+4,w
  1003     0172  067A               	xorwf	calcDigit@dozen,w
  1004     0173  1903               	skipnz
  1005     0174  2976               	goto	u681
  1006     0175  2977               	goto	u680
  1007     0176                     u681:
  1008     0176  297F               	goto	l1109
  1009     0177                     u680:
  1010     0177                     l1107:
  1011     0177  0831               	movf	calcDigit@u,w
  1012     0178  00AD               	movwf	??_calcDigit
  1013     0179  01AE               	clrf	??_calcDigit+1
  1014     017A  082D               	movf	??_calcDigit,w
  1015     017B  00AF               	movwf	_calcDigit$349
  1016     017C  082E               	movf	??_calcDigit+1,w
  1017     017D  00B0               	movwf	_calcDigit$349+1
  1018     017E  2986               	goto	l143
  1019     017F                     l1109:
  1020     017F  0833               	movf	calcDigit@d,w
  1021     0180  00AD               	movwf	??_calcDigit
  1022     0181  01AE               	clrf	??_calcDigit+1
  1023     0182  082D               	movf	??_calcDigit,w
  1024     0183  00AF               	movwf	_calcDigit$349
  1025     0184  082E               	movf	??_calcDigit+1,w
  1026     0185  00B0               	movwf	_calcDigit$349+1
  1027     0186                     l143:
  1028     0186  082F               	movf	_calcDigit$349,w
  1029     0187                     l144:
  1030     0187  0008               	return
  1031     0188                     __end_of_calcDigit:
  1032                           
  1033                           	psect	text4
  1034     0279                     __ptext4:	
  1035 ;; *************** function ___bmul *****************
  1036 ;; Defined at:
  1037 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul8.c"
  1038 ;; Parameters:    Size  Location     Type
  1039 ;;  multiplier      1    wreg     unsigned char 
  1040 ;;  multiplicand    1    2[COMMON] unsigned char 
  1041 ;; Auto vars:     Size  Location     Type
  1042 ;;  multiplier      1    4[COMMON] unsigned char 
  1043 ;;  product         1    3[COMMON] unsigned char 
  1044 ;; Return value:  Size  Location     Type
  1045 ;;                  1    wreg      unsigned char 
  1046 ;; Registers used:
  1047 ;;		wreg, status,2, status,0, btemp+1
  1048 ;; Tracked objects:
  1049 ;;		On entry : 0/0
  1050 ;;		On exit  : 0/0
  1051 ;;		Unchanged: 0/0
  1052 ;; Data sizes:     COMMON   BANK0   BANK1
  1053 ;;      Params:         1       0       0
  1054 ;;      Locals:         2       0       0
  1055 ;;      Temps:          0       0       0
  1056 ;;      Totals:         3       0       0
  1057 ;;Total ram usage:        3 bytes
  1058 ;; Hardware stack levels used: 1
  1059 ;; Hardware stack levels required when called: 1
  1060 ;; This function calls:
  1061 ;;		Nothing
  1062 ;; This function is called by:
  1063 ;;		_calcDigit
  1064 ;; This function uses a non-reentrant model
  1065 ;;
  1066                           
  1067     0279                     ___bmul:	
  1068                           ;psect for function ___bmul
  1069                           
  1070                           
  1071                           ;incstack = 0
  1072                           ; Regs used in ___bmul: [wreg+status,2+status,0+btemp+1]
  1073                           ;___bmul@multiplier stored from wreg
  1074     0279  00F4               	movwf	___bmul@multiplier
  1075     027A                     l1007:
  1076     027A  01F3               	clrf	___bmul@product
  1077     027B                     l1009:
  1078     027B  1C74               	btfss	___bmul@multiplier,0
  1079     027C  2A7E               	goto	u471
  1080     027D  2A7F               	goto	u470
  1081     027E                     u471:
  1082     027E  2A83               	goto	l1013
  1083     027F                     u470:
  1084     027F                     l1011:
  1085     027F  0872               	movf	___bmul@multiplicand,w
  1086     0280  00FF               	movwf	btemp+1
  1087     0281  087F               	movf	btemp+1,w
  1088     0282  07F3               	addwf	___bmul@product,f
  1089     0283                     l1013:
  1090     0283  1003               	clrc
  1091     0284  0DF2               	rlf	___bmul@multiplicand,f
  1092     0285                     l1015:
  1093     0285  1003               	clrc
  1094     0286  0CF4               	rrf	___bmul@multiplier,f
  1095     0287                     l1017:
  1096     0287  0874               	movf	___bmul@multiplier,w
  1097     0288  1D03               	btfss	3,2
  1098     0289  2A8B               	goto	u481
  1099     028A  2A8C               	goto	u480
  1100     028B                     u481:
  1101     028B  2A7B               	goto	l1009
  1102     028C                     u480:
  1103     028C                     l1019:
  1104     028C  0873               	movf	___bmul@product,w
  1105     028D                     l299:
  1106     028D  0008               	return
  1107     028E                     __end_of___bmul:
  1108                           
  1109                           	psect	text5
  1110     001F                     __ptext5:	
  1111 ;; *************** function ___awdiv *****************
  1112 ;; Defined at:
  1113 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awdiv.c"
  1114 ;; Parameters:    Size  Location     Type
  1115 ;;  divisor         2    2[COMMON] int 
  1116 ;;  dividend        2    4[COMMON] int 
  1117 ;; Auto vars:     Size  Location     Type
  1118 ;;  quotient        2    8[COMMON] int 
  1119 ;;  sign            1    7[COMMON] unsigned char 
  1120 ;;  counter         1    6[COMMON] unsigned char 
  1121 ;; Return value:  Size  Location     Type
  1122 ;;                  2    2[COMMON] int 
  1123 ;; Registers used:
  1124 ;;		wreg, status,2, status,0, btemp+1
  1125 ;; Tracked objects:
  1126 ;;		On entry : 0/0
  1127 ;;		On exit  : 0/0
  1128 ;;		Unchanged: 0/0
  1129 ;; Data sizes:     COMMON   BANK0   BANK1
  1130 ;;      Params:         4       0       0
  1131 ;;      Locals:         4       0       0
  1132 ;;      Temps:          0       0       0
  1133 ;;      Totals:         8       0       0
  1134 ;;Total ram usage:        8 bytes
  1135 ;; Hardware stack levels used: 1
  1136 ;; Hardware stack levels required when called: 1
  1137 ;; This function calls:
  1138 ;;		Nothing
  1139 ;; This function is called by:
  1140 ;;		_calcDigit
  1141 ;; This function uses a non-reentrant model
  1142 ;;
  1143                           
  1144     001F                     ___awdiv:	
  1145                           ;psect for function ___awdiv
  1146                           
  1147     001F                     l1023:	
  1148                           ;incstack = 0
  1149                           ; Regs used in ___awdiv: [wreg+status,2+status,0+btemp+1]
  1150                           
  1151     001F  01F7               	clrf	___awdiv@sign
  1152     0020                     l1025:
  1153     0020  1FF3               	btfss	___awdiv@divisor+1,7
  1154     0021  2823               	goto	u491
  1155     0022  2824               	goto	u490
  1156     0023                     u491:
  1157     0023  282B               	goto	l1031
  1158     0024                     u490:
  1159     0024                     l1027:
  1160     0024  09F2               	comf	___awdiv@divisor,f
  1161     0025  09F3               	comf	___awdiv@divisor+1,f
  1162     0026  0AF2               	incf	___awdiv@divisor,f
  1163     0027  1903               	skipnz
  1164     0028  0AF3               	incf	___awdiv@divisor+1,f
  1165     0029                     l1029:
  1166     0029  01F7               	clrf	___awdiv@sign
  1167     002A  0AF7               	incf	___awdiv@sign,f
  1168     002B                     l1031:
  1169     002B  1FF5               	btfss	___awdiv@dividend+1,7
  1170     002C  282E               	goto	u501
  1171     002D  282F               	goto	u500
  1172     002E                     u501:
  1173     002E  2838               	goto	l1037
  1174     002F                     u500:
  1175     002F                     l1033:
  1176     002F  09F4               	comf	___awdiv@dividend,f
  1177     0030  09F5               	comf	___awdiv@dividend+1,f
  1178     0031  0AF4               	incf	___awdiv@dividend,f
  1179     0032  1903               	skipnz
  1180     0033  0AF5               	incf	___awdiv@dividend+1,f
  1181     0034                     l1035:
  1182     0034  3001               	movlw	1
  1183     0035  00FF               	movwf	btemp+1
  1184     0036  087F               	movf	btemp+1,w
  1185     0037  06F7               	xorwf	___awdiv@sign,f
  1186     0038                     l1037:
  1187     0038  01F8               	clrf	___awdiv@quotient
  1188     0039  01F9               	clrf	___awdiv@quotient+1
  1189     003A                     l1039:
  1190     003A  0872               	movf	___awdiv@divisor,w
  1191     003B  0473               	iorwf	___awdiv@divisor+1,w
  1192     003C  1903               	btfsc	3,2
  1193     003D  283F               	goto	u511
  1194     003E  2840               	goto	u510
  1195     003F                     u511:
  1196     003F  2877               	goto	l1059
  1197     0040                     u510:
  1198     0040                     l1041:
  1199     0040  01F6               	clrf	___awdiv@counter
  1200     0041  0AF6               	incf	___awdiv@counter,f
  1201     0042  284E               	goto	l1047
  1202     0043                     l1043:
  1203     0043  3001               	movlw	1
  1204     0044                     u525:
  1205     0044  1003               	clrc
  1206     0045  0DF2               	rlf	___awdiv@divisor,f
  1207     0046  0DF3               	rlf	___awdiv@divisor+1,f
  1208     0047  3EFF               	addlw	-1
  1209     0048  1D03               	skipz
  1210     0049  2844               	goto	u525
  1211     004A                     l1045:
  1212     004A  3001               	movlw	1
  1213     004B  00FF               	movwf	btemp+1
  1214     004C  087F               	movf	btemp+1,w
  1215     004D  07F6               	addwf	___awdiv@counter,f
  1216     004E                     l1047:
  1217     004E  1FF3               	btfss	___awdiv@divisor+1,7
  1218     004F  2851               	goto	u531
  1219     0050  2852               	goto	u530
  1220     0051                     u531:
  1221     0051  2843               	goto	l1043
  1222     0052                     u530:
  1223     0052                     l1049:
  1224     0052  3001               	movlw	1
  1225     0053                     u545:
  1226     0053  1003               	clrc
  1227     0054  0DF8               	rlf	___awdiv@quotient,f
  1228     0055  0DF9               	rlf	___awdiv@quotient+1,f
  1229     0056  3EFF               	addlw	-1
  1230     0057  1D03               	skipz
  1231     0058  2853               	goto	u545
  1232     0059  0873               	movf	___awdiv@divisor+1,w
  1233     005A  0275               	subwf	___awdiv@dividend+1,w
  1234     005B  1D03               	skipz
  1235     005C  285F               	goto	u555
  1236     005D  0872               	movf	___awdiv@divisor,w
  1237     005E  0274               	subwf	___awdiv@dividend,w
  1238     005F                     u555:
  1239     005F  1C03               	skipc
  1240     0060  2862               	goto	u551
  1241     0061  2863               	goto	u550
  1242     0062                     u551:
  1243     0062  286A               	goto	l1055
  1244     0063                     u550:
  1245     0063                     l1051:
  1246     0063  0872               	movf	___awdiv@divisor,w
  1247     0064  02F4               	subwf	___awdiv@dividend,f
  1248     0065  0873               	movf	___awdiv@divisor+1,w
  1249     0066  1C03               	skipc
  1250     0067  03F5               	decf	___awdiv@dividend+1,f
  1251     0068  02F5               	subwf	___awdiv@dividend+1,f
  1252     0069                     l1053:
  1253     0069  1478               	bsf	___awdiv@quotient,0
  1254     006A                     l1055:
  1255     006A  3001               	movlw	1
  1256     006B                     u565:
  1257     006B  1003               	clrc
  1258     006C  0CF3               	rrf	___awdiv@divisor+1,f
  1259     006D  0CF2               	rrf	___awdiv@divisor,f
  1260     006E  3EFF               	addlw	-1
  1261     006F  1D03               	skipz
  1262     0070  286B               	goto	u565
  1263     0071                     l1057:
  1264     0071  3001               	movlw	1
  1265     0072  02F6               	subwf	___awdiv@counter,f
  1266     0073  1D03               	btfss	3,2
  1267     0074  2876               	goto	u571
  1268     0075  2877               	goto	u570
  1269     0076                     u571:
  1270     0076  2852               	goto	l1049
  1271     0077                     u570:
  1272     0077                     l1059:
  1273     0077  0877               	movf	___awdiv@sign,w
  1274     0078  1903               	btfsc	3,2
  1275     0079  287B               	goto	u581
  1276     007A  287C               	goto	u580
  1277     007B                     u581:
  1278     007B  2881               	goto	l1063
  1279     007C                     u580:
  1280     007C                     l1061:
  1281     007C  09F8               	comf	___awdiv@quotient,f
  1282     007D  09F9               	comf	___awdiv@quotient+1,f
  1283     007E  0AF8               	incf	___awdiv@quotient,f
  1284     007F  1903               	skipnz
  1285     0080  0AF9               	incf	___awdiv@quotient+1,f
  1286     0081                     l1063:
  1287     0081  0879               	movf	___awdiv@quotient+1,w
  1288     0082  00F3               	movwf	?___awdiv+1
  1289     0083  0878               	movf	___awdiv@quotient,w
  1290     0084  00F2               	movwf	?___awdiv
  1291     0085                     l426:
  1292     0085  0008               	return
  1293     0086                     __end_of___awdiv:
  1294                           
  1295                           	psect	text6
  1296     022B                     __ptext6:	
  1297 ;; *************** function _setup *****************
  1298 ;; Defined at:
  1299 ;;		line 3 in file "main.c"
  1300 ;; Parameters:    Size  Location     Type
  1301 ;;		None
  1302 ;; Auto vars:     Size  Location     Type
  1303 ;;		None
  1304 ;; Return value:  Size  Location     Type
  1305 ;;                  1    wreg      void 
  1306 ;; Registers used:
  1307 ;;		wreg, status,2, status,0
  1308 ;; Tracked objects:
  1309 ;;		On entry : 0/0
  1310 ;;		On exit  : 0/0
  1311 ;;		Unchanged: 0/0
  1312 ;; Data sizes:     COMMON   BANK0   BANK1
  1313 ;;      Params:         0       0       0
  1314 ;;      Locals:         0       0       0
  1315 ;;      Temps:          0       0       0
  1316 ;;      Totals:         0       0       0
  1317 ;;Total ram usage:        0 bytes
  1318 ;; Hardware stack levels used: 1
  1319 ;; Hardware stack levels required when called: 1
  1320 ;; This function calls:
  1321 ;;		Nothing
  1322 ;; This function is called by:
  1323 ;;		_main
  1324 ;; This function uses a non-reentrant model
  1325 ;;
  1326                           
  1327     022B                     _setup:	
  1328                           ;psect for function _setup
  1329                           
  1330     022B                     l1169:	
  1331                           ;incstack = 0
  1332                           ; Regs used in _setup: [wreg+status,2+status,0]
  1333                           
  1334                           
  1335                           ;main.c: 4:     TRISA = 0b11111111;
  1336     022B  30FF               	movlw	255
  1337     022C  1683               	bsf	3,5	;RP0=1, select bank1
  1338     022D  1303               	bcf	3,6	;RP1=0, select bank1
  1339     022E  0085               	movwf	5	;volatile
  1340                           
  1341                           ;main.c: 5:     TRISB = 0b00000001;
  1342     022F  3001               	movlw	1
  1343     0230  0086               	movwf	6	;volatile
  1344     0231                     l1171:
  1345                           
  1346                           ;main.c: 6:     TRISC = 0b00000000;
  1347     0231  0187               	clrf	7	;volatile
  1348     0232                     l1173:
  1349                           
  1350                           ;main.c: 7:     PORTB = 0;
  1351     0232  1283               	bcf	3,5	;RP0=0, select bank0
  1352     0233  1303               	bcf	3,6	;RP1=0, select bank0
  1353     0234  0186               	clrf	6	;volatile
  1354     0235                     l1175:
  1355                           
  1356                           ;main.c: 8:     PORTC = 0;
  1357     0235  0187               	clrf	7	;volatile
  1358     0236                     l1177:
  1359                           
  1360                           ;main.c: 10:     T1CON = 0;
  1361     0236  0190               	clrf	16	;volatile
  1362     0237                     l1179:
  1363                           
  1364                           ;main.c: 11:     T1CONbits.TMR1CS = 0;
  1365     0237  1090               	bcf	16,1	;volatile
  1366     0238                     l1181:
  1367                           
  1368                           ;main.c: 12:     T1CONbits.TMR1ON = 1;
  1369     0238  1410               	bsf	16,0	;volatile
  1370     0239                     l1183:
  1371                           
  1372                           ;main.c: 14:     ADCON0 = 0;
  1373     0239  019F               	clrf	31	;volatile
  1374     023A                     l1185:
  1375                           
  1376                           ;main.c: 15:     ADCON1bits.PCFG = 0b0110;
  1377     023A  1683               	bsf	3,5	;RP0=1, select bank1
  1378     023B  1303               	bcf	3,6	;RP1=0, select bank1
  1379     023C  081F               	movf	31,w	;volatile
  1380     023D  39F0               	andlw	-16
  1381     023E  3806               	iorlw	6
  1382     023F  009F               	movwf	31	;volatile
  1383     0240                     l1187:
  1384                           
  1385                           ;main.c: 17:     OPTION_REGbits.nRBPU = 0;
  1386     0240  1381               	bcf	1,7	;volatile
  1387     0241                     l1189:
  1388                           
  1389                           ;main.c: 18:     OPTION_REGbits.INTEDG = 0;
  1390     0241  1301               	bcf	1,6	;volatile
  1391     0242                     l1191:
  1392                           
  1393                           ;main.c: 20:     INTCONbits.INTE = 1;
  1394     0242  160B               	bsf	11,4	;volatile
  1395     0243                     l1193:
  1396                           
  1397                           ;main.c: 21:     PIE1bits.TMR1IE = 1;
  1398     0243  140C               	bsf	12,0	;volatile
  1399     0244                     l1195:
  1400                           
  1401                           ;main.c: 22:     PEIE = 1;
  1402     0244  170B               	bsf	11,6	;volatile
  1403     0245                     l1197:
  1404                           
  1405                           ;main.c: 23:     GIE = 1;
  1406     0245  178B               	bsf	11,7	;volatile
  1407     0246                     l1199:
  1408                           
  1409                           ;main.c: 25:     rxClocks = 0;
  1410     0246  1283               	bcf	3,5	;RP0=0, select bank0
  1411     0247  1303               	bcf	3,6	;RP1=0, select bank0
  1412     0248  01AB               	clrf	_rxClocks	;volatile
  1413     0249  01AC               	clrf	_rxClocks+1	;volatile
  1414     024A                     l55:
  1415     024A  0008               	return
  1416     024B                     __end_of_setup:
  1417                           
  1418                           	psect	text7
  1419     0086                     __ptext7:	
  1420 ;; *************** function _checkButtons *****************
  1421 ;; Defined at:
  1422 ;;		line 45 in file "buttons.c"
  1423 ;; Parameters:    Size  Location     Type
  1424 ;;		None
  1425 ;; Auto vars:     Size  Location     Type
  1426 ;;		None
  1427 ;; Return value:  Size  Location     Type
  1428 ;;                  1    wreg      void 
  1429 ;; Registers used:
  1430 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1431 ;; Tracked objects:
  1432 ;;		On entry : 0/0
  1433 ;;		On exit  : 0/0
  1434 ;;		Unchanged: 0/0
  1435 ;; Data sizes:     COMMON   BANK0   BANK1
  1436 ;;      Params:         0       0       0
  1437 ;;      Locals:         1       0       0
  1438 ;;      Temps:          1       0       0
  1439 ;;      Totals:         2       0       0
  1440 ;;Total ram usage:        2 bytes
  1441 ;; Hardware stack levels used: 1
  1442 ;; Hardware stack levels required when called: 3
  1443 ;; This function calls:
  1444 ;;		_checkButton
  1445 ;; This function is called by:
  1446 ;;		_main
  1447 ;; This function uses a non-reentrant model
  1448 ;;
  1449                           
  1450     0086                     _checkButtons:	
  1451                           ;psect for function _checkButtons
  1452                           
  1453     0086                     l1201:	
  1454                           ;incstack = 0
  1455                           ; Regs used in _checkButtons: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1456                           
  1457                           
  1458                           ;buttons.c: 46:     button.status = checkButton(PORTAbits.RA0, up1)
  1459     0086  01F6               	clrf	_checkButtons$327
  1460     0087  0AF6               	incf	_checkButtons$327,f
  1461     0088                     l1203:
  1462     0088  3003               	movlw	(low (fp__up1-fpbase))& (0+255)
  1463     0089  00F3               	movwf	checkButton@action
  1464     008A  1283               	bcf	3,5	;RP0=0, select bank0
  1465     008B  1303               	bcf	3,6	;RP1=0, select bank0
  1466     008C  0805               	movf	5,w	;volatile
  1467     008D  3901               	andlw	1
  1468     008E  2204               	fcall	_checkButton
  1469     008F  3A00               	xorlw	0
  1470     0090  1D03               	skipz
  1471     0091  2893               	goto	u771
  1472     0092  2894               	goto	u770
  1473     0093                     u771:
  1474     0093  28D8               	goto	l1217
  1475     0094                     u770:
  1476     0094                     l1205:
  1477     0094  3002               	movlw	(low (fp__up2-fpbase))& (0+255)
  1478     0095  00F3               	movwf	checkButton@action
  1479     0096  1283               	bcf	3,5	;RP0=0, select bank0
  1480     0097  1303               	bcf	3,6	;RP1=0, select bank0
  1481     0098  0C05               	rrf	5,w	;volatile
  1482     0099  00F5               	movwf	??_checkButtons
  1483     009A  0C75               	rrf	??_checkButtons,w
  1484     009B  3901               	andlw	1
  1485     009C  2204               	fcall	_checkButton
  1486     009D  3A00               	xorlw	0
  1487     009E  1D03               	skipz
  1488     009F  28A1               	goto	u781
  1489     00A0  28A2               	goto	u780
  1490     00A1                     u781:
  1491     00A1  28D8               	goto	l1217
  1492     00A2                     u780:
  1493     00A2                     l1207:
  1494     00A2  3004               	movlw	(low (fp__down1-fpbase))& (0+255)
  1495     00A3  00F3               	movwf	checkButton@action
  1496     00A4  1283               	bcf	3,5	;RP0=0, select bank0
  1497     00A5  1303               	bcf	3,6	;RP1=0, select bank0
  1498     00A6  0C05               	rrf	5,w	;volatile
  1499     00A7  3901               	andlw	1
  1500     00A8  2204               	fcall	_checkButton
  1501     00A9  3A00               	xorlw	0
  1502     00AA  1D03               	skipz
  1503     00AB  28AD               	goto	u791
  1504     00AC  28AE               	goto	u790
  1505     00AD                     u791:
  1506     00AD  28D8               	goto	l1217
  1507     00AE                     u790:
  1508     00AE                     l1209:
  1509     00AE  3005               	movlw	(low (fp__down2-fpbase))& (0+255)
  1510     00AF  00F3               	movwf	checkButton@action
  1511     00B0  1283               	bcf	3,5	;RP0=0, select bank0
  1512     00B1  1303               	bcf	3,6	;RP1=0, select bank0
  1513     00B2  0C05               	rrf	5,w	;volatile
  1514     00B3  00F5               	movwf	??_checkButtons
  1515     00B4  0CF5               	rrf	??_checkButtons,f
  1516     00B5  0C75               	rrf	??_checkButtons,w
  1517     00B6  3901               	andlw	1
  1518     00B7  2204               	fcall	_checkButton
  1519     00B8  3A00               	xorlw	0
  1520     00B9  1D03               	skipz
  1521     00BA  28BC               	goto	u801
  1522     00BB  28BD               	goto	u800
  1523     00BC                     u801:
  1524     00BC  28D8               	goto	l1217
  1525     00BD                     u800:
  1526     00BD                     l1211:
  1527     00BD  3006               	movlw	(low (fp__change-fpbase))& (0+255)
  1528     00BE  00F3               	movwf	checkButton@action
  1529     00BF  1283               	bcf	3,5	;RP0=0, select bank0
  1530     00C0  1303               	bcf	3,6	;RP1=0, select bank0
  1531     00C1  0E05               	swapf	5,w	;volatile
  1532     00C2  3901               	andlw	1
  1533     00C3  2204               	fcall	_checkButton
  1534     00C4  3A00               	xorlw	0
  1535     00C5  1D03               	skipz
  1536     00C6  28C8               	goto	u811
  1537     00C7  28C9               	goto	u810
  1538     00C8                     u811:
  1539     00C8  28D8               	goto	l1217
  1540     00C9                     u810:
  1541     00C9                     l1213:
  1542     00C9  3001               	movlw	(low (fp__win-fpbase))& (0+255)
  1543     00CA  00F3               	movwf	checkButton@action
  1544     00CB  1283               	bcf	3,5	;RP0=0, select bank0
  1545     00CC  1303               	bcf	3,6	;RP1=0, select bank0
  1546     00CD  0E05               	swapf	5,w	;volatile
  1547     00CE  00F5               	movwf	??_checkButtons
  1548     00CF  0C75               	rrf	??_checkButtons,w
  1549     00D0  3901               	andlw	1
  1550     00D1  2204               	fcall	_checkButton
  1551     00D2  3A00               	xorlw	0
  1552     00D3  1D03               	skipz
  1553     00D4  28D6               	goto	u821
  1554     00D5  28D7               	goto	u820
  1555     00D6                     u821:
  1556     00D6  28D8               	goto	l1217
  1557     00D7                     u820:
  1558     00D7                     l1215:
  1559     00D7  01F6               	clrf	_checkButtons$327
  1560     00D8                     l1217:
  1561     00D8  0876               	movf	_checkButtons$327,w
  1562     00D9  00FB               	movwf	_button
  1563     00DA                     l121:
  1564     00DA  0008               	return
  1565     00DB                     __end_of_checkButtons:
  1566                           
  1567                           	psect	text8
  1568     0204                     __ptext8:	
  1569 ;; *************** function _checkButton *****************
  1570 ;; Defined at:
  1571 ;;		line 3 in file "buttons.c"
  1572 ;; Parameters:    Size  Location     Type
  1573 ;;  btn             1    wreg     unsigned char 
  1574 ;;  action          1    3[COMMON] PTR FTN()void 
  1575 ;;		 -> win(1), change(1), down2(1), down1(1), 
  1576 ;;		 -> up1(1), up2(1), 
  1577 ;; Auto vars:     Size  Location     Type
  1578 ;;  btn             1    4[COMMON] unsigned char 
  1579 ;; Return value:  Size  Location     Type
  1580 ;;                  1    wreg      unsigned char 
  1581 ;; Registers used:
  1582 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1583 ;; Tracked objects:
  1584 ;;		On entry : 0/0
  1585 ;;		On exit  : 0/0
  1586 ;;		Unchanged: 0/0
  1587 ;; Data sizes:     COMMON   BANK0   BANK1
  1588 ;;      Params:         1       0       0
  1589 ;;      Locals:         1       0       0
  1590 ;;      Temps:          0       0       0
  1591 ;;      Totals:         2       0       0
  1592 ;;Total ram usage:        2 bytes
  1593 ;; Hardware stack levels used: 1
  1594 ;; Hardware stack levels required when called: 2
  1595 ;; This function calls:
  1596 ;;		_change
  1597 ;;		_down1
  1598 ;;		_down2
  1599 ;;		_up1
  1600 ;;		_up2
  1601 ;;		_win
  1602 ;; This function is called by:
  1603 ;;		_checkButtons
  1604 ;; This function uses a non-reentrant model
  1605 ;;
  1606                           
  1607     0204                     _checkButton:	
  1608                           ;psect for function _checkButton
  1609                           
  1610                           
  1611                           ;incstack = 0
  1612                           ; Regs used in _checkButton: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1613                           ;checkButton@btn stored from wreg
  1614     0204  00F4               	movwf	checkButton@btn
  1615     0205                     l1113:
  1616                           
  1617                           ;buttons.c: 4:     if (!!(btn || btn)) return 0;
  1618     0205  0874               	movf	checkButton@btn,w
  1619     0206  1D03               	btfss	3,2
  1620     0207  2A09               	goto	u691
  1621     0208  2A0A               	goto	u690
  1622     0209                     u691:
  1623     0209  2A0F               	goto	l1117
  1624     020A                     u690:
  1625     020A                     l1115:
  1626     020A  0874               	movf	checkButton@btn,w
  1627     020B  1903               	btfsc	3,2
  1628     020C  2A0E               	goto	u701
  1629     020D  2A0F               	goto	u700
  1630     020E                     u701:
  1631     020E  2A11               	goto	l1121
  1632     020F                     u700:
  1633     020F                     l1117:
  1634     020F  3000               	movlw	0
  1635     0210  2A2A               	goto	l86
  1636     0211                     l1121:
  1637                           
  1638                           ;buttons.c: 5:     if (button.status == 1) {
  1639     0211  037B               	decf	_button,w
  1640     0212  1D03               	btfss	3,2
  1641     0213  2A15               	goto	u711
  1642     0214  2A16               	goto	u710
  1643     0215                     u711:
  1644     0215  2A1E               	goto	l1129
  1645     0216                     u710:
  1646     0216                     l1123:
  1647                           
  1648                           ;buttons.c: 6:         timers[1] = 100;
  1649     0216  3000               	movlw	0
  1650     0217  1283               	bcf	3,5	;RP0=0, select bank0
  1651     0218  1303               	bcf	3,6	;RP1=0, select bank0
  1652     0219  00A3               	movwf	_timers+3	;volatile
  1653     021A  3064               	movlw	100
  1654     021B  00A2               	movwf	_timers+2	;volatile
  1655     021C                     l1125:
  1656                           
  1657                           ;buttons.c: 7:         return 1;
  1658     021C  3001               	movlw	1
  1659     021D  2A2A               	goto	l86
  1660     021E                     l1129:
  1661                           
  1662                           ;buttons.c: 9:     if (timers[1])return 1;
  1663     021E  1283               	bcf	3,5	;RP0=0, select bank0
  1664     021F  1303               	bcf	3,6	;RP1=0, select bank0
  1665     0220  0822               	movf	_timers+2,w	;volatile
  1666     0221  0423               	iorwf	_timers+3,w	;volatile
  1667     0222  1903               	btfsc	3,2
  1668     0223  2A25               	goto	u721
  1669     0224  2A26               	goto	u720
  1670     0225                     u721:
  1671     0225  2A27               	goto	l1135
  1672     0226                     u720:
  1673     0226  2A1C               	goto	l1125
  1674     0227                     l1135:
  1675                           
  1676                           ;buttons.c: 11:     action();
  1677     0227  0873               	movf	checkButton@action,w
  1678     0228  2013               	fcall	fptable
  1679     0229  2A1C               	goto	l1125
  1680     022A                     l86:
  1681     022A  0008               	return
  1682     022B                     __end_of_checkButton:
  1683                           
  1684                           	psect	text9
  1685     024B                     __ptext9:	
  1686 ;; *************** function _change *****************
  1687 ;; Defined at:
  1688 ;;		line 31 in file "buttons.c"
  1689 ;; Parameters:    Size  Location     Type
  1690 ;;		None
  1691 ;; Auto vars:     Size  Location     Type
  1692 ;;  aux             1    2[COMMON] unsigned char 
  1693 ;; Return value:  Size  Location     Type
  1694 ;;                  1    wreg      void 
  1695 ;; Registers used:
  1696 ;;		wreg
  1697 ;; Tracked objects:
  1698 ;;		On entry : 0/0
  1699 ;;		On exit  : 0/0
  1700 ;;		Unchanged: 0/0
  1701 ;; Data sizes:     COMMON   BANK0   BANK1
  1702 ;;      Params:         0       0       0
  1703 ;;      Locals:         1       0       0
  1704 ;;      Temps:          0       0       0
  1705 ;;      Totals:         1       0       0
  1706 ;;Total ram usage:        1 bytes
  1707 ;; Hardware stack levels used: 1
  1708 ;; Hardware stack levels required when called: 1
  1709 ;; This function calls:
  1710 ;;		Nothing
  1711 ;; This function is called by:
  1712 ;;		_checkButtons
  1713 ;;		_checkButton
  1714 ;; This function uses a non-reentrant model
  1715 ;;
  1716                           
  1717     024B                     _change:	
  1718                           ;psect for function _change
  1719                           
  1720     024B                     l1083:	
  1721                           ;incstack = 0
  1722                           ; Regs used in _change: [wreg]
  1723                           
  1724                           
  1725                           ;buttons.c: 32:     if (score.team1 > 0 || score.team2 > 0) return;
  1726     024B  1283               	bcf	3,5	;RP0=0, select bank0
  1727     024C  1303               	bcf	3,6	;RP1=0, select bank0
  1728     024D  0826               	movf	_score,w
  1729     024E  3A80               	xorlw	128
  1730     024F  3E7F               	addlw	-129
  1731     0250  1803               	skipnc
  1732     0251  2A53               	goto	u631
  1733     0252  2A54               	goto	u630
  1734     0253                     u631:
  1735     0253  2A62               	goto	l110
  1736     0254                     u630:
  1737     0254                     l1085:
  1738     0254  0827               	movf	_score+1,w
  1739     0255  3A80               	xorlw	128
  1740     0256  3E7F               	addlw	-129
  1741     0257  1C03               	skipc
  1742     0258  2A5A               	goto	u641
  1743     0259  2A5B               	goto	u640
  1744     025A                     u641:
  1745     025A  2A5C               	goto	l1087
  1746     025B                     u640:
  1747     025B  2A62               	goto	l110
  1748     025C                     l1087:
  1749                           
  1750                           ;buttons.c: 33:     char aux = score.win1;
  1751     025C  0828               	movf	_score+2,w
  1752     025D  00F2               	movwf	change@aux
  1753                           
  1754                           ;buttons.c: 34:     score.win1 = score.win2;
  1755     025E  0829               	movf	_score+3,w
  1756     025F  00A8               	movwf	_score+2
  1757                           
  1758                           ;buttons.c: 35:     score.win2 = aux;
  1759     0260  0872               	movf	change@aux,w
  1760     0261  00A9               	movwf	_score+3
  1761     0262                     l110:
  1762     0262  0008               	return
  1763     0263                     __end_of_change:
  1764                           
  1765                           	psect	text10
  1766     02AE                     __ptext10:	
  1767 ;; *************** function _down2 *****************
  1768 ;; Defined at:
  1769 ;;		line 27 in file "buttons.c"
  1770 ;; Parameters:    Size  Location     Type
  1771 ;;		None
  1772 ;; Auto vars:     Size  Location     Type
  1773 ;;		None
  1774 ;; Return value:  Size  Location     Type
  1775 ;;                  1    wreg      void 
  1776 ;; Registers used:
  1777 ;;		wreg, status,2, status,0, btemp+1
  1778 ;; Tracked objects:
  1779 ;;		On entry : 0/0
  1780 ;;		On exit  : 0/0
  1781 ;;		Unchanged: 0/0
  1782 ;; Data sizes:     COMMON   BANK0   BANK1
  1783 ;;      Params:         0       0       0
  1784 ;;      Locals:         0       0       0
  1785 ;;      Temps:          0       0       0
  1786 ;;      Totals:         0       0       0
  1787 ;;Total ram usage:        0 bytes
  1788 ;; Hardware stack levels used: 1
  1789 ;; Hardware stack levels required when called: 1
  1790 ;; This function calls:
  1791 ;;		Nothing
  1792 ;; This function is called by:
  1793 ;;		_checkButtons
  1794 ;;		_checkButton
  1795 ;; This function uses a non-reentrant model
  1796 ;;
  1797                           
  1798     02AE                     _down2:	
  1799                           ;psect for function _down2
  1800                           
  1801     02AE                     l1079:	
  1802                           ;incstack = 0
  1803                           ; Regs used in _down2: [wreg+status,2+status,0+btemp+1]
  1804                           
  1805                           
  1806                           ;buttons.c: 28:     if (--score.team2 < 0) score.team2 = 0;
  1807     02AE  30FF               	movlw	255
  1808     02AF  00FF               	movwf	btemp+1
  1809     02B0  087F               	movf	btemp+1,w
  1810     02B1  1283               	bcf	3,5	;RP0=0, select bank0
  1811     02B2  1303               	bcf	3,6	;RP1=0, select bank0
  1812     02B3  07A7               	addwf	_score+1,f
  1813     02B4  1FA7               	btfss	_score+1,7
  1814     02B5  2AB7               	goto	u621
  1815     02B6  2AB8               	goto	u620
  1816     02B7                     u621:
  1817     02B7  2AB9               	goto	l104
  1818     02B8                     u620:
  1819     02B8                     l1081:
  1820     02B8  01A7               	clrf	_score+1
  1821     02B9                     l104:
  1822     02B9  0008               	return
  1823     02BA                     __end_of_down2:
  1824                           
  1825                           	psect	text11
  1826     02BA                     __ptext11:	
  1827 ;; *************** function _down1 *****************
  1828 ;; Defined at:
  1829 ;;		line 23 in file "buttons.c"
  1830 ;; Parameters:    Size  Location     Type
  1831 ;;		None
  1832 ;; Auto vars:     Size  Location     Type
  1833 ;;		None
  1834 ;; Return value:  Size  Location     Type
  1835 ;;                  1    wreg      void 
  1836 ;; Registers used:
  1837 ;;		wreg, status,2, status,0, btemp+1
  1838 ;; Tracked objects:
  1839 ;;		On entry : 0/0
  1840 ;;		On exit  : 0/0
  1841 ;;		Unchanged: 0/0
  1842 ;; Data sizes:     COMMON   BANK0   BANK1
  1843 ;;      Params:         0       0       0
  1844 ;;      Locals:         0       0       0
  1845 ;;      Temps:          0       0       0
  1846 ;;      Totals:         0       0       0
  1847 ;;Total ram usage:        0 bytes
  1848 ;; Hardware stack levels used: 1
  1849 ;; Hardware stack levels required when called: 1
  1850 ;; This function calls:
  1851 ;;		Nothing
  1852 ;; This function is called by:
  1853 ;;		_checkButtons
  1854 ;;		_checkButton
  1855 ;; This function uses a non-reentrant model
  1856 ;;
  1857                           
  1858     02BA                     _down1:	
  1859                           ;psect for function _down1
  1860                           
  1861     02BA                     l1075:	
  1862                           ;incstack = 0
  1863                           ; Regs used in _down1: [wreg+status,2+status,0+btemp+1]
  1864                           
  1865                           
  1866                           ;buttons.c: 24:     if (--score.team1 < 0) score.team1 = 0;
  1867     02BA  30FF               	movlw	255
  1868     02BB  00FF               	movwf	btemp+1
  1869     02BC  087F               	movf	btemp+1,w
  1870     02BD  1283               	bcf	3,5	;RP0=0, select bank0
  1871     02BE  1303               	bcf	3,6	;RP1=0, select bank0
  1872     02BF  07A6               	addwf	_score,f
  1873     02C0  1FA6               	btfss	_score,7
  1874     02C1  2AC3               	goto	u611
  1875     02C2  2AC4               	goto	u610
  1876     02C3                     u611:
  1877     02C3  2AC5               	goto	l100
  1878     02C4                     u610:
  1879     02C4                     l1077:
  1880     02C4  01A6               	clrf	_score
  1881     02C5                     l100:
  1882     02C5  0008               	return
  1883     02C6                     __end_of_down1:
  1884                           
  1885                           	psect	text12
  1886     028E                     __ptext12:	
  1887 ;; *************** function _up1 *****************
  1888 ;; Defined at:
  1889 ;;		line 15 in file "buttons.c"
  1890 ;; Parameters:    Size  Location     Type
  1891 ;;		None
  1892 ;; Auto vars:     Size  Location     Type
  1893 ;;		None
  1894 ;; Return value:  Size  Location     Type
  1895 ;;                  1    wreg      void 
  1896 ;; Registers used:
  1897 ;;		wreg, status,2, status,0, btemp+1
  1898 ;; Tracked objects:
  1899 ;;		On entry : 0/0
  1900 ;;		On exit  : 0/0
  1901 ;;		Unchanged: 0/0
  1902 ;; Data sizes:     COMMON   BANK0   BANK1
  1903 ;;      Params:         0       0       0
  1904 ;;      Locals:         0       0       0
  1905 ;;      Temps:          0       0       0
  1906 ;;      Totals:         0       0       0
  1907 ;;Total ram usage:        0 bytes
  1908 ;; Hardware stack levels used: 1
  1909 ;; Hardware stack levels required when called: 1
  1910 ;; This function calls:
  1911 ;;		Nothing
  1912 ;; This function is called by:
  1913 ;;		_main
  1914 ;;		_checkButtons
  1915 ;;		_checkButton
  1916 ;; This function uses a non-reentrant model
  1917 ;;
  1918                           
  1919     028E                     _up1:	
  1920                           ;psect for function _up1
  1921                           
  1922     028E                     l1071:	
  1923                           ;incstack = 0
  1924                           ; Regs used in _up1: [wreg+status,2+status,0+btemp+1]
  1925                           
  1926                           
  1927                           ;buttons.c: 16:     if (++score.team1 > 99) score.team1 = 99;
  1928     028E  3001               	movlw	1
  1929     028F  00FF               	movwf	btemp+1
  1930     0290  087F               	movf	btemp+1,w
  1931     0291  1283               	bcf	3,5	;RP0=0, select bank0
  1932     0292  1303               	bcf	3,6	;RP1=0, select bank0
  1933     0293  07A6               	addwf	_score,f
  1934     0294  0826               	movf	_score,w
  1935     0295  3A80               	xorlw	128
  1936     0296  3E1C               	addlw	-228
  1937     0297  1C03               	skipc
  1938     0298  2A9A               	goto	u601
  1939     0299  2A9B               	goto	u600
  1940     029A                     u601:
  1941     029A  2A9D               	goto	l92
  1942     029B                     u600:
  1943     029B                     l1073:
  1944     029B  3063               	movlw	99
  1945     029C  00A6               	movwf	_score
  1946     029D                     l92:
  1947     029D  0008               	return
  1948     029E                     __end_of_up1:
  1949                           
  1950                           	psect	text13
  1951     029E                     __ptext13:	
  1952 ;; *************** function _up2 *****************
  1953 ;; Defined at:
  1954 ;;		line 19 in file "buttons.c"
  1955 ;; Parameters:    Size  Location     Type
  1956 ;;		None
  1957 ;; Auto vars:     Size  Location     Type
  1958 ;;		None
  1959 ;; Return value:  Size  Location     Type
  1960 ;;                  1    wreg      void 
  1961 ;; Registers used:
  1962 ;;		wreg, status,2, status,0, btemp+1
  1963 ;; Tracked objects:
  1964 ;;		On entry : 0/0
  1965 ;;		On exit  : 0/0
  1966 ;;		Unchanged: 0/0
  1967 ;; Data sizes:     COMMON   BANK0   BANK1
  1968 ;;      Params:         0       0       0
  1969 ;;      Locals:         0       0       0
  1970 ;;      Temps:          0       0       0
  1971 ;;      Totals:         0       0       0
  1972 ;;Total ram usage:        0 bytes
  1973 ;; Hardware stack levels used: 1
  1974 ;; Hardware stack levels required when called: 1
  1975 ;; This function calls:
  1976 ;;		Nothing
  1977 ;; This function is called by:
  1978 ;;		_main
  1979 ;;		_checkButtons
  1980 ;;		_checkButton
  1981 ;; This function uses a non-reentrant model
  1982 ;;
  1983                           
  1984     029E                     _up2:	
  1985                           ;psect for function _up2
  1986                           
  1987     029E                     l1067:	
  1988                           ;incstack = 0
  1989                           ; Regs used in _up2: [wreg+status,2+status,0+btemp+1]
  1990                           
  1991                           
  1992                           ;buttons.c: 20:     if (++score.team2 > 99) score.team2 = 99;
  1993     029E  3001               	movlw	1
  1994     029F  00FF               	movwf	btemp+1
  1995     02A0  087F               	movf	btemp+1,w
  1996     02A1  1283               	bcf	3,5	;RP0=0, select bank0
  1997     02A2  1303               	bcf	3,6	;RP1=0, select bank0
  1998     02A3  07A7               	addwf	_score+1,f
  1999     02A4  0827               	movf	_score+1,w
  2000     02A5  3A80               	xorlw	128
  2001     02A6  3E1C               	addlw	-228
  2002     02A7  1C03               	skipc
  2003     02A8  2AAA               	goto	u591
  2004     02A9  2AAB               	goto	u590
  2005     02AA                     u591:
  2006     02AA  2AAD               	goto	l96
  2007     02AB                     u590:
  2008     02AB                     l1069:
  2009     02AB  3063               	movlw	99
  2010     02AC  00A7               	movwf	_score+1
  2011     02AD                     l96:
  2012     02AD  0008               	return
  2013     02AE                     __end_of_up2:
  2014                           
  2015                           	psect	text14
  2016     01DC                     __ptext14:	
  2017 ;; *************** function _win *****************
  2018 ;; Defined at:
  2019 ;;		line 38 in file "buttons.c"
  2020 ;; Parameters:    Size  Location     Type
  2021 ;;		None
  2022 ;; Auto vars:     Size  Location     Type
  2023 ;;		None
  2024 ;; Return value:  Size  Location     Type
  2025 ;;                  1    wreg      void 
  2026 ;; Registers used:
  2027 ;;		wreg, status,2, status,0, btemp+1
  2028 ;; Tracked objects:
  2029 ;;		On entry : 0/0
  2030 ;;		On exit  : 0/0
  2031 ;;		Unchanged: 0/0
  2032 ;; Data sizes:     COMMON   BANK0   BANK1
  2033 ;;      Params:         0       0       0
  2034 ;;      Locals:         0       0       0
  2035 ;;      Temps:          1       0       0
  2036 ;;      Totals:         1       0       0
  2037 ;;Total ram usage:        1 bytes
  2038 ;; Hardware stack levels used: 1
  2039 ;; Hardware stack levels required when called: 1
  2040 ;; This function calls:
  2041 ;;		Nothing
  2042 ;; This function is called by:
  2043 ;;		_checkButtons
  2044 ;;		_checkButton
  2045 ;; This function uses a non-reentrant model
  2046 ;;
  2047                           
  2048     01DC                     _win:	
  2049                           ;psect for function _win
  2050                           
  2051     01DC                     l1089:	
  2052                           ;incstack = 0
  2053                           ; Regs used in _win: [wreg+status,2+status,0+btemp+1]
  2054                           
  2055                           
  2056                           ;buttons.c: 39:     if (score.team1 == score.team2) return;
  2057     01DC  1283               	bcf	3,5	;RP0=0, select bank0
  2058     01DD  1303               	bcf	3,6	;RP1=0, select bank0
  2059     01DE  0827               	movf	_score+1,w
  2060     01DF  0626               	xorwf	_score,w
  2061     01E0  1D03               	skipz
  2062     01E1  29E3               	goto	u651
  2063     01E2  29E4               	goto	u650
  2064     01E3                     u651:
  2065     01E3  29E5               	goto	l1093
  2066     01E4                     u650:
  2067     01E4  2A03               	goto	l114
  2068     01E5                     l1093:
  2069                           
  2070                           ;buttons.c: 40:     if (score.team1 > score.team2) score.win1++;
  2071     01E5  0827               	movf	_score+1,w
  2072     01E6  3A80               	xorlw	128
  2073     01E7  00F2               	movwf	??_win
  2074     01E8  0826               	movf	_score,w
  2075     01E9  3A80               	xorlw	128
  2076     01EA  02F2               	subwf	??_win,f
  2077     01EB  1803               	skipnc
  2078     01EC  29EE               	goto	u661
  2079     01ED  29EF               	goto	u660
  2080     01EE                     u661:
  2081     01EE  29F3               	goto	l1097
  2082     01EF                     u660:
  2083     01EF                     l1095:
  2084     01EF  3001               	movlw	1
  2085     01F0  00FF               	movwf	btemp+1
  2086     01F1  087F               	movf	btemp+1,w
  2087     01F2  07A8               	addwf	_score+2,f
  2088     01F3                     l1097:
  2089                           
  2090                           ;buttons.c: 41:     if (score.team2 > score.team1) score.win2++;
  2091     01F3  0826               	movf	_score,w
  2092     01F4  3A80               	xorlw	128
  2093     01F5  00F2               	movwf	??_win
  2094     01F6  0827               	movf	_score+1,w
  2095     01F7  3A80               	xorlw	128
  2096     01F8  02F2               	subwf	??_win,f
  2097     01F9  1803               	skipnc
  2098     01FA  29FC               	goto	u671
  2099     01FB  29FD               	goto	u670
  2100     01FC                     u671:
  2101     01FC  2A01               	goto	l1101
  2102     01FD                     u670:
  2103     01FD                     l1099:
  2104     01FD  3001               	movlw	1
  2105     01FE  00FF               	movwf	btemp+1
  2106     01FF  087F               	movf	btemp+1,w
  2107     0200  07A9               	addwf	_score+3,f
  2108     0201                     l1101:
  2109                           
  2110                           ;buttons.c: 42:     score.team1 = score.team2 = 0;
  2111     0201  01A7               	clrf	_score+1
  2112     0202  01A6               	clrf	_score
  2113     0203                     l114:
  2114     0203  0008               	return
  2115     0204                     __end_of_win:
  2116                           
  2117                           	psect	text15
  2118     00DB                     __ptext15:	
  2119 ;; *************** function _isr *****************
  2120 ;; Defined at:
  2121 ;;		line 3 in file "interrupt.c"
  2122 ;; Parameters:    Size  Location     Type
  2123 ;;		None
  2124 ;; Auto vars:     Size  Location     Type
  2125 ;;		None
  2126 ;; Return value:  Size  Location     Type
  2127 ;;                  1    wreg      void 
  2128 ;; Registers used:
  2129 ;;		wreg, status,2, status,0
  2130 ;; Tracked objects:
  2131 ;;		On entry : 0/0
  2132 ;;		On exit  : 0/0
  2133 ;;		Unchanged: 0/0
  2134 ;; Data sizes:     COMMON   BANK0   BANK1
  2135 ;;      Params:         0       0       0
  2136 ;;      Locals:         0       0       0
  2137 ;;      Temps:          2       0       0
  2138 ;;      Totals:         2       0       0
  2139 ;;Total ram usage:        2 bytes
  2140 ;; Hardware stack levels used: 1
  2141 ;; This function calls:
  2142 ;;		Nothing
  2143 ;; This function is called by:
  2144 ;;		Interrupt level 1
  2145 ;; This function uses a non-reentrant model
  2146 ;;
  2147                           
  2148     00DB                     _isr:	
  2149                           ;psect for function _isr
  2150                           
  2151     00DB                     i1l1259:
  2152                           
  2153                           ;interrupt.c: 4:     if (INTCONbits.INTF) {
  2154     00DB  1C8B               	btfss	11,1	;volatile
  2155     00DC  28DE               	goto	u88_21
  2156     00DD  28DF               	goto	u88_20
  2157     00DE                     u88_21:
  2158     00DE  28EE               	goto	i1l181
  2159     00DF                     u88_20:
  2160     00DF                     i1l1261:
  2161                           
  2162                           ;interrupt.c: 5:         INTCONbits.INTF = 0;
  2163     00DF  108B               	bcf	11,1	;volatile
  2164                           
  2165                           ;interrupt.c: 6:         timers[2] = 300;
  2166     00E0  3001               	movlw	1
  2167     00E1  1283               	bcf	3,5	;RP0=0, select bank0
  2168     00E2  1303               	bcf	3,6	;RP1=0, select bank0
  2169     00E3  00A5               	movwf	_timers+5	;volatile
  2170     00E4  302C               	movlw	44
  2171     00E5  00A4               	movwf	_timers+4	;volatile
  2172     00E6                     i1l1263:
  2173                           
  2174                           ;interrupt.c: 7:         rxClocks++;
  2175     00E6  3001               	movlw	1
  2176     00E7  07AB               	addwf	_rxClocks,f	;volatile
  2177     00E8  1803               	skipnc
  2178     00E9  0AAC               	incf	_rxClocks+1,f	;volatile
  2179     00EA  3000               	movlw	0
  2180     00EB  07AC               	addwf	_rxClocks+1,f	;volatile
  2181     00EC                     i1l1265:
  2182                           
  2183                           ;interrupt.c: 8:         PORTCbits.RC7 = 1;
  2184     00EC  1787               	bsf	7,7	;volatile
  2185                           
  2186                           ;interrupt.c: 9:     } else if (PIR1bits.TMR1IF) {
  2187     00ED  291D               	goto	i1l187
  2188     00EE                     i1l181:
  2189     00EE  1283               	bcf	3,5	;RP0=0, select bank0
  2190     00EF  1303               	bcf	3,6	;RP1=0, select bank0
  2191     00F0  1C0C               	btfss	12,0	;volatile
  2192     00F1  28F3               	goto	u89_21
  2193     00F2  28F4               	goto	u89_20
  2194     00F3                     u89_21:
  2195     00F3  291D               	goto	i1l187
  2196     00F4                     u89_20:
  2197     00F4                     i1l1267:
  2198                           
  2199                           ;interrupt.c: 10:         PIR1bits.TMR1IF = 0;
  2200     00F4  100C               	bcf	12,0	;volatile
  2201     00F5                     i1l1269:
  2202                           
  2203                           ;interrupt.c: 11:         if (timers[0]) timers[0]--;
  2204     00F5  0820               	movf	_timers,w	;volatile
  2205     00F6  0421               	iorwf	_timers+1,w	;volatile
  2206     00F7  1903               	btfsc	3,2
  2207     00F8  28FA               	goto	u90_21
  2208     00F9  28FB               	goto	u90_20
  2209     00FA                     u90_21:
  2210     00FA  2901               	goto	i1l1273
  2211     00FB                     u90_20:
  2212     00FB                     i1l1271:
  2213     00FB  3001               	movlw	1
  2214     00FC  02A0               	subwf	_timers,f	;volatile
  2215     00FD  3000               	movlw	0
  2216     00FE  1C03               	skipc
  2217     00FF  03A1               	decf	_timers+1,f	;volatile
  2218     0100  02A1               	subwf	_timers+1,f	;volatile
  2219     0101                     i1l1273:
  2220                           
  2221                           ;interrupt.c: 12:         if (timers[1]) timers[1]--;
  2222     0101  0822               	movf	_timers+2,w	;volatile
  2223     0102  0423               	iorwf	_timers+3,w	;volatile
  2224     0103  1903               	btfsc	3,2
  2225     0104  2906               	goto	u91_21
  2226     0105  2907               	goto	u91_20
  2227     0106                     u91_21:
  2228     0106  290D               	goto	i1l1277
  2229     0107                     u91_20:
  2230     0107                     i1l1275:
  2231     0107  3001               	movlw	1
  2232     0108  02A2               	subwf	_timers+2,f	;volatile
  2233     0109  3000               	movlw	0
  2234     010A  1C03               	skipc
  2235     010B  03A3               	decf	_timers+3,f	;volatile
  2236     010C  02A3               	subwf	_timers+3,f	;volatile
  2237     010D                     i1l1277:
  2238                           
  2239                           ;interrupt.c: 13:         if (timers[2]) timers[2]--;
  2240     010D  0824               	movf	_timers+4,w	;volatile
  2241     010E  0425               	iorwf	_timers+5,w	;volatile
  2242     010F  1903               	btfsc	3,2
  2243     0110  2912               	goto	u92_21
  2244     0111  2913               	goto	u92_20
  2245     0112                     u92_21:
  2246     0112  2919               	goto	i1l1281
  2247     0113                     u92_20:
  2248     0113                     i1l1279:
  2249     0113  3001               	movlw	1
  2250     0114  02A4               	subwf	_timers+4,f	;volatile
  2251     0115  3000               	movlw	0
  2252     0116  1C03               	skipc
  2253     0117  03A5               	decf	_timers+5,f	;volatile
  2254     0118  02A5               	subwf	_timers+5,f	;volatile
  2255     0119                     i1l1281:
  2256                           
  2257                           ;interrupt.c: 14:         TMR1 = 65535 - 3200;
  2258     0119  30F3               	movlw	243
  2259     011A  008F               	movwf	15	;volatile
  2260     011B  307F               	movlw	127
  2261     011C  008E               	movwf	14	;volatile
  2262     011D                     i1l187:
  2263     011D  0871               	movf	??_isr+1,w
  2264     011E  008A               	movwf	10
  2265     011F  0E70               	swapf	??_isr,w
  2266     0120  0083               	movwf	3
  2267     0121  0EFE               	swapf	btemp,f
  2268     0122  0E7E               	swapf	btemp,w
  2269     0123  0009               	retfie
  2270     0124                     __end_of_isr:
  2271     000C                     
  2272                           	psect	intentry
  2273     0004                     __pintentry:	
  2274                           ;incstack = 0
  2275                           ; Regs used in _isr: [wreg+status,2+status,0]
  2276                           
  2277     0004                     interrupt_function:
  2278     007E                     saved_w	set	btemp
  2279     0004  00FE               	movwf	btemp
  2280     0005  0E03               	swapf	3,w
  2281     0006  00F0               	movwf	??_isr
  2282     0007  080A               	movf	10,w
  2283     0008  00F1               	movwf	??_isr+1
  2284     0009  28DB               	ljmp	_isr
  2285                           
  2286                           	psect	functab
  2287     0013                     __pfunctab:
  2288     0013                     __fptable:
  2289     0013                     fptable:
  2290     0013  00FF               	movwf	(btemp+1)& (0+127)
  2291     0014  3000               	movlw	high fptable
  2292     0015  008A               	movwf	10
  2293     0016  087F               	movf	(btemp+1)& (0+127),w
  2294     0017  0782               	addwf	2,f
  2295     0018                     fpbase:
  2296     0018  2818               	goto	fpbase	; Call via a null pointer and you will get stuck here.
  2297     0019                     fp__win:
  2298     0019  29DC               	ljmp	_win
  2299     001A                     fp__up2:
  2300     001A                     entry__up2:
  2301     001A  2A9E               	ljmp	_up2
  2302     001B                     fp__up1:
  2303     001B                     entry__up1:
  2304     001B  2A8E               	ljmp	_up1
  2305     001C                     fp__down1:
  2306     001C  2ABA               	ljmp	_down1
  2307     001D                     fp__down2:
  2308     001D  2AAE               	ljmp	_down2
  2309     001E                     fp__change:
  2310     001E  2A4B               	ljmp	_change
  2311     001F                     __end_of__fptable:
  2312     007E                     btemp	set	126	;btemp
  2313     007E                     wtemp0	set	126
  2314                           
  2315                           	psect	config
  2316                           
  2317                           ;Config register CONFIG @ 0x2007
  2318                           ;	Oscillator Selection bits
  2319                           ;	FOSC = HS, HS oscillator
  2320                           ;	Watchdog Timer Enable bit
  2321                           ;	WDTE = OFF, WDT disabled
  2322                           ;	Power-up Timer Enable bit
  2323                           ;	PWRTE = OFF, PWRT disabled
  2324                           ;	FLASH Program Memory Code Protection bits
  2325                           ;	CP = OFF, Code protection off
  2326                           ;	Brown-out Reset Enable bit
  2327                           ;	BOREN = OFF, BOR disabled
  2328                           ;	Low Voltage In-Circuit Serial Programming Enable bit
  2329                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  2330                           ;	Data EE Memory Code Protection
  2331                           ;	CPD = OFF, Code Protection off
  2332                           ;	FLASH Program Memory Write Enable
  2333                           ;	WRT = ALL, Unprotected program memory may be written to by EECON control
  2334                           ;	In-Circuit Debugger Mode bit
  2335                           ;	DEBUG = 0x1, unprogrammed default
  2336     2007                     	org	8199
  2337     2007  3F3A               	dw	16186

Data Sizes:
    Strings     0
    Constant    16
    Data        0
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      12
    BANK0            80     12      25
    BANK1            32      0       0

Pointer List with Targets:

    checkButton@action	PTR FTN()void  size(1) Largest target is 1
		 -> change(), down1(), down2(), up1(), 
		 -> up2(), win(), 


Critical Paths under _main in COMMON

    _getNumber->_calcDigit
    _calcDigit->___awdiv
    _checkButtons->_checkButton
    _checkButton->_change
    _checkButton->_win

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_updateDisplay
    _getNumber->_calcDigit

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    1545
                                              9 BANK0      3     3      0
                       _checkButtons
                              _setup
                                _up1
                                _up2
                      _updateDisplay
 ---------------------------------------------------------------------------------
 (1) _updateDisplay                                        2     2      0     976
                                              7 BANK0      2     2      0
                          _getNumber
 ---------------------------------------------------------------------------------
 (2) _getNumber                                            0     0      0     930
                          _calcDigit
 ---------------------------------------------------------------------------------
 (3) _calcDigit                                            8     7      1     930
                                             10 COMMON     1     0      1
                                              0 BANK0      7     7      0
                            ___awdiv
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               3     2      1     168
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     452
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkButtons                                         2     2      0     569
                                              5 COMMON     2     2      0
                        _checkButton
 ---------------------------------------------------------------------------------
 (2) _checkButton                                          2     1      1     545
                                              3 COMMON     2     1      1
                             _change *
                              _down1 *
                              _down2 *
                                _up1 *
                                _up2 *
                                _win *
 ---------------------------------------------------------------------------------
 (3) _win                                                  1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _up2                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _up1                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _down2                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _down1                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _change                                               1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _checkButtons
     _checkButton
       _change *
       _down1 *
       _down2 *
       _up1 *
       _up2 *
       _win *
   _setup
   _up1
   _up2
   _updateDisplay
     _getNumber
       _calcDigit
         ___awdiv
         ___bmul

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              40      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      B       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      25       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      C      19       5       31.2%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            20      0       0       6        0.0%
BANK1               20      0       0       7        0.0%
DATA                 0      0      25       8        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Mon Jul 22 14:15:12 2024

   __end_of_checkButtons 00DB                        pc 0002           ___bmul@product 0073  
                     l55 024A                       l92 029D                       l86 022A  
                     l96 02AD             ___awdiv@sign 0077                       fsr 0004  
                    l100 02C5                      l110 0262                      l104 02B9  
                    l121 00DA                      l114 0203                      l143 0186  
                    l144 0187                      l155 01B2                      l148 01DB  
                    l426 0085                      l299 028D                      _GIE 005F  
                    u500 002F                      u501 002E                      u510 0040  
                    u511 003F                      u600 029B                      u601 029A  
                    u610 02C4                      u530 0052                      u611 02C3  
                    u531 0051                      u620 02B8                      u700 020F  
                    u621 02B7                      u701 020E                      u525 0044  
                    u630 0254                      u710 0216                      u550 0063  
                    u470 027F                      u631 0253                      u711 0215  
                    u551 0062                      u471 027E                      u640 025B  
                    u720 0226                      u800 00BD                      u480 028C  
                    u641 025A                      u721 0225                      u801 00BC  
                    u545 0053                      u481 028B                      u650 01E4  
                    u810 00C9                      u570 0077                      u490 0024  
                    u730 01BB                      u651 01E3                      u811 00C8  
                    u571 0076                      u555 005F                      u491 0023  
                    u731 01BA                      u660 01EF                      u820 00D7  
                    u580 007C                      u740 01C5                      u661 01EE  
                    u821 00D6                      u581 007B                      u565 006B  
                    u741 01C4                      u670 01FD                      u590 02AB  
                    u750 01D0                      u830 0190                      u671 01FC  
                    u591 02AA                      u751 01CF                      u831 018F  
                    u680 0177                      u760 01D8                      u840 019F  
                    u681 0176                      u761 01D7                      u841 019E  
                    u690 020A                      u770 0094                      u850 013D  
                    u691 0209                      u771 0093                      u851 013C  
                    u780 00A2                      u860 0143                      u781 00A1  
                    u861 0142                      u790 00AE                      u870 014D  
                    u791 00AD                      u871 014C                      u937 012D  
                    _up1 028E                      _up2 029E                      _isr 00DB  
                    fsr0 0004                      _win 01DC                      indf 0000  
                   l1011 027F                     l1101 0201                     l1013 0283  
                   l1031 002B                     l1023 001F                     l1015 0285  
                   l1007 027A                     l1103 0159                     l1121 0211  
                   l1113 0205                     l1201 0086                     l1041 0040  
                   l1033 002F                     l1025 0020                     l1017 0287  
                   l1009 027B                     l1105 0171                     l1123 0216  
                   l1115 020A                     l1211 00BD                     l1203 0088  
                   l1051 0063                     l1043 0043                     l1035 0034  
                   l1027 0024                     l1019 028C                     l1107 0177  
                   l1125 021C                     l1117 020F                     l1213 00C9  
                   l1205 0094                     l1061 007C                     l1053 0069  
                   l1045 004A                     l1037 0038                     l1029 0029  
                   l1109 017F                     l1141 01B3                     l1071 028E  
                   l1135 0227                     l1215 00D7                     l1207 00A2  
                   l1063 0081                     l1055 006A                     l1047 004E  
                   l1039 003A                     l1143 01BB                     l1231 01A7  
                   l1223 0191                     l1073 029B                     l1081 02B8  
                   l1129 021E                     l1209 00AE                     l1217 00D8  
                   l1057 0071                     l1049 0052                     l1161 01D8  
                   l1153 01CA                     l1233 01AC                     l1225 0195  
                   l1241 0133                     l1067 029E                     l1075 02BA  
                   l1083 024B                     l1171 0231                     l1059 0077  
                   l1155 01D0                     l1147 01BF                     l1235 01B0  
                   l1227 019F                     l1219 0188                     l1251 0144  
                   l1243 0134                     l1093 01E5                     l1069 02AB  
                   l1077 02C4                     l1085 0254                     l1181 0238  
                   l1173 0232                     l1165 01DA                     l1149 01C5  
                   l1229 01A0                     l1253 014D                     l1245 0135  
                   l1237 0124                     l1095 01EF                     l1079 02AE  
                   l1087 025C                     l1191 0242                     l1183 0239  
                   l1175 0235                     l1159 01D2                     l1255 014F  
                   l1247 013D                     l1239 0125                     l1097 01F3  
                   l1089 01DC                     l1193 0243                     l1185 023A  
                   l1177 0236                     l1169 022B                     l1257 0150  
                   l1249 0143                     l1099 01FD                     l1195 0244  
                   l1187 0240                     l1179 0237                     l1197 0245  
                   l1189 0241                     l1199 0246                     ?_up1 0070  
                   ?_up2 0070                     ?_isr 0070                     ?_win 0070  
                   _PEIE 005E                     _TMR1 000E           ?_updateDisplay 0070  
        __end_of_NUMBERS 0273                     _main 0124                     btemp 007E  
                   start 000A        ___bmul@multiplier 0074                    ??_up1 0072  
                  ??_up2 0072                    ??_isr 0070                    ??_win 0072  
                  ?_main 0070          __end_of___awdiv 0086          ___awdiv@divisor 0072  
                  _T1CON 0010                    i1l181 00EE                    i1l187 011D  
        ___awdiv@counter 0076                    _PORTB 0006                    _PORTC 0007  
                  _TRISA 0085                    _TRISB 0086                    _TRISC 0087  
                  u90_20 00FB                    u90_21 00FA                    u91_20 0107  
                  u91_21 0106                    u92_20 0113                    u92_21 0112  
                  u88_20 00DF                    u88_21 00DE                    u89_20 00F4  
                  u89_21 00F3                    _down1 02BA                    _down2 02AE  
                  _score 0026                    _setup 022B                    fpbase 0018  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 000B             __end_of_main 0156                   ??_main 0036  
                 _ADCON0 001F                   ?_down1 0070                   ?_down2 0070  
        ??_updateDisplay 007B         ___awdiv@dividend 0074                   ?_setup 0070  
                 _DIGITS 0273                   i1l1261 00DF                   i1l1271 00FB  
                 i1l1263 00E6                   i1l1281 0119                   i1l1273 0101  
                 i1l1265 00EC                   i1l1275 0107                   i1l1267 00F4  
                 i1l1259 00DB                   i1l1277 010D                   i1l1269 00F5  
                 i1l1279 0113         __end_of__fptable 001F      updateDisplay@number 0034  
                 ___bmul 0279                ??___awdiv 0076                   _change 024B  
                 _button 007B         ___awdiv@quotient 0078                   _timers 0020  
                 fp__up1 001B                   fp__up2 001A                   fp__win 0019  
                 fptable 0013                   fptotal 000C                   saved_w 007E  
          _calcDigit$349 002F             _checkButtons 0086  __end_of__initialization 0011  
    ___bmul@multiplicand 0072           __pcstackCOMMON 0070            __end_of_down1 02C6  
          __end_of_down2 02BA            __end_of_setup 024B           _OPTION_REGbits 0081  
                ??_down1 0072                  ??_down2 0072                  ??_setup 0072  
             __pbssBANK0 0020               __pmaintext 0124                  ?___bmul 0072  
                ?_change 0070               __pintentry 0004               calcDigit@d 0033  
             calcDigit@u 0031        __end_of_calcDigit 0188                  _NUMBERS 0269  
             __stringtab 0263        __end_of_getNumber 01DC                  ___awdiv 001F  
          ??_checkButton 0074                  __ptext1 0188                  __ptext2 01B3  
                __ptext3 0156                  __ptext4 0279                  __ptext5 001F  
                __ptext6 022B                  __ptext7 0086                  __ptext8 0204  
                __ptext9 024B                _T1CONbits 0010           checkButton@btn 0074  
                clrloop0 02C7        checkButton@action 0073     end_of_initialization 0011  
              _PORTAbits 0005                _PORTCbits 0007      __end_of_checkButton 022B  
  __end_of_updateDisplay 01B3           __end_of_DIGITS 0279           calcDigit@dozen 007A  
         calcDigit@value 0032           __end_of___bmul 028E           __end_of_change 0263  
    start_initialization 000B              __end_of_up1 029E              __end_of_up2 02AE  
            __end_of_isr 0124              __end_of_win 0204       updateDisplay@digit 0035  
               ??___bmul 0073                 ??_change 0072              _checkButton 0204  
            __pbssCOMMON 007B                ___latbits 0000            __pcstackBANK0 002D  
      __size_of__fptable 000C                _calcDigit 0156                __pfunctab 0013  
               ?___awdiv 0072                _getNumber 01B3                __pstrings 0263  
              change@aux 0072               ?_calcDigit 007A        interrupt_function 0004  
              clear_ram0 02C6                 _PIE1bits 008C                 _PIR1bits 000C  
             ?_getNumber 0070                fp__change 001E              __stringbase 0268  
             _ADCON1bits 009F            ?_checkButtons 0070         _checkButtons$327 0076  
              entry__up1 001B                entry__up2 001A       __end_of__stringtab 0269  
               __fptable 0013           ??_checkButtons 0075                 __ptext10 02AE  
               __ptext11 02BA                 __ptext12 028E                 __ptext13 029E  
               __ptext14 01DC                 __ptext15 00DB              ??_calcDigit 002D  
               _rxClocks 002B                 fp__down1 001C                 fp__down2 001D  
            ??_getNumber 007B             ?_checkButton 0073               _INTCONbits 000B  
               intlevel1 0013                stringcode 0263                 stringdir 0263  
               stringtab 0263            _updateDisplay 0188  
